
Business_Card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a5c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  08003b1c  08003b1c  00013b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cbc  08003cbc  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003cbc  08003cbc  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003cbc  08003cbc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cbc  08003cbc  00013cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cc0  08003cc0  00013cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003cc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000070  08003d34  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08003d34  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006ccf  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000172f  00000000  00000000  00026d67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000768  00000000  00000000  00028498  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000690  00000000  00000000  00028c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fddd  00000000  00000000  00029290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009d1e  00000000  00000000  0003906d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a043  00000000  00000000  00042d8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009cdce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002340  00000000  00000000  0009ce20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003b04 	.word	0x08003b04

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003b04 	.word	0x08003b04

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_lmul>:
 8000408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800040a:	46ce      	mov	lr, r9
 800040c:	4647      	mov	r7, r8
 800040e:	b580      	push	{r7, lr}
 8000410:	0007      	movs	r7, r0
 8000412:	4699      	mov	r9, r3
 8000414:	0c3b      	lsrs	r3, r7, #16
 8000416:	469c      	mov	ip, r3
 8000418:	0413      	lsls	r3, r2, #16
 800041a:	0c1b      	lsrs	r3, r3, #16
 800041c:	001d      	movs	r5, r3
 800041e:	000e      	movs	r6, r1
 8000420:	4661      	mov	r1, ip
 8000422:	0400      	lsls	r0, r0, #16
 8000424:	0c14      	lsrs	r4, r2, #16
 8000426:	0c00      	lsrs	r0, r0, #16
 8000428:	4345      	muls	r5, r0
 800042a:	434b      	muls	r3, r1
 800042c:	4360      	muls	r0, r4
 800042e:	4361      	muls	r1, r4
 8000430:	18c0      	adds	r0, r0, r3
 8000432:	0c2c      	lsrs	r4, r5, #16
 8000434:	1820      	adds	r0, r4, r0
 8000436:	468c      	mov	ip, r1
 8000438:	4283      	cmp	r3, r0
 800043a:	d903      	bls.n	8000444 <__aeabi_lmul+0x3c>
 800043c:	2380      	movs	r3, #128	; 0x80
 800043e:	025b      	lsls	r3, r3, #9
 8000440:	4698      	mov	r8, r3
 8000442:	44c4      	add	ip, r8
 8000444:	4649      	mov	r1, r9
 8000446:	4379      	muls	r1, r7
 8000448:	4372      	muls	r2, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	4463      	add	r3, ip
 800044e:	042d      	lsls	r5, r5, #16
 8000450:	0c2d      	lsrs	r5, r5, #16
 8000452:	18c9      	adds	r1, r1, r3
 8000454:	0400      	lsls	r0, r0, #16
 8000456:	1940      	adds	r0, r0, r5
 8000458:	1889      	adds	r1, r1, r2
 800045a:	bcc0      	pop	{r6, r7}
 800045c:	46b9      	mov	r9, r7
 800045e:	46b0      	mov	r8, r6
 8000460:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <RandomInt>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


int RandomInt(int min, int max){
 8000464:	b590      	push	{r4, r7, lr}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
 800046c:	6039      	str	r1, [r7, #0]
   return min + rand() / (RAND_MAX / (max - min + 1) + 1);
 800046e:	f002 fac3 	bl	80029f8 <rand>
 8000472:	0004      	movs	r4, r0
 8000474:	683a      	ldr	r2, [r7, #0]
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	1ad3      	subs	r3, r2, r3
 800047a:	3301      	adds	r3, #1
 800047c:	0019      	movs	r1, r3
 800047e:	4808      	ldr	r0, [pc, #32]	; (80004a0 <RandomInt+0x3c>)
 8000480:	f7ff fed6 	bl	8000230 <__divsi3>
 8000484:	0003      	movs	r3, r0
 8000486:	3301      	adds	r3, #1
 8000488:	0019      	movs	r1, r3
 800048a:	0020      	movs	r0, r4
 800048c:	f7ff fed0 	bl	8000230 <__divsi3>
 8000490:	0003      	movs	r3, r0
 8000492:	001a      	movs	r2, r3
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	18d3      	adds	r3, r2, r3
}
 8000498:	0018      	movs	r0, r3
 800049a:	46bd      	mov	sp, r7
 800049c:	b003      	add	sp, #12
 800049e:	bd90      	pop	{r4, r7, pc}
 80004a0:	7fffffff 	.word	0x7fffffff

080004a4 <PowerIMUOn>:


void PowerIMUOn(){
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b086      	sub	sp, #24
 80004a8:	af04      	add	r7, sp, #16
	uint8_t data = 0b00001111;
 80004aa:	1dfb      	adds	r3, r7, #7
 80004ac:	220f      	movs	r2, #15
 80004ae:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1, IMU_I2C_ADDR, IMU_REG_PWR_MGMT0, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 80004b0:	4808      	ldr	r0, [pc, #32]	; (80004d4 <PowerIMUOn+0x30>)
 80004b2:	2301      	movs	r3, #1
 80004b4:	425b      	negs	r3, r3
 80004b6:	9302      	str	r3, [sp, #8]
 80004b8:	2301      	movs	r3, #1
 80004ba:	9301      	str	r3, [sp, #4]
 80004bc:	1dfb      	adds	r3, r7, #7
 80004be:	9300      	str	r3, [sp, #0]
 80004c0:	2301      	movs	r3, #1
 80004c2:	221f      	movs	r2, #31
 80004c4:	21d0      	movs	r1, #208	; 0xd0
 80004c6:	f000 ff65 	bl	8001394 <HAL_I2C_Mem_Write>
}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	46bd      	mov	sp, r7
 80004ce:	b002      	add	sp, #8
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	46c0      	nop			; (mov r8, r8)
 80004d4:	2000008c 	.word	0x2000008c

080004d8 <GetIMUAccelX>:

int16_t GetIMUAccelX(){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b086      	sub	sp, #24
 80004dc:	af04      	add	r7, sp, #16

	uint8_t data1;
	HAL_I2C_Mem_Read(&hi2c1, IMU_I2C_ADDR, IMU_REG_ACCEL_DATA_X1, I2C_MEMADD_SIZE_8BIT, &data1, 1, HAL_MAX_DELAY);
 80004de:	4816      	ldr	r0, [pc, #88]	; (8000538 <GetIMUAccelX+0x60>)
 80004e0:	2301      	movs	r3, #1
 80004e2:	425b      	negs	r3, r3
 80004e4:	9302      	str	r3, [sp, #8]
 80004e6:	2301      	movs	r3, #1
 80004e8:	9301      	str	r3, [sp, #4]
 80004ea:	1d7b      	adds	r3, r7, #5
 80004ec:	9300      	str	r3, [sp, #0]
 80004ee:	2301      	movs	r3, #1
 80004f0:	220b      	movs	r2, #11
 80004f2:	21d0      	movs	r1, #208	; 0xd0
 80004f4:	f001 f87c 	bl	80015f0 <HAL_I2C_Mem_Read>
	uint8_t data0;
	HAL_I2C_Mem_Read(&hi2c1, IMU_I2C_ADDR, IMU_REG_ACCEL_DATA_X0, I2C_MEMADD_SIZE_8BIT, &data0, 1, HAL_MAX_DELAY);
 80004f8:	480f      	ldr	r0, [pc, #60]	; (8000538 <GetIMUAccelX+0x60>)
 80004fa:	2301      	movs	r3, #1
 80004fc:	425b      	negs	r3, r3
 80004fe:	9302      	str	r3, [sp, #8]
 8000500:	2301      	movs	r3, #1
 8000502:	9301      	str	r3, [sp, #4]
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	9300      	str	r3, [sp, #0]
 8000508:	2301      	movs	r3, #1
 800050a:	220c      	movs	r2, #12
 800050c:	21d0      	movs	r1, #208	; 0xd0
 800050e:	f001 f86f 	bl	80015f0 <HAL_I2C_Mem_Read>

	int16_t data = (((int16_t)data1) << 8) + data0;
 8000512:	1d7b      	adds	r3, r7, #5
 8000514:	781b      	ldrb	r3, [r3, #0]
 8000516:	b29b      	uxth	r3, r3
 8000518:	021b      	lsls	r3, r3, #8
 800051a:	b29a      	uxth	r2, r3
 800051c:	1d3b      	adds	r3, r7, #4
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	b29b      	uxth	r3, r3
 8000522:	18d3      	adds	r3, r2, r3
 8000524:	b29a      	uxth	r2, r3
 8000526:	1dbb      	adds	r3, r7, #6
 8000528:	801a      	strh	r2, [r3, #0]

	return data;
 800052a:	1dbb      	adds	r3, r7, #6
 800052c:	2200      	movs	r2, #0
 800052e:	5e9b      	ldrsh	r3, [r3, r2]
}
 8000530:	0018      	movs	r0, r3
 8000532:	46bd      	mov	sp, r7
 8000534:	b002      	add	sp, #8
 8000536:	bd80      	pop	{r7, pc}
 8000538:	2000008c 	.word	0x2000008c

0800053c <DetectCardShake>:


int DetectCardShake(){
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	if (abs(GetIMUAccelX()) > 6000){
 8000540:	f7ff ffca 	bl	80004d8 <GetIMUAccelX>
 8000544:	0003      	movs	r3, r0
 8000546:	17da      	asrs	r2, r3, #31
 8000548:	189b      	adds	r3, r3, r2
 800054a:	4053      	eors	r3, r2
 800054c:	b29b      	uxth	r3, r3
 800054e:	4a04      	ldr	r2, [pc, #16]	; (8000560 <DetectCardShake+0x24>)
 8000550:	4293      	cmp	r3, r2
 8000552:	d901      	bls.n	8000558 <DetectCardShake+0x1c>
		return 1;
 8000554:	2301      	movs	r3, #1
 8000556:	e000      	b.n	800055a <DetectCardShake+0x1e>
	}
	else {
		return 0;
 8000558:	2300      	movs	r3, #0
	}
}
 800055a:	0018      	movs	r0, r3
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	00001770 	.word	0x00001770

08000564 <VerifyIMU>:


int VerifyIMU(){
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af04      	add	r7, sp, #16
	uint8_t data;
	HAL_I2C_Mem_Read(&hi2c1, IMU_I2C_ADDR, IMU_REG_WHOAMI, I2C_MEMADD_SIZE_8BIT, &data, 1, HAL_MAX_DELAY);
 800056a:	480c      	ldr	r0, [pc, #48]	; (800059c <VerifyIMU+0x38>)
 800056c:	2301      	movs	r3, #1
 800056e:	425b      	negs	r3, r3
 8000570:	9302      	str	r3, [sp, #8]
 8000572:	2301      	movs	r3, #1
 8000574:	9301      	str	r3, [sp, #4]
 8000576:	1dfb      	adds	r3, r7, #7
 8000578:	9300      	str	r3, [sp, #0]
 800057a:	2301      	movs	r3, #1
 800057c:	2275      	movs	r2, #117	; 0x75
 800057e:	21d0      	movs	r1, #208	; 0xd0
 8000580:	f001 f836 	bl	80015f0 <HAL_I2C_Mem_Read>

	if (data == IMU_WHOAMI_VALUE){
 8000584:	1dfb      	adds	r3, r7, #7
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b67      	cmp	r3, #103	; 0x67
 800058a:	d101      	bne.n	8000590 <VerifyIMU+0x2c>
		return 1;
 800058c:	2301      	movs	r3, #1
 800058e:	e000      	b.n	8000592 <VerifyIMU+0x2e>
	}
	else {
		return 0;
 8000590:	2300      	movs	r3, #0
	}
}
 8000592:	0018      	movs	r0, r3
 8000594:	46bd      	mov	sp, r7
 8000596:	b002      	add	sp, #8
 8000598:	bd80      	pop	{r7, pc}
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	2000008c 	.word	0x2000008c

080005a0 <OneHotEncodeLED>:

void OneHotEncodeLED(int lightIndex){
 80005a0:	b590      	push	{r4, r7, lr}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]

	bool ledSwitch = false;
 80005a8:	240f      	movs	r4, #15
 80005aa:	193b      	adds	r3, r7, r4
 80005ac:	2200      	movs	r2, #0
 80005ae:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(GPIOF, RED1_Pin, ledSwitch);
 80005b0:	193b      	adds	r3, r7, r4
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	4855      	ldr	r0, [pc, #340]	; (800070c <OneHotEncodeLED+0x16c>)
 80005b6:	001a      	movs	r2, r3
 80005b8:	2101      	movs	r1, #1
 80005ba:	f000 fe37 	bl	800122c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, ledSwitch);
 80005be:	193b      	adds	r3, r7, r4
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	4853      	ldr	r0, [pc, #332]	; (8000710 <OneHotEncodeLED+0x170>)
 80005c4:	001a      	movs	r2, r3
 80005c6:	2102      	movs	r1, #2
 80005c8:	f000 fe30 	bl	800122c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, RED3_Pin, ledSwitch);
 80005cc:	193b      	adds	r3, r7, r4
 80005ce:	781a      	ldrb	r2, [r3, #0]
 80005d0:	2390      	movs	r3, #144	; 0x90
 80005d2:	05db      	lsls	r3, r3, #23
 80005d4:	2180      	movs	r1, #128	; 0x80
 80005d6:	0018      	movs	r0, r3
 80005d8:	f000 fe28 	bl	800122c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, YEL1_Pin, ledSwitch);
 80005dc:	193b      	adds	r3, r7, r4
 80005de:	781a      	ldrb	r2, [r3, #0]
 80005e0:	2390      	movs	r3, #144	; 0x90
 80005e2:	05db      	lsls	r3, r3, #23
 80005e4:	2102      	movs	r1, #2
 80005e6:	0018      	movs	r0, r3
 80005e8:	f000 fe20 	bl	800122c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, YEL2_Pin, ledSwitch);
 80005ec:	193b      	adds	r3, r7, r4
 80005ee:	781a      	ldrb	r2, [r3, #0]
 80005f0:	2390      	movs	r3, #144	; 0x90
 80005f2:	05db      	lsls	r3, r3, #23
 80005f4:	2101      	movs	r1, #1
 80005f6:	0018      	movs	r0, r3
 80005f8:	f000 fe18 	bl	800122c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOF, YEL3_Pin, ledSwitch);
 80005fc:	193b      	adds	r3, r7, r4
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	4842      	ldr	r0, [pc, #264]	; (800070c <OneHotEncodeLED+0x16c>)
 8000602:	001a      	movs	r2, r3
 8000604:	2102      	movs	r1, #2
 8000606:	f000 fe11 	bl	800122c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GRN1_Pin, ledSwitch);
 800060a:	193b      	adds	r3, r7, r4
 800060c:	781a      	ldrb	r2, [r3, #0]
 800060e:	2390      	movs	r3, #144	; 0x90
 8000610:	05db      	lsls	r3, r3, #23
 8000612:	2110      	movs	r1, #16
 8000614:	0018      	movs	r0, r3
 8000616:	f000 fe09 	bl	800122c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GRN2_Pin, ledSwitch);
 800061a:	193b      	adds	r3, r7, r4
 800061c:	781a      	ldrb	r2, [r3, #0]
 800061e:	2390      	movs	r3, #144	; 0x90
 8000620:	05db      	lsls	r3, r3, #23
 8000622:	2108      	movs	r1, #8
 8000624:	0018      	movs	r0, r3
 8000626:	f000 fe01 	bl	800122c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GRN3_Pin, ledSwitch);
 800062a:	193b      	adds	r3, r7, r4
 800062c:	781a      	ldrb	r2, [r3, #0]
 800062e:	2390      	movs	r3, #144	; 0x90
 8000630:	05db      	lsls	r3, r3, #23
 8000632:	2104      	movs	r1, #4
 8000634:	0018      	movs	r0, r3
 8000636:	f000 fdf9 	bl	800122c <HAL_GPIO_WritePin>


	ledSwitch = true;
 800063a:	193b      	adds	r3, r7, r4
 800063c:	2201      	movs	r2, #1
 800063e:	701a      	strb	r2, [r3, #0]


	switch (lightIndex){
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2b09      	cmp	r3, #9
 8000644:	d85d      	bhi.n	8000702 <OneHotEncodeLED+0x162>
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	009a      	lsls	r2, r3, #2
 800064a:	4b32      	ldr	r3, [pc, #200]	; (8000714 <OneHotEncodeLED+0x174>)
 800064c:	18d3      	adds	r3, r2, r3
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	469f      	mov	pc, r3

		case 0:
			HAL_GPIO_WritePin(GPIOF, RED1_Pin, ledSwitch);
 8000652:	230f      	movs	r3, #15
 8000654:	18fb      	adds	r3, r7, r3
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	482c      	ldr	r0, [pc, #176]	; (800070c <OneHotEncodeLED+0x16c>)
 800065a:	001a      	movs	r2, r3
 800065c:	2101      	movs	r1, #1
 800065e:	f000 fde5 	bl	800122c <HAL_GPIO_WritePin>
			break;
 8000662:	e04e      	b.n	8000702 <OneHotEncodeLED+0x162>
		case 1:
			HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, ledSwitch);
 8000664:	230f      	movs	r3, #15
 8000666:	18fb      	adds	r3, r7, r3
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	4829      	ldr	r0, [pc, #164]	; (8000710 <OneHotEncodeLED+0x170>)
 800066c:	001a      	movs	r2, r3
 800066e:	2102      	movs	r1, #2
 8000670:	f000 fddc 	bl	800122c <HAL_GPIO_WritePin>
			break;
 8000674:	e045      	b.n	8000702 <OneHotEncodeLED+0x162>
		case 2:
			HAL_GPIO_WritePin(GPIOA, RED3_Pin, ledSwitch);
 8000676:	230f      	movs	r3, #15
 8000678:	18fb      	adds	r3, r7, r3
 800067a:	781a      	ldrb	r2, [r3, #0]
 800067c:	2390      	movs	r3, #144	; 0x90
 800067e:	05db      	lsls	r3, r3, #23
 8000680:	2180      	movs	r1, #128	; 0x80
 8000682:	0018      	movs	r0, r3
 8000684:	f000 fdd2 	bl	800122c <HAL_GPIO_WritePin>
			break;
 8000688:	e03b      	b.n	8000702 <OneHotEncodeLED+0x162>
		case 3:
			HAL_GPIO_WritePin(GPIOA, YEL1_Pin, ledSwitch);
 800068a:	230f      	movs	r3, #15
 800068c:	18fb      	adds	r3, r7, r3
 800068e:	781a      	ldrb	r2, [r3, #0]
 8000690:	2390      	movs	r3, #144	; 0x90
 8000692:	05db      	lsls	r3, r3, #23
 8000694:	2102      	movs	r1, #2
 8000696:	0018      	movs	r0, r3
 8000698:	f000 fdc8 	bl	800122c <HAL_GPIO_WritePin>
			break;
 800069c:	e031      	b.n	8000702 <OneHotEncodeLED+0x162>
		case 4:
			HAL_GPIO_WritePin(GPIOA, YEL2_Pin, ledSwitch);
 800069e:	230f      	movs	r3, #15
 80006a0:	18fb      	adds	r3, r7, r3
 80006a2:	781a      	ldrb	r2, [r3, #0]
 80006a4:	2390      	movs	r3, #144	; 0x90
 80006a6:	05db      	lsls	r3, r3, #23
 80006a8:	2101      	movs	r1, #1
 80006aa:	0018      	movs	r0, r3
 80006ac:	f000 fdbe 	bl	800122c <HAL_GPIO_WritePin>
			break;
 80006b0:	e027      	b.n	8000702 <OneHotEncodeLED+0x162>
		case 5:
			HAL_GPIO_WritePin(GPIOF, YEL3_Pin, ledSwitch);
 80006b2:	230f      	movs	r3, #15
 80006b4:	18fb      	adds	r3, r7, r3
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	4814      	ldr	r0, [pc, #80]	; (800070c <OneHotEncodeLED+0x16c>)
 80006ba:	001a      	movs	r2, r3
 80006bc:	2102      	movs	r1, #2
 80006be:	f000 fdb5 	bl	800122c <HAL_GPIO_WritePin>
			break;
 80006c2:	e01e      	b.n	8000702 <OneHotEncodeLED+0x162>
		case 6:
			HAL_GPIO_WritePin(GPIOA, GRN1_Pin, ledSwitch);
 80006c4:	230f      	movs	r3, #15
 80006c6:	18fb      	adds	r3, r7, r3
 80006c8:	781a      	ldrb	r2, [r3, #0]
 80006ca:	2390      	movs	r3, #144	; 0x90
 80006cc:	05db      	lsls	r3, r3, #23
 80006ce:	2110      	movs	r1, #16
 80006d0:	0018      	movs	r0, r3
 80006d2:	f000 fdab 	bl	800122c <HAL_GPIO_WritePin>
			break;
 80006d6:	e014      	b.n	8000702 <OneHotEncodeLED+0x162>
		case 7:
			HAL_GPIO_WritePin(GPIOA, GRN2_Pin, ledSwitch);
 80006d8:	230f      	movs	r3, #15
 80006da:	18fb      	adds	r3, r7, r3
 80006dc:	781a      	ldrb	r2, [r3, #0]
 80006de:	2390      	movs	r3, #144	; 0x90
 80006e0:	05db      	lsls	r3, r3, #23
 80006e2:	2108      	movs	r1, #8
 80006e4:	0018      	movs	r0, r3
 80006e6:	f000 fda1 	bl	800122c <HAL_GPIO_WritePin>
			break;
 80006ea:	e00a      	b.n	8000702 <OneHotEncodeLED+0x162>
		case 8:
			HAL_GPIO_WritePin(GPIOA, GRN3_Pin, ledSwitch);
 80006ec:	230f      	movs	r3, #15
 80006ee:	18fb      	adds	r3, r7, r3
 80006f0:	781a      	ldrb	r2, [r3, #0]
 80006f2:	2390      	movs	r3, #144	; 0x90
 80006f4:	05db      	lsls	r3, r3, #23
 80006f6:	2104      	movs	r1, #4
 80006f8:	0018      	movs	r0, r3
 80006fa:	f000 fd97 	bl	800122c <HAL_GPIO_WritePin>
			break;
 80006fe:	e000      	b.n	8000702 <OneHotEncodeLED+0x162>
		case 9:
			break;
 8000700:	46c0      	nop			; (mov r8, r8)

	}


}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	46bd      	mov	sp, r7
 8000706:	b005      	add	sp, #20
 8000708:	bd90      	pop	{r4, r7, pc}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	48001400 	.word	0x48001400
 8000710:	48000400 	.word	0x48000400
 8000714:	08003b1c 	.word	0x08003b1c

08000718 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800071e:	f000 fad9 	bl	8000cd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000722:	f000 f828 	bl	8000776 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000726:	f000 f8bd 	bl	80008a4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800072a:	f000 f87b 	bl	8000824 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  while(!VerifyIMU()){}
 800072e:	46c0      	nop			; (mov r8, r8)
 8000730:	f7ff ff18 	bl	8000564 <VerifyIMU>
 8000734:	1e03      	subs	r3, r0, #0
 8000736:	d0fb      	beq.n	8000730 <main+0x18>

  PowerIMUOn();
 8000738:	f7ff feb4 	bl	80004a4 <PowerIMUOn>

  for (int i = 0; i < 10; i ++){
 800073c:	2300      	movs	r3, #0
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	e009      	b.n	8000756 <main+0x3e>
	  OneHotEncodeLED(i);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	0018      	movs	r0, r3
 8000746:	f7ff ff2b 	bl	80005a0 <OneHotEncodeLED>
	  HAL_Delay(100);
 800074a:	2064      	movs	r0, #100	; 0x64
 800074c:	f000 fb26 	bl	8000d9c <HAL_Delay>
  for (int i = 0; i < 10; i ++){
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	3301      	adds	r3, #1
 8000754:	607b      	str	r3, [r7, #4]
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	2b09      	cmp	r3, #9
 800075a:	ddf2      	ble.n	8000742 <main+0x2a>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if (DetectCardShake()){
 800075c:	f7ff feee 	bl	800053c <DetectCardShake>
 8000760:	1e03      	subs	r3, r0, #0
 8000762:	d0fb      	beq.n	800075c <main+0x44>
		  OneHotEncodeLED(RandomInt(0,8));
 8000764:	2108      	movs	r1, #8
 8000766:	2000      	movs	r0, #0
 8000768:	f7ff fe7c 	bl	8000464 <RandomInt>
 800076c:	0003      	movs	r3, r0
 800076e:	0018      	movs	r0, r3
 8000770:	f7ff ff16 	bl	80005a0 <OneHotEncodeLED>
	  if (DetectCardShake()){
 8000774:	e7f2      	b.n	800075c <main+0x44>

08000776 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000776:	b590      	push	{r4, r7, lr}
 8000778:	b095      	sub	sp, #84	; 0x54
 800077a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800077c:	2420      	movs	r4, #32
 800077e:	193b      	adds	r3, r7, r4
 8000780:	0018      	movs	r0, r3
 8000782:	2330      	movs	r3, #48	; 0x30
 8000784:	001a      	movs	r2, r3
 8000786:	2100      	movs	r1, #0
 8000788:	f002 f92e 	bl	80029e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800078c:	2310      	movs	r3, #16
 800078e:	18fb      	adds	r3, r7, r3
 8000790:	0018      	movs	r0, r3
 8000792:	2310      	movs	r3, #16
 8000794:	001a      	movs	r2, r3
 8000796:	2100      	movs	r1, #0
 8000798:	f002 f926 	bl	80029e8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800079c:	003b      	movs	r3, r7
 800079e:	0018      	movs	r0, r3
 80007a0:	2310      	movs	r3, #16
 80007a2:	001a      	movs	r2, r3
 80007a4:	2100      	movs	r1, #0
 80007a6:	f002 f91f 	bl	80029e8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007aa:	0021      	movs	r1, r4
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	2202      	movs	r2, #2
 80007b0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b2:	187b      	adds	r3, r7, r1
 80007b4:	2201      	movs	r2, #1
 80007b6:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	2210      	movs	r2, #16
 80007bc:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007be:	187b      	adds	r3, r7, r1
 80007c0:	2200      	movs	r2, #0
 80007c2:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c4:	187b      	adds	r3, r7, r1
 80007c6:	0018      	movs	r0, r3
 80007c8:	f001 fbd8 	bl	8001f7c <HAL_RCC_OscConfig>
 80007cc:	1e03      	subs	r3, r0, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80007d0:	f000 f904 	bl	80009dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d4:	2110      	movs	r1, #16
 80007d6:	187b      	adds	r3, r7, r1
 80007d8:	2207      	movs	r2, #7
 80007da:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007dc:	187b      	adds	r3, r7, r1
 80007de:	2200      	movs	r2, #0
 80007e0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e8:	187b      	adds	r3, r7, r1
 80007ea:	2200      	movs	r2, #0
 80007ec:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007ee:	187b      	adds	r3, r7, r1
 80007f0:	2100      	movs	r1, #0
 80007f2:	0018      	movs	r0, r3
 80007f4:	f001 fedc 	bl	80025b0 <HAL_RCC_ClockConfig>
 80007f8:	1e03      	subs	r3, r0, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80007fc:	f000 f8ee 	bl	80009dc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000800:	003b      	movs	r3, r7
 8000802:	2220      	movs	r2, #32
 8000804:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000806:	003b      	movs	r3, r7
 8000808:	2200      	movs	r2, #0
 800080a:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800080c:	003b      	movs	r3, r7
 800080e:	0018      	movs	r0, r3
 8000810:	f001 fff2 	bl	80027f8 <HAL_RCCEx_PeriphCLKConfig>
 8000814:	1e03      	subs	r3, r0, #0
 8000816:	d001      	beq.n	800081c <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000818:	f000 f8e0 	bl	80009dc <Error_Handler>
  }
}
 800081c:	46c0      	nop			; (mov r8, r8)
 800081e:	46bd      	mov	sp, r7
 8000820:	b015      	add	sp, #84	; 0x54
 8000822:	bd90      	pop	{r4, r7, pc}

08000824 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000828:	4b1b      	ldr	r3, [pc, #108]	; (8000898 <MX_I2C1_Init+0x74>)
 800082a:	4a1c      	ldr	r2, [pc, #112]	; (800089c <MX_I2C1_Init+0x78>)
 800082c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800082e:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <MX_I2C1_Init+0x74>)
 8000830:	4a1b      	ldr	r2, [pc, #108]	; (80008a0 <MX_I2C1_Init+0x7c>)
 8000832:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000834:	4b18      	ldr	r3, [pc, #96]	; (8000898 <MX_I2C1_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800083a:	4b17      	ldr	r3, [pc, #92]	; (8000898 <MX_I2C1_Init+0x74>)
 800083c:	2201      	movs	r2, #1
 800083e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000840:	4b15      	ldr	r3, [pc, #84]	; (8000898 <MX_I2C1_Init+0x74>)
 8000842:	2200      	movs	r2, #0
 8000844:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000846:	4b14      	ldr	r3, [pc, #80]	; (8000898 <MX_I2C1_Init+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800084c:	4b12      	ldr	r3, [pc, #72]	; (8000898 <MX_I2C1_Init+0x74>)
 800084e:	2200      	movs	r2, #0
 8000850:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <MX_I2C1_Init+0x74>)
 8000854:	2200      	movs	r2, #0
 8000856:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000858:	4b0f      	ldr	r3, [pc, #60]	; (8000898 <MX_I2C1_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800085e:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <MX_I2C1_Init+0x74>)
 8000860:	0018      	movs	r0, r3
 8000862:	f000 fd01 	bl	8001268 <HAL_I2C_Init>
 8000866:	1e03      	subs	r3, r0, #0
 8000868:	d001      	beq.n	800086e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800086a:	f000 f8b7 	bl	80009dc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800086e:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <MX_I2C1_Init+0x74>)
 8000870:	2100      	movs	r1, #0
 8000872:	0018      	movs	r0, r3
 8000874:	f001 faea 	bl	8001e4c <HAL_I2CEx_ConfigAnalogFilter>
 8000878:	1e03      	subs	r3, r0, #0
 800087a:	d001      	beq.n	8000880 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800087c:	f000 f8ae 	bl	80009dc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000880:	4b05      	ldr	r3, [pc, #20]	; (8000898 <MX_I2C1_Init+0x74>)
 8000882:	2100      	movs	r1, #0
 8000884:	0018      	movs	r0, r3
 8000886:	f001 fb2d 	bl	8001ee4 <HAL_I2CEx_ConfigDigitalFilter>
 800088a:	1e03      	subs	r3, r0, #0
 800088c:	d001      	beq.n	8000892 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800088e:	f000 f8a5 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	2000008c 	.word	0x2000008c
 800089c:	40005400 	.word	0x40005400
 80008a0:	2000090e 	.word	0x2000090e

080008a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b089      	sub	sp, #36	; 0x24
 80008a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008aa:	240c      	movs	r4, #12
 80008ac:	193b      	adds	r3, r7, r4
 80008ae:	0018      	movs	r0, r3
 80008b0:	2314      	movs	r3, #20
 80008b2:	001a      	movs	r2, r3
 80008b4:	2100      	movs	r1, #0
 80008b6:	f002 f897 	bl	80029e8 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ba:	4b45      	ldr	r3, [pc, #276]	; (80009d0 <MX_GPIO_Init+0x12c>)
 80008bc:	695a      	ldr	r2, [r3, #20]
 80008be:	4b44      	ldr	r3, [pc, #272]	; (80009d0 <MX_GPIO_Init+0x12c>)
 80008c0:	2180      	movs	r1, #128	; 0x80
 80008c2:	03c9      	lsls	r1, r1, #15
 80008c4:	430a      	orrs	r2, r1
 80008c6:	615a      	str	r2, [r3, #20]
 80008c8:	4b41      	ldr	r3, [pc, #260]	; (80009d0 <MX_GPIO_Init+0x12c>)
 80008ca:	695a      	ldr	r2, [r3, #20]
 80008cc:	2380      	movs	r3, #128	; 0x80
 80008ce:	03db      	lsls	r3, r3, #15
 80008d0:	4013      	ands	r3, r2
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	4b3e      	ldr	r3, [pc, #248]	; (80009d0 <MX_GPIO_Init+0x12c>)
 80008d8:	695a      	ldr	r2, [r3, #20]
 80008da:	4b3d      	ldr	r3, [pc, #244]	; (80009d0 <MX_GPIO_Init+0x12c>)
 80008dc:	2180      	movs	r1, #128	; 0x80
 80008de:	0289      	lsls	r1, r1, #10
 80008e0:	430a      	orrs	r2, r1
 80008e2:	615a      	str	r2, [r3, #20]
 80008e4:	4b3a      	ldr	r3, [pc, #232]	; (80009d0 <MX_GPIO_Init+0x12c>)
 80008e6:	695a      	ldr	r2, [r3, #20]
 80008e8:	2380      	movs	r3, #128	; 0x80
 80008ea:	029b      	lsls	r3, r3, #10
 80008ec:	4013      	ands	r3, r2
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f2:	4b37      	ldr	r3, [pc, #220]	; (80009d0 <MX_GPIO_Init+0x12c>)
 80008f4:	695a      	ldr	r2, [r3, #20]
 80008f6:	4b36      	ldr	r3, [pc, #216]	; (80009d0 <MX_GPIO_Init+0x12c>)
 80008f8:	2180      	movs	r1, #128	; 0x80
 80008fa:	02c9      	lsls	r1, r1, #11
 80008fc:	430a      	orrs	r2, r1
 80008fe:	615a      	str	r2, [r3, #20]
 8000900:	4b33      	ldr	r3, [pc, #204]	; (80009d0 <MX_GPIO_Init+0x12c>)
 8000902:	695a      	ldr	r2, [r3, #20]
 8000904:	2380      	movs	r3, #128	; 0x80
 8000906:	02db      	lsls	r3, r3, #11
 8000908:	4013      	ands	r3, r2
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, RED1_Pin|YEL3_Pin, GPIO_PIN_RESET);
 800090e:	4b31      	ldr	r3, [pc, #196]	; (80009d4 <MX_GPIO_Init+0x130>)
 8000910:	2200      	movs	r2, #0
 8000912:	2103      	movs	r1, #3
 8000914:	0018      	movs	r0, r3
 8000916:	f000 fc89 	bl	800122c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, YEL2_Pin|YEL1_Pin|GRN3_Pin|GRN2_Pin
 800091a:	2390      	movs	r3, #144	; 0x90
 800091c:	05db      	lsls	r3, r3, #23
 800091e:	2200      	movs	r2, #0
 8000920:	219f      	movs	r1, #159	; 0x9f
 8000922:	0018      	movs	r0, r3
 8000924:	f000 fc82 	bl	800122c <HAL_GPIO_WritePin>
                          |GRN1_Pin|RED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED2_GPIO_Port, RED2_Pin, GPIO_PIN_RESET);
 8000928:	4b2b      	ldr	r3, [pc, #172]	; (80009d8 <MX_GPIO_Init+0x134>)
 800092a:	2200      	movs	r2, #0
 800092c:	2102      	movs	r1, #2
 800092e:	0018      	movs	r0, r3
 8000930:	f000 fc7c 	bl	800122c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RED1_Pin YEL3_Pin */
  GPIO_InitStruct.Pin = RED1_Pin|YEL3_Pin;
 8000934:	193b      	adds	r3, r7, r4
 8000936:	2203      	movs	r2, #3
 8000938:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093a:	193b      	adds	r3, r7, r4
 800093c:	2201      	movs	r2, #1
 800093e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	193b      	adds	r3, r7, r4
 8000942:	2200      	movs	r2, #0
 8000944:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000946:	193b      	adds	r3, r7, r4
 8000948:	2200      	movs	r2, #0
 800094a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800094c:	193b      	adds	r3, r7, r4
 800094e:	4a21      	ldr	r2, [pc, #132]	; (80009d4 <MX_GPIO_Init+0x130>)
 8000950:	0019      	movs	r1, r3
 8000952:	0010      	movs	r0, r2
 8000954:	f000 fafa 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : YEL2_Pin YEL1_Pin GRN3_Pin GRN2_Pin
                           GRN1_Pin RED3_Pin */
  GPIO_InitStruct.Pin = YEL2_Pin|YEL1_Pin|GRN3_Pin|GRN2_Pin
 8000958:	193b      	adds	r3, r7, r4
 800095a:	229f      	movs	r2, #159	; 0x9f
 800095c:	601a      	str	r2, [r3, #0]
                          |GRN1_Pin|RED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095e:	193b      	adds	r3, r7, r4
 8000960:	2201      	movs	r2, #1
 8000962:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	193b      	adds	r3, r7, r4
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	193b      	adds	r3, r7, r4
 800096c:	2200      	movs	r2, #0
 800096e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000970:	193a      	adds	r2, r7, r4
 8000972:	2390      	movs	r3, #144	; 0x90
 8000974:	05db      	lsls	r3, r3, #23
 8000976:	0011      	movs	r1, r2
 8000978:	0018      	movs	r0, r3
 800097a:	f000 fae7 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INT1_Pin IMU_INT2_Pin */
  GPIO_InitStruct.Pin = IMU_INT1_Pin|IMU_INT2_Pin;
 800097e:	193b      	adds	r3, r7, r4
 8000980:	2260      	movs	r2, #96	; 0x60
 8000982:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000984:	193b      	adds	r3, r7, r4
 8000986:	2288      	movs	r2, #136	; 0x88
 8000988:	0352      	lsls	r2, r2, #13
 800098a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	193b      	adds	r3, r7, r4
 800098e:	2200      	movs	r2, #0
 8000990:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000992:	193a      	adds	r2, r7, r4
 8000994:	2390      	movs	r3, #144	; 0x90
 8000996:	05db      	lsls	r3, r3, #23
 8000998:	0011      	movs	r1, r2
 800099a:	0018      	movs	r0, r3
 800099c:	f000 fad6 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : RED2_Pin */
  GPIO_InitStruct.Pin = RED2_Pin;
 80009a0:	0021      	movs	r1, r4
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	2202      	movs	r2, #2
 80009a6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	2201      	movs	r2, #1
 80009ac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	187b      	adds	r3, r7, r1
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(RED2_GPIO_Port, &GPIO_InitStruct);
 80009ba:	187b      	adds	r3, r7, r1
 80009bc:	4a06      	ldr	r2, [pc, #24]	; (80009d8 <MX_GPIO_Init+0x134>)
 80009be:	0019      	movs	r1, r3
 80009c0:	0010      	movs	r0, r2
 80009c2:	f000 fac3 	bl	8000f4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	46bd      	mov	sp, r7
 80009ca:	b009      	add	sp, #36	; 0x24
 80009cc:	bd90      	pop	{r4, r7, pc}
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	40021000 	.word	0x40021000
 80009d4:	48001400 	.word	0x48001400
 80009d8:	48000400 	.word	0x48000400

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <Error_Handler+0x8>
	...

080009e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ee:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <HAL_MspInit+0x44>)
 80009f0:	699a      	ldr	r2, [r3, #24]
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <HAL_MspInit+0x44>)
 80009f4:	2101      	movs	r1, #1
 80009f6:	430a      	orrs	r2, r1
 80009f8:	619a      	str	r2, [r3, #24]
 80009fa:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <HAL_MspInit+0x44>)
 80009fc:	699b      	ldr	r3, [r3, #24]
 80009fe:	2201      	movs	r2, #1
 8000a00:	4013      	ands	r3, r2
 8000a02:	607b      	str	r3, [r7, #4]
 8000a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a06:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <HAL_MspInit+0x44>)
 8000a08:	69da      	ldr	r2, [r3, #28]
 8000a0a:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <HAL_MspInit+0x44>)
 8000a0c:	2180      	movs	r1, #128	; 0x80
 8000a0e:	0549      	lsls	r1, r1, #21
 8000a10:	430a      	orrs	r2, r1
 8000a12:	61da      	str	r2, [r3, #28]
 8000a14:	4b05      	ldr	r3, [pc, #20]	; (8000a2c <HAL_MspInit+0x44>)
 8000a16:	69da      	ldr	r2, [r3, #28]
 8000a18:	2380      	movs	r3, #128	; 0x80
 8000a1a:	055b      	lsls	r3, r3, #21
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	603b      	str	r3, [r7, #0]
 8000a20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	46bd      	mov	sp, r7
 8000a26:	b002      	add	sp, #8
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	40021000 	.word	0x40021000

08000a30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a30:	b590      	push	{r4, r7, lr}
 8000a32:	b08b      	sub	sp, #44	; 0x2c
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	2414      	movs	r4, #20
 8000a3a:	193b      	adds	r3, r7, r4
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	2314      	movs	r3, #20
 8000a40:	001a      	movs	r2, r3
 8000a42:	2100      	movs	r1, #0
 8000a44:	f001 ffd0 	bl	80029e8 <memset>
  if(hi2c->Instance==I2C1)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a1d      	ldr	r2, [pc, #116]	; (8000ac4 <HAL_I2C_MspInit+0x94>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d133      	bne.n	8000aba <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	4b1d      	ldr	r3, [pc, #116]	; (8000ac8 <HAL_I2C_MspInit+0x98>)
 8000a54:	695a      	ldr	r2, [r3, #20]
 8000a56:	4b1c      	ldr	r3, [pc, #112]	; (8000ac8 <HAL_I2C_MspInit+0x98>)
 8000a58:	2180      	movs	r1, #128	; 0x80
 8000a5a:	0289      	lsls	r1, r1, #10
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	615a      	str	r2, [r3, #20]
 8000a60:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <HAL_I2C_MspInit+0x98>)
 8000a62:	695a      	ldr	r2, [r3, #20]
 8000a64:	2380      	movs	r3, #128	; 0x80
 8000a66:	029b      	lsls	r3, r3, #10
 8000a68:	4013      	ands	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000a6e:	193b      	adds	r3, r7, r4
 8000a70:	22c0      	movs	r2, #192	; 0xc0
 8000a72:	00d2      	lsls	r2, r2, #3
 8000a74:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a76:	0021      	movs	r1, r4
 8000a78:	187b      	adds	r3, r7, r1
 8000a7a:	2212      	movs	r2, #18
 8000a7c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a7e:	187b      	adds	r3, r7, r1
 8000a80:	2201      	movs	r2, #1
 8000a82:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a84:	187b      	adds	r3, r7, r1
 8000a86:	2203      	movs	r2, #3
 8000a88:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a8a:	187b      	adds	r3, r7, r1
 8000a8c:	2204      	movs	r2, #4
 8000a8e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a90:	187a      	adds	r2, r7, r1
 8000a92:	2390      	movs	r3, #144	; 0x90
 8000a94:	05db      	lsls	r3, r3, #23
 8000a96:	0011      	movs	r1, r2
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f000 fa57 	bl	8000f4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a9e:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <HAL_I2C_MspInit+0x98>)
 8000aa0:	69da      	ldr	r2, [r3, #28]
 8000aa2:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <HAL_I2C_MspInit+0x98>)
 8000aa4:	2180      	movs	r1, #128	; 0x80
 8000aa6:	0389      	lsls	r1, r1, #14
 8000aa8:	430a      	orrs	r2, r1
 8000aaa:	61da      	str	r2, [r3, #28]
 8000aac:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <HAL_I2C_MspInit+0x98>)
 8000aae:	69da      	ldr	r2, [r3, #28]
 8000ab0:	2380      	movs	r3, #128	; 0x80
 8000ab2:	039b      	lsls	r3, r3, #14
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60fb      	str	r3, [r7, #12]
 8000ab8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	46bd      	mov	sp, r7
 8000abe:	b00b      	add	sp, #44	; 0x2c
 8000ac0:	bd90      	pop	{r4, r7, pc}
 8000ac2:	46c0      	nop			; (mov r8, r8)
 8000ac4:	40005400 	.word	0x40005400
 8000ac8:	40021000 	.word	0x40021000

08000acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <NMI_Handler+0x4>

08000ad2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad2:	b580      	push	{r7, lr}
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <HardFault_Handler+0x4>

08000ad8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000adc:	46c0      	nop			; (mov r8, r8)
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae6:	46c0      	nop			; (mov r8, r8)
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af0:	f000 f938 	bl	8000d64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af4:	46c0      	nop			; (mov r8, r8)
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000afa:	b580      	push	{r7, lr}
 8000afc:	af00      	add	r7, sp, #0
  return 1;
 8000afe:	2301      	movs	r3, #1
}
 8000b00:	0018      	movs	r0, r3
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <_kill>:

int _kill(int pid, int sig)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b082      	sub	sp, #8
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
 8000b0e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000b10:	f001 ff40 	bl	8002994 <__errno>
 8000b14:	0003      	movs	r3, r0
 8000b16:	2216      	movs	r2, #22
 8000b18:	601a      	str	r2, [r3, #0]
  return -1;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	425b      	negs	r3, r3
}
 8000b1e:	0018      	movs	r0, r3
 8000b20:	46bd      	mov	sp, r7
 8000b22:	b002      	add	sp, #8
 8000b24:	bd80      	pop	{r7, pc}

08000b26 <_exit>:

void _exit (int status)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b082      	sub	sp, #8
 8000b2a:	af00      	add	r7, sp, #0
 8000b2c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000b2e:	2301      	movs	r3, #1
 8000b30:	425a      	negs	r2, r3
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	0011      	movs	r1, r2
 8000b36:	0018      	movs	r0, r3
 8000b38:	f7ff ffe5 	bl	8000b06 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000b3c:	e7fe      	b.n	8000b3c <_exit+0x16>

08000b3e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b086      	sub	sp, #24
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	60f8      	str	r0, [r7, #12]
 8000b46:	60b9      	str	r1, [r7, #8]
 8000b48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	617b      	str	r3, [r7, #20]
 8000b4e:	e00a      	b.n	8000b66 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b50:	e000      	b.n	8000b54 <_read+0x16>
 8000b52:	bf00      	nop
 8000b54:	0001      	movs	r1, r0
 8000b56:	68bb      	ldr	r3, [r7, #8]
 8000b58:	1c5a      	adds	r2, r3, #1
 8000b5a:	60ba      	str	r2, [r7, #8]
 8000b5c:	b2ca      	uxtb	r2, r1
 8000b5e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	3301      	adds	r3, #1
 8000b64:	617b      	str	r3, [r7, #20]
 8000b66:	697a      	ldr	r2, [r7, #20]
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	429a      	cmp	r2, r3
 8000b6c:	dbf0      	blt.n	8000b50 <_read+0x12>
  }

  return len;
 8000b6e:	687b      	ldr	r3, [r7, #4]
}
 8000b70:	0018      	movs	r0, r3
 8000b72:	46bd      	mov	sp, r7
 8000b74:	b006      	add	sp, #24
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	e009      	b.n	8000b9e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	1c5a      	adds	r2, r3, #1
 8000b8e:	60ba      	str	r2, [r7, #8]
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	0018      	movs	r0, r3
 8000b94:	e000      	b.n	8000b98 <_write+0x20>
 8000b96:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	617b      	str	r3, [r7, #20]
 8000b9e:	697a      	ldr	r2, [r7, #20]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	dbf1      	blt.n	8000b8a <_write+0x12>
  }
  return len;
 8000ba6:	687b      	ldr	r3, [r7, #4]
}
 8000ba8:	0018      	movs	r0, r3
 8000baa:	46bd      	mov	sp, r7
 8000bac:	b006      	add	sp, #24
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <_close>:

int _close(int file)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	425b      	negs	r3, r3
}
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	b002      	add	sp, #8
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	2280      	movs	r2, #128	; 0x80
 8000bd2:	0192      	lsls	r2, r2, #6
 8000bd4:	605a      	str	r2, [r3, #4]
  return 0;
 8000bd6:	2300      	movs	r3, #0
}
 8000bd8:	0018      	movs	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	b002      	add	sp, #8
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <_isatty>:

int _isatty(int file)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000be8:	2301      	movs	r3, #1
}
 8000bea:	0018      	movs	r0, r3
 8000bec:	46bd      	mov	sp, r7
 8000bee:	b002      	add	sp, #8
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b084      	sub	sp, #16
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	60f8      	str	r0, [r7, #12]
 8000bfa:	60b9      	str	r1, [r7, #8]
 8000bfc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bfe:	2300      	movs	r3, #0
}
 8000c00:	0018      	movs	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	b004      	add	sp, #16
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b086      	sub	sp, #24
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c10:	4a14      	ldr	r2, [pc, #80]	; (8000c64 <_sbrk+0x5c>)
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <_sbrk+0x60>)
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c1c:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <_sbrk+0x64>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d102      	bne.n	8000c2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <_sbrk+0x64>)
 8000c26:	4a12      	ldr	r2, [pc, #72]	; (8000c70 <_sbrk+0x68>)
 8000c28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <_sbrk+0x64>)
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	18d3      	adds	r3, r2, r3
 8000c32:	693a      	ldr	r2, [r7, #16]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d207      	bcs.n	8000c48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c38:	f001 feac 	bl	8002994 <__errno>
 8000c3c:	0003      	movs	r3, r0
 8000c3e:	220c      	movs	r2, #12
 8000c40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c42:	2301      	movs	r3, #1
 8000c44:	425b      	negs	r3, r3
 8000c46:	e009      	b.n	8000c5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <_sbrk+0x64>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c4e:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <_sbrk+0x64>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	18d2      	adds	r2, r2, r3
 8000c56:	4b05      	ldr	r3, [pc, #20]	; (8000c6c <_sbrk+0x64>)
 8000c58:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
}
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	b006      	add	sp, #24
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20001000 	.word	0x20001000
 8000c68:	00000400 	.word	0x00000400
 8000c6c:	200000e0 	.word	0x200000e0
 8000c70:	200000f8 	.word	0x200000f8

08000c74 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000c78:	46c0      	nop			; (mov r8, r8)
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
	...

08000c80 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c80:	480d      	ldr	r0, [pc, #52]	; (8000cb8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c82:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c84:	f7ff fff6 	bl	8000c74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c88:	480c      	ldr	r0, [pc, #48]	; (8000cbc <LoopForever+0x6>)
  ldr r1, =_edata
 8000c8a:	490d      	ldr	r1, [pc, #52]	; (8000cc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c8c:	4a0d      	ldr	r2, [pc, #52]	; (8000cc4 <LoopForever+0xe>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c90:	e002      	b.n	8000c98 <LoopCopyDataInit>

08000c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c96:	3304      	adds	r3, #4

08000c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c9c:	d3f9      	bcc.n	8000c92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ca0:	4c0a      	ldr	r4, [pc, #40]	; (8000ccc <LoopForever+0x16>)
  movs r3, #0
 8000ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ca4:	e001      	b.n	8000caa <LoopFillZerobss>

08000ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ca8:	3204      	adds	r2, #4

08000caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cac:	d3fb      	bcc.n	8000ca6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cae:	f001 fe77 	bl	80029a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cb2:	f7ff fd31 	bl	8000718 <main>

08000cb6 <LoopForever>:

LoopForever:
    b LoopForever
 8000cb6:	e7fe      	b.n	8000cb6 <LoopForever>
  ldr   r0, =_estack
 8000cb8:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cc0:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cc4:	08003cc4 	.word	0x08003cc4
  ldr r2, =_sbss
 8000cc8:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000ccc:	200000f8 	.word	0x200000f8

08000cd0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cd0:	e7fe      	b.n	8000cd0 <ADC1_IRQHandler>
	...

08000cd4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd8:	4b07      	ldr	r3, [pc, #28]	; (8000cf8 <HAL_Init+0x24>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <HAL_Init+0x24>)
 8000cde:	2110      	movs	r1, #16
 8000ce0:	430a      	orrs	r2, r1
 8000ce2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000ce4:	2003      	movs	r0, #3
 8000ce6:	f000 f809 	bl	8000cfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cea:	f7ff fe7d 	bl	80009e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cee:	2300      	movs	r3, #0
}
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	46c0      	nop			; (mov r8, r8)
 8000cf8:	40022000 	.word	0x40022000

08000cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cfc:	b590      	push	{r4, r7, lr}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d04:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <HAL_InitTick+0x5c>)
 8000d06:	681c      	ldr	r4, [r3, #0]
 8000d08:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <HAL_InitTick+0x60>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	0019      	movs	r1, r3
 8000d0e:	23fa      	movs	r3, #250	; 0xfa
 8000d10:	0098      	lsls	r0, r3, #2
 8000d12:	f7ff fa03 	bl	800011c <__udivsi3>
 8000d16:	0003      	movs	r3, r0
 8000d18:	0019      	movs	r1, r3
 8000d1a:	0020      	movs	r0, r4
 8000d1c:	f7ff f9fe 	bl	800011c <__udivsi3>
 8000d20:	0003      	movs	r3, r0
 8000d22:	0018      	movs	r0, r3
 8000d24:	f000 f905 	bl	8000f32 <HAL_SYSTICK_Config>
 8000d28:	1e03      	subs	r3, r0, #0
 8000d2a:	d001      	beq.n	8000d30 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	e00f      	b.n	8000d50 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2b03      	cmp	r3, #3
 8000d34:	d80b      	bhi.n	8000d4e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d36:	6879      	ldr	r1, [r7, #4]
 8000d38:	2301      	movs	r3, #1
 8000d3a:	425b      	negs	r3, r3
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f000 f8e2 	bl	8000f08 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d44:	4b06      	ldr	r3, [pc, #24]	; (8000d60 <HAL_InitTick+0x64>)
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	e000      	b.n	8000d50 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
}
 8000d50:	0018      	movs	r0, r3
 8000d52:	46bd      	mov	sp, r7
 8000d54:	b003      	add	sp, #12
 8000d56:	bd90      	pop	{r4, r7, pc}
 8000d58:	20000000 	.word	0x20000000
 8000d5c:	20000008 	.word	0x20000008
 8000d60:	20000004 	.word	0x20000004

08000d64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d68:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <HAL_IncTick+0x1c>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	001a      	movs	r2, r3
 8000d6e:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <HAL_IncTick+0x20>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	18d2      	adds	r2, r2, r3
 8000d74:	4b03      	ldr	r3, [pc, #12]	; (8000d84 <HAL_IncTick+0x20>)
 8000d76:	601a      	str	r2, [r3, #0]
}
 8000d78:	46c0      	nop			; (mov r8, r8)
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	20000008 	.word	0x20000008
 8000d84:	200000e4 	.word	0x200000e4

08000d88 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d8c:	4b02      	ldr	r3, [pc, #8]	; (8000d98 <HAL_GetTick+0x10>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
}
 8000d90:	0018      	movs	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	46c0      	nop			; (mov r8, r8)
 8000d98:	200000e4 	.word	0x200000e4

08000d9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000da4:	f7ff fff0 	bl	8000d88 <HAL_GetTick>
 8000da8:	0003      	movs	r3, r0
 8000daa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	3301      	adds	r3, #1
 8000db4:	d005      	beq.n	8000dc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000db6:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <HAL_Delay+0x44>)
 8000db8:	781b      	ldrb	r3, [r3, #0]
 8000dba:	001a      	movs	r2, r3
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	189b      	adds	r3, r3, r2
 8000dc0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	f7ff ffe0 	bl	8000d88 <HAL_GetTick>
 8000dc8:	0002      	movs	r2, r0
 8000dca:	68bb      	ldr	r3, [r7, #8]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	d8f7      	bhi.n	8000dc4 <HAL_Delay+0x28>
  {
  }
}
 8000dd4:	46c0      	nop			; (mov r8, r8)
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	b004      	add	sp, #16
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	46c0      	nop			; (mov r8, r8)
 8000de0:	20000008 	.word	0x20000008

08000de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de4:	b590      	push	{r4, r7, lr}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	0002      	movs	r2, r0
 8000dec:	6039      	str	r1, [r7, #0]
 8000dee:	1dfb      	adds	r3, r7, #7
 8000df0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000df2:	1dfb      	adds	r3, r7, #7
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	2b7f      	cmp	r3, #127	; 0x7f
 8000df8:	d828      	bhi.n	8000e4c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dfa:	4a2f      	ldr	r2, [pc, #188]	; (8000eb8 <__NVIC_SetPriority+0xd4>)
 8000dfc:	1dfb      	adds	r3, r7, #7
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	b25b      	sxtb	r3, r3
 8000e02:	089b      	lsrs	r3, r3, #2
 8000e04:	33c0      	adds	r3, #192	; 0xc0
 8000e06:	009b      	lsls	r3, r3, #2
 8000e08:	589b      	ldr	r3, [r3, r2]
 8000e0a:	1dfa      	adds	r2, r7, #7
 8000e0c:	7812      	ldrb	r2, [r2, #0]
 8000e0e:	0011      	movs	r1, r2
 8000e10:	2203      	movs	r2, #3
 8000e12:	400a      	ands	r2, r1
 8000e14:	00d2      	lsls	r2, r2, #3
 8000e16:	21ff      	movs	r1, #255	; 0xff
 8000e18:	4091      	lsls	r1, r2
 8000e1a:	000a      	movs	r2, r1
 8000e1c:	43d2      	mvns	r2, r2
 8000e1e:	401a      	ands	r2, r3
 8000e20:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	019b      	lsls	r3, r3, #6
 8000e26:	22ff      	movs	r2, #255	; 0xff
 8000e28:	401a      	ands	r2, r3
 8000e2a:	1dfb      	adds	r3, r7, #7
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	0018      	movs	r0, r3
 8000e30:	2303      	movs	r3, #3
 8000e32:	4003      	ands	r3, r0
 8000e34:	00db      	lsls	r3, r3, #3
 8000e36:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e38:	481f      	ldr	r0, [pc, #124]	; (8000eb8 <__NVIC_SetPriority+0xd4>)
 8000e3a:	1dfb      	adds	r3, r7, #7
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	b25b      	sxtb	r3, r3
 8000e40:	089b      	lsrs	r3, r3, #2
 8000e42:	430a      	orrs	r2, r1
 8000e44:	33c0      	adds	r3, #192	; 0xc0
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e4a:	e031      	b.n	8000eb0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e4c:	4a1b      	ldr	r2, [pc, #108]	; (8000ebc <__NVIC_SetPriority+0xd8>)
 8000e4e:	1dfb      	adds	r3, r7, #7
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	0019      	movs	r1, r3
 8000e54:	230f      	movs	r3, #15
 8000e56:	400b      	ands	r3, r1
 8000e58:	3b08      	subs	r3, #8
 8000e5a:	089b      	lsrs	r3, r3, #2
 8000e5c:	3306      	adds	r3, #6
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	18d3      	adds	r3, r2, r3
 8000e62:	3304      	adds	r3, #4
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	1dfa      	adds	r2, r7, #7
 8000e68:	7812      	ldrb	r2, [r2, #0]
 8000e6a:	0011      	movs	r1, r2
 8000e6c:	2203      	movs	r2, #3
 8000e6e:	400a      	ands	r2, r1
 8000e70:	00d2      	lsls	r2, r2, #3
 8000e72:	21ff      	movs	r1, #255	; 0xff
 8000e74:	4091      	lsls	r1, r2
 8000e76:	000a      	movs	r2, r1
 8000e78:	43d2      	mvns	r2, r2
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	019b      	lsls	r3, r3, #6
 8000e82:	22ff      	movs	r2, #255	; 0xff
 8000e84:	401a      	ands	r2, r3
 8000e86:	1dfb      	adds	r3, r7, #7
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	4003      	ands	r3, r0
 8000e90:	00db      	lsls	r3, r3, #3
 8000e92:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e94:	4809      	ldr	r0, [pc, #36]	; (8000ebc <__NVIC_SetPriority+0xd8>)
 8000e96:	1dfb      	adds	r3, r7, #7
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	001c      	movs	r4, r3
 8000e9c:	230f      	movs	r3, #15
 8000e9e:	4023      	ands	r3, r4
 8000ea0:	3b08      	subs	r3, #8
 8000ea2:	089b      	lsrs	r3, r3, #2
 8000ea4:	430a      	orrs	r2, r1
 8000ea6:	3306      	adds	r3, #6
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	18c3      	adds	r3, r0, r3
 8000eac:	3304      	adds	r3, #4
 8000eae:	601a      	str	r2, [r3, #0]
}
 8000eb0:	46c0      	nop			; (mov r8, r8)
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	b003      	add	sp, #12
 8000eb6:	bd90      	pop	{r4, r7, pc}
 8000eb8:	e000e100 	.word	0xe000e100
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	1e5a      	subs	r2, r3, #1
 8000ecc:	2380      	movs	r3, #128	; 0x80
 8000ece:	045b      	lsls	r3, r3, #17
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d301      	bcc.n	8000ed8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ed4:	2301      	movs	r3, #1
 8000ed6:	e010      	b.n	8000efa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ed8:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <SysTick_Config+0x44>)
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	3a01      	subs	r2, #1
 8000ede:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	425b      	negs	r3, r3
 8000ee4:	2103      	movs	r1, #3
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	f7ff ff7c 	bl	8000de4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eec:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <SysTick_Config+0x44>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ef2:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <SysTick_Config+0x44>)
 8000ef4:	2207      	movs	r2, #7
 8000ef6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	0018      	movs	r0, r3
 8000efc:	46bd      	mov	sp, r7
 8000efe:	b002      	add	sp, #8
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	e000e010 	.word	0xe000e010

08000f08 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60b9      	str	r1, [r7, #8]
 8000f10:	607a      	str	r2, [r7, #4]
 8000f12:	210f      	movs	r1, #15
 8000f14:	187b      	adds	r3, r7, r1
 8000f16:	1c02      	adds	r2, r0, #0
 8000f18:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f1a:	68ba      	ldr	r2, [r7, #8]
 8000f1c:	187b      	adds	r3, r7, r1
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	b25b      	sxtb	r3, r3
 8000f22:	0011      	movs	r1, r2
 8000f24:	0018      	movs	r0, r3
 8000f26:	f7ff ff5d 	bl	8000de4 <__NVIC_SetPriority>
}
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	b004      	add	sp, #16
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b082      	sub	sp, #8
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	f7ff ffbf 	bl	8000ec0 <SysTick_Config>
 8000f42:	0003      	movs	r3, r0
}
 8000f44:	0018      	movs	r0, r3
 8000f46:	46bd      	mov	sp, r7
 8000f48:	b002      	add	sp, #8
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f5a:	e14f      	b.n	80011fc <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2101      	movs	r1, #1
 8000f62:	697a      	ldr	r2, [r7, #20]
 8000f64:	4091      	lsls	r1, r2
 8000f66:	000a      	movs	r2, r1
 8000f68:	4013      	ands	r3, r2
 8000f6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d100      	bne.n	8000f74 <HAL_GPIO_Init+0x28>
 8000f72:	e140      	b.n	80011f6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	2203      	movs	r2, #3
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d005      	beq.n	8000f8c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	2203      	movs	r2, #3
 8000f86:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d130      	bne.n	8000fee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	2203      	movs	r2, #3
 8000f98:	409a      	lsls	r2, r3
 8000f9a:	0013      	movs	r3, r2
 8000f9c:	43da      	mvns	r2, r3
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	68da      	ldr	r2, [r3, #12]
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	409a      	lsls	r2, r3
 8000fae:	0013      	movs	r3, r2
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	409a      	lsls	r2, r3
 8000fc8:	0013      	movs	r3, r2
 8000fca:	43da      	mvns	r2, r3
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	091b      	lsrs	r3, r3, #4
 8000fd8:	2201      	movs	r2, #1
 8000fda:	401a      	ands	r2, r3
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	409a      	lsls	r2, r3
 8000fe0:	0013      	movs	r3, r2
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	2203      	movs	r2, #3
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	2b03      	cmp	r3, #3
 8000ff8:	d017      	beq.n	800102a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	68db      	ldr	r3, [r3, #12]
 8000ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	2203      	movs	r2, #3
 8001006:	409a      	lsls	r2, r3
 8001008:	0013      	movs	r3, r2
 800100a:	43da      	mvns	r2, r3
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	4013      	ands	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	689a      	ldr	r2, [r3, #8]
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	409a      	lsls	r2, r3
 800101c:	0013      	movs	r3, r2
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	4313      	orrs	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	2203      	movs	r2, #3
 8001030:	4013      	ands	r3, r2
 8001032:	2b02      	cmp	r3, #2
 8001034:	d123      	bne.n	800107e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	08da      	lsrs	r2, r3, #3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3208      	adds	r2, #8
 800103e:	0092      	lsls	r2, r2, #2
 8001040:	58d3      	ldr	r3, [r2, r3]
 8001042:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	2207      	movs	r2, #7
 8001048:	4013      	ands	r3, r2
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	220f      	movs	r2, #15
 800104e:	409a      	lsls	r2, r3
 8001050:	0013      	movs	r3, r2
 8001052:	43da      	mvns	r2, r3
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	4013      	ands	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	691a      	ldr	r2, [r3, #16]
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	2107      	movs	r1, #7
 8001062:	400b      	ands	r3, r1
 8001064:	009b      	lsls	r3, r3, #2
 8001066:	409a      	lsls	r2, r3
 8001068:	0013      	movs	r3, r2
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	4313      	orrs	r3, r2
 800106e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	08da      	lsrs	r2, r3, #3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	3208      	adds	r2, #8
 8001078:	0092      	lsls	r2, r2, #2
 800107a:	6939      	ldr	r1, [r7, #16]
 800107c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	005b      	lsls	r3, r3, #1
 8001088:	2203      	movs	r2, #3
 800108a:	409a      	lsls	r2, r3
 800108c:	0013      	movs	r3, r2
 800108e:	43da      	mvns	r2, r3
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	4013      	ands	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	2203      	movs	r2, #3
 800109c:	401a      	ands	r2, r3
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	005b      	lsls	r3, r3, #1
 80010a2:	409a      	lsls	r2, r3
 80010a4:	0013      	movs	r3, r2
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	693a      	ldr	r2, [r7, #16]
 80010b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685a      	ldr	r2, [r3, #4]
 80010b6:	23c0      	movs	r3, #192	; 0xc0
 80010b8:	029b      	lsls	r3, r3, #10
 80010ba:	4013      	ands	r3, r2
 80010bc:	d100      	bne.n	80010c0 <HAL_GPIO_Init+0x174>
 80010be:	e09a      	b.n	80011f6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010c0:	4b54      	ldr	r3, [pc, #336]	; (8001214 <HAL_GPIO_Init+0x2c8>)
 80010c2:	699a      	ldr	r2, [r3, #24]
 80010c4:	4b53      	ldr	r3, [pc, #332]	; (8001214 <HAL_GPIO_Init+0x2c8>)
 80010c6:	2101      	movs	r1, #1
 80010c8:	430a      	orrs	r2, r1
 80010ca:	619a      	str	r2, [r3, #24]
 80010cc:	4b51      	ldr	r3, [pc, #324]	; (8001214 <HAL_GPIO_Init+0x2c8>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	2201      	movs	r2, #1
 80010d2:	4013      	ands	r3, r2
 80010d4:	60bb      	str	r3, [r7, #8]
 80010d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010d8:	4a4f      	ldr	r2, [pc, #316]	; (8001218 <HAL_GPIO_Init+0x2cc>)
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	089b      	lsrs	r3, r3, #2
 80010de:	3302      	adds	r3, #2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	589b      	ldr	r3, [r3, r2]
 80010e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	2203      	movs	r2, #3
 80010ea:	4013      	ands	r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	220f      	movs	r2, #15
 80010f0:	409a      	lsls	r2, r3
 80010f2:	0013      	movs	r3, r2
 80010f4:	43da      	mvns	r2, r3
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	4013      	ands	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	2390      	movs	r3, #144	; 0x90
 8001100:	05db      	lsls	r3, r3, #23
 8001102:	429a      	cmp	r2, r3
 8001104:	d013      	beq.n	800112e <HAL_GPIO_Init+0x1e2>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a44      	ldr	r2, [pc, #272]	; (800121c <HAL_GPIO_Init+0x2d0>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d00d      	beq.n	800112a <HAL_GPIO_Init+0x1de>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a43      	ldr	r2, [pc, #268]	; (8001220 <HAL_GPIO_Init+0x2d4>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d007      	beq.n	8001126 <HAL_GPIO_Init+0x1da>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a42      	ldr	r2, [pc, #264]	; (8001224 <HAL_GPIO_Init+0x2d8>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d101      	bne.n	8001122 <HAL_GPIO_Init+0x1d6>
 800111e:	2303      	movs	r3, #3
 8001120:	e006      	b.n	8001130 <HAL_GPIO_Init+0x1e4>
 8001122:	2305      	movs	r3, #5
 8001124:	e004      	b.n	8001130 <HAL_GPIO_Init+0x1e4>
 8001126:	2302      	movs	r3, #2
 8001128:	e002      	b.n	8001130 <HAL_GPIO_Init+0x1e4>
 800112a:	2301      	movs	r3, #1
 800112c:	e000      	b.n	8001130 <HAL_GPIO_Init+0x1e4>
 800112e:	2300      	movs	r3, #0
 8001130:	697a      	ldr	r2, [r7, #20]
 8001132:	2103      	movs	r1, #3
 8001134:	400a      	ands	r2, r1
 8001136:	0092      	lsls	r2, r2, #2
 8001138:	4093      	lsls	r3, r2
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001140:	4935      	ldr	r1, [pc, #212]	; (8001218 <HAL_GPIO_Init+0x2cc>)
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	089b      	lsrs	r3, r3, #2
 8001146:	3302      	adds	r3, #2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800114e:	4b36      	ldr	r3, [pc, #216]	; (8001228 <HAL_GPIO_Init+0x2dc>)
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	43da      	mvns	r2, r3
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	4013      	ands	r3, r2
 800115c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685a      	ldr	r2, [r3, #4]
 8001162:	2380      	movs	r3, #128	; 0x80
 8001164:	035b      	lsls	r3, r3, #13
 8001166:	4013      	ands	r3, r2
 8001168:	d003      	beq.n	8001172 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4313      	orrs	r3, r2
 8001170:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001172:	4b2d      	ldr	r3, [pc, #180]	; (8001228 <HAL_GPIO_Init+0x2dc>)
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001178:	4b2b      	ldr	r3, [pc, #172]	; (8001228 <HAL_GPIO_Init+0x2dc>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	43da      	mvns	r2, r3
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	2380      	movs	r3, #128	; 0x80
 800118e:	039b      	lsls	r3, r3, #14
 8001190:	4013      	ands	r3, r2
 8001192:	d003      	beq.n	800119c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800119c:	4b22      	ldr	r3, [pc, #136]	; (8001228 <HAL_GPIO_Init+0x2dc>)
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 80011a2:	4b21      	ldr	r3, [pc, #132]	; (8001228 <HAL_GPIO_Init+0x2dc>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	43da      	mvns	r2, r3
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	4013      	ands	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685a      	ldr	r2, [r3, #4]
 80011b6:	2380      	movs	r3, #128	; 0x80
 80011b8:	029b      	lsls	r3, r3, #10
 80011ba:	4013      	ands	r3, r2
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011c6:	4b18      	ldr	r3, [pc, #96]	; (8001228 <HAL_GPIO_Init+0x2dc>)
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80011cc:	4b16      	ldr	r3, [pc, #88]	; (8001228 <HAL_GPIO_Init+0x2dc>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	43da      	mvns	r2, r3
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	4013      	ands	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685a      	ldr	r2, [r3, #4]
 80011e0:	2380      	movs	r3, #128	; 0x80
 80011e2:	025b      	lsls	r3, r3, #9
 80011e4:	4013      	ands	r3, r2
 80011e6:	d003      	beq.n	80011f0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80011f0:	4b0d      	ldr	r3, [pc, #52]	; (8001228 <HAL_GPIO_Init+0x2dc>)
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	3301      	adds	r3, #1
 80011fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	40da      	lsrs	r2, r3
 8001204:	1e13      	subs	r3, r2, #0
 8001206:	d000      	beq.n	800120a <HAL_GPIO_Init+0x2be>
 8001208:	e6a8      	b.n	8000f5c <HAL_GPIO_Init+0x10>
  } 
}
 800120a:	46c0      	nop			; (mov r8, r8)
 800120c:	46c0      	nop			; (mov r8, r8)
 800120e:	46bd      	mov	sp, r7
 8001210:	b006      	add	sp, #24
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40021000 	.word	0x40021000
 8001218:	40010000 	.word	0x40010000
 800121c:	48000400 	.word	0x48000400
 8001220:	48000800 	.word	0x48000800
 8001224:	48000c00 	.word	0x48000c00
 8001228:	40010400 	.word	0x40010400

0800122c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	0008      	movs	r0, r1
 8001236:	0011      	movs	r1, r2
 8001238:	1cbb      	adds	r3, r7, #2
 800123a:	1c02      	adds	r2, r0, #0
 800123c:	801a      	strh	r2, [r3, #0]
 800123e:	1c7b      	adds	r3, r7, #1
 8001240:	1c0a      	adds	r2, r1, #0
 8001242:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001244:	1c7b      	adds	r3, r7, #1
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d004      	beq.n	8001256 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800124c:	1cbb      	adds	r3, r7, #2
 800124e:	881a      	ldrh	r2, [r3, #0]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001254:	e003      	b.n	800125e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001256:	1cbb      	adds	r3, r7, #2
 8001258:	881a      	ldrh	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800125e:	46c0      	nop			; (mov r8, r8)
 8001260:	46bd      	mov	sp, r7
 8001262:	b002      	add	sp, #8
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d101      	bne.n	800127a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e082      	b.n	8001380 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2241      	movs	r2, #65	; 0x41
 800127e:	5c9b      	ldrb	r3, [r3, r2]
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b00      	cmp	r3, #0
 8001284:	d107      	bne.n	8001296 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2240      	movs	r2, #64	; 0x40
 800128a:	2100      	movs	r1, #0
 800128c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	0018      	movs	r0, r3
 8001292:	f7ff fbcd 	bl	8000a30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2241      	movs	r2, #65	; 0x41
 800129a:	2124      	movs	r1, #36	; 0x24
 800129c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	2101      	movs	r1, #1
 80012aa:	438a      	bics	r2, r1
 80012ac:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685a      	ldr	r2, [r3, #4]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4934      	ldr	r1, [pc, #208]	; (8001388 <HAL_I2C_Init+0x120>)
 80012b8:	400a      	ands	r2, r1
 80012ba:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	689a      	ldr	r2, [r3, #8]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4931      	ldr	r1, [pc, #196]	; (800138c <HAL_I2C_Init+0x124>)
 80012c8:	400a      	ands	r2, r1
 80012ca:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d108      	bne.n	80012e6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689a      	ldr	r2, [r3, #8]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2180      	movs	r1, #128	; 0x80
 80012de:	0209      	lsls	r1, r1, #8
 80012e0:	430a      	orrs	r2, r1
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	e007      	b.n	80012f6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	689a      	ldr	r2, [r3, #8]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2184      	movs	r1, #132	; 0x84
 80012f0:	0209      	lsls	r1, r1, #8
 80012f2:	430a      	orrs	r2, r1
 80012f4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	68db      	ldr	r3, [r3, #12]
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d104      	bne.n	8001308 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2280      	movs	r2, #128	; 0x80
 8001304:	0112      	lsls	r2, r2, #4
 8001306:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	685a      	ldr	r2, [r3, #4]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	491f      	ldr	r1, [pc, #124]	; (8001390 <HAL_I2C_Init+0x128>)
 8001314:	430a      	orrs	r2, r1
 8001316:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	68da      	ldr	r2, [r3, #12]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	491a      	ldr	r1, [pc, #104]	; (800138c <HAL_I2C_Init+0x124>)
 8001324:	400a      	ands	r2, r1
 8001326:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	691a      	ldr	r2, [r3, #16]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	695b      	ldr	r3, [r3, #20]
 8001330:	431a      	orrs	r2, r3
 8001332:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	430a      	orrs	r2, r1
 8001340:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	69d9      	ldr	r1, [r3, #28]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a1a      	ldr	r2, [r3, #32]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	430a      	orrs	r2, r1
 8001350:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2101      	movs	r1, #1
 800135e:	430a      	orrs	r2, r1
 8001360:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2241      	movs	r2, #65	; 0x41
 800136c:	2120      	movs	r1, #32
 800136e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2242      	movs	r2, #66	; 0x42
 800137a:	2100      	movs	r1, #0
 800137c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800137e:	2300      	movs	r3, #0
}
 8001380:	0018      	movs	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	b002      	add	sp, #8
 8001386:	bd80      	pop	{r7, pc}
 8001388:	f0ffffff 	.word	0xf0ffffff
 800138c:	ffff7fff 	.word	0xffff7fff
 8001390:	02008000 	.word	0x02008000

08001394 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001394:	b590      	push	{r4, r7, lr}
 8001396:	b089      	sub	sp, #36	; 0x24
 8001398:	af02      	add	r7, sp, #8
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	000c      	movs	r4, r1
 800139e:	0010      	movs	r0, r2
 80013a0:	0019      	movs	r1, r3
 80013a2:	230a      	movs	r3, #10
 80013a4:	18fb      	adds	r3, r7, r3
 80013a6:	1c22      	adds	r2, r4, #0
 80013a8:	801a      	strh	r2, [r3, #0]
 80013aa:	2308      	movs	r3, #8
 80013ac:	18fb      	adds	r3, r7, r3
 80013ae:	1c02      	adds	r2, r0, #0
 80013b0:	801a      	strh	r2, [r3, #0]
 80013b2:	1dbb      	adds	r3, r7, #6
 80013b4:	1c0a      	adds	r2, r1, #0
 80013b6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2241      	movs	r2, #65	; 0x41
 80013bc:	5c9b      	ldrb	r3, [r3, r2]
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	2b20      	cmp	r3, #32
 80013c2:	d000      	beq.n	80013c6 <HAL_I2C_Mem_Write+0x32>
 80013c4:	e10c      	b.n	80015e0 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80013c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d004      	beq.n	80013d6 <HAL_I2C_Mem_Write+0x42>
 80013cc:	232c      	movs	r3, #44	; 0x2c
 80013ce:	18fb      	adds	r3, r7, r3
 80013d0:	881b      	ldrh	r3, [r3, #0]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d105      	bne.n	80013e2 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2280      	movs	r2, #128	; 0x80
 80013da:	0092      	lsls	r2, r2, #2
 80013dc:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e0ff      	b.n	80015e2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	2240      	movs	r2, #64	; 0x40
 80013e6:	5c9b      	ldrb	r3, [r3, r2]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d101      	bne.n	80013f0 <HAL_I2C_Mem_Write+0x5c>
 80013ec:	2302      	movs	r3, #2
 80013ee:	e0f8      	b.n	80015e2 <HAL_I2C_Mem_Write+0x24e>
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2240      	movs	r2, #64	; 0x40
 80013f4:	2101      	movs	r1, #1
 80013f6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80013f8:	f7ff fcc6 	bl	8000d88 <HAL_GetTick>
 80013fc:	0003      	movs	r3, r0
 80013fe:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001400:	2380      	movs	r3, #128	; 0x80
 8001402:	0219      	lsls	r1, r3, #8
 8001404:	68f8      	ldr	r0, [r7, #12]
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	2319      	movs	r3, #25
 800140c:	2201      	movs	r2, #1
 800140e:	f000 fb0b 	bl	8001a28 <I2C_WaitOnFlagUntilTimeout>
 8001412:	1e03      	subs	r3, r0, #0
 8001414:	d001      	beq.n	800141a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001416:	2301      	movs	r3, #1
 8001418:	e0e3      	b.n	80015e2 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2241      	movs	r2, #65	; 0x41
 800141e:	2121      	movs	r1, #33	; 0x21
 8001420:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2242      	movs	r2, #66	; 0x42
 8001426:	2140      	movs	r1, #64	; 0x40
 8001428:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	2200      	movs	r2, #0
 800142e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001434:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	222c      	movs	r2, #44	; 0x2c
 800143a:	18ba      	adds	r2, r7, r2
 800143c:	8812      	ldrh	r2, [r2, #0]
 800143e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2200      	movs	r2, #0
 8001444:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001446:	1dbb      	adds	r3, r7, #6
 8001448:	881c      	ldrh	r4, [r3, #0]
 800144a:	2308      	movs	r3, #8
 800144c:	18fb      	adds	r3, r7, r3
 800144e:	881a      	ldrh	r2, [r3, #0]
 8001450:	230a      	movs	r3, #10
 8001452:	18fb      	adds	r3, r7, r3
 8001454:	8819      	ldrh	r1, [r3, #0]
 8001456:	68f8      	ldr	r0, [r7, #12]
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	9301      	str	r3, [sp, #4]
 800145c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	0023      	movs	r3, r4
 8001462:	f000 f9f9 	bl	8001858 <I2C_RequestMemoryWrite>
 8001466:	1e03      	subs	r3, r0, #0
 8001468:	d005      	beq.n	8001476 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	2240      	movs	r2, #64	; 0x40
 800146e:	2100      	movs	r1, #0
 8001470:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e0b5      	b.n	80015e2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800147a:	b29b      	uxth	r3, r3
 800147c:	2bff      	cmp	r3, #255	; 0xff
 800147e:	d911      	bls.n	80014a4 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	22ff      	movs	r2, #255	; 0xff
 8001484:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800148a:	b2da      	uxtb	r2, r3
 800148c:	2380      	movs	r3, #128	; 0x80
 800148e:	045c      	lsls	r4, r3, #17
 8001490:	230a      	movs	r3, #10
 8001492:	18fb      	adds	r3, r7, r3
 8001494:	8819      	ldrh	r1, [r3, #0]
 8001496:	68f8      	ldr	r0, [r7, #12]
 8001498:	2300      	movs	r3, #0
 800149a:	9300      	str	r3, [sp, #0]
 800149c:	0023      	movs	r3, r4
 800149e:	f000 fc9b 	bl	8001dd8 <I2C_TransferConfig>
 80014a2:	e012      	b.n	80014ca <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	2380      	movs	r3, #128	; 0x80
 80014b6:	049c      	lsls	r4, r3, #18
 80014b8:	230a      	movs	r3, #10
 80014ba:	18fb      	adds	r3, r7, r3
 80014bc:	8819      	ldrh	r1, [r3, #0]
 80014be:	68f8      	ldr	r0, [r7, #12]
 80014c0:	2300      	movs	r3, #0
 80014c2:	9300      	str	r3, [sp, #0]
 80014c4:	0023      	movs	r3, r4
 80014c6:	f000 fc87 	bl	8001dd8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014ca:	697a      	ldr	r2, [r7, #20]
 80014cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	0018      	movs	r0, r3
 80014d2:	f000 faf7 	bl	8001ac4 <I2C_WaitOnTXISFlagUntilTimeout>
 80014d6:	1e03      	subs	r3, r0, #0
 80014d8:	d001      	beq.n	80014de <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e081      	b.n	80015e2 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e2:	781a      	ldrb	r2, [r3, #0]
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ee:	1c5a      	adds	r2, r3, #1
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	3b01      	subs	r3, #1
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001506:	3b01      	subs	r3, #1
 8001508:	b29a      	uxth	r2, r3
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001512:	b29b      	uxth	r3, r3
 8001514:	2b00      	cmp	r3, #0
 8001516:	d03a      	beq.n	800158e <HAL_I2C_Mem_Write+0x1fa>
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800151c:	2b00      	cmp	r3, #0
 800151e:	d136      	bne.n	800158e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001522:	68f8      	ldr	r0, [r7, #12]
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	0013      	movs	r3, r2
 800152a:	2200      	movs	r2, #0
 800152c:	2180      	movs	r1, #128	; 0x80
 800152e:	f000 fa7b 	bl	8001a28 <I2C_WaitOnFlagUntilTimeout>
 8001532:	1e03      	subs	r3, r0, #0
 8001534:	d001      	beq.n	800153a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e053      	b.n	80015e2 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800153e:	b29b      	uxth	r3, r3
 8001540:	2bff      	cmp	r3, #255	; 0xff
 8001542:	d911      	bls.n	8001568 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	22ff      	movs	r2, #255	; 0xff
 8001548:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800154e:	b2da      	uxtb	r2, r3
 8001550:	2380      	movs	r3, #128	; 0x80
 8001552:	045c      	lsls	r4, r3, #17
 8001554:	230a      	movs	r3, #10
 8001556:	18fb      	adds	r3, r7, r3
 8001558:	8819      	ldrh	r1, [r3, #0]
 800155a:	68f8      	ldr	r0, [r7, #12]
 800155c:	2300      	movs	r3, #0
 800155e:	9300      	str	r3, [sp, #0]
 8001560:	0023      	movs	r3, r4
 8001562:	f000 fc39 	bl	8001dd8 <I2C_TransferConfig>
 8001566:	e012      	b.n	800158e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800156c:	b29a      	uxth	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001576:	b2da      	uxtb	r2, r3
 8001578:	2380      	movs	r3, #128	; 0x80
 800157a:	049c      	lsls	r4, r3, #18
 800157c:	230a      	movs	r3, #10
 800157e:	18fb      	adds	r3, r7, r3
 8001580:	8819      	ldrh	r1, [r3, #0]
 8001582:	68f8      	ldr	r0, [r7, #12]
 8001584:	2300      	movs	r3, #0
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	0023      	movs	r3, r4
 800158a:	f000 fc25 	bl	8001dd8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001592:	b29b      	uxth	r3, r3
 8001594:	2b00      	cmp	r3, #0
 8001596:	d198      	bne.n	80014ca <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001598:	697a      	ldr	r2, [r7, #20]
 800159a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	0018      	movs	r0, r3
 80015a0:	f000 fad6 	bl	8001b50 <I2C_WaitOnSTOPFlagUntilTimeout>
 80015a4:	1e03      	subs	r3, r0, #0
 80015a6:	d001      	beq.n	80015ac <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e01a      	b.n	80015e2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2220      	movs	r2, #32
 80015b2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	490b      	ldr	r1, [pc, #44]	; (80015ec <HAL_I2C_Mem_Write+0x258>)
 80015c0:	400a      	ands	r2, r1
 80015c2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2241      	movs	r2, #65	; 0x41
 80015c8:	2120      	movs	r1, #32
 80015ca:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	2242      	movs	r2, #66	; 0x42
 80015d0:	2100      	movs	r1, #0
 80015d2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2240      	movs	r2, #64	; 0x40
 80015d8:	2100      	movs	r1, #0
 80015da:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80015dc:	2300      	movs	r3, #0
 80015de:	e000      	b.n	80015e2 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80015e0:	2302      	movs	r3, #2
  }
}
 80015e2:	0018      	movs	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	b007      	add	sp, #28
 80015e8:	bd90      	pop	{r4, r7, pc}
 80015ea:	46c0      	nop			; (mov r8, r8)
 80015ec:	fe00e800 	.word	0xfe00e800

080015f0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80015f0:	b590      	push	{r4, r7, lr}
 80015f2:	b089      	sub	sp, #36	; 0x24
 80015f4:	af02      	add	r7, sp, #8
 80015f6:	60f8      	str	r0, [r7, #12]
 80015f8:	000c      	movs	r4, r1
 80015fa:	0010      	movs	r0, r2
 80015fc:	0019      	movs	r1, r3
 80015fe:	230a      	movs	r3, #10
 8001600:	18fb      	adds	r3, r7, r3
 8001602:	1c22      	adds	r2, r4, #0
 8001604:	801a      	strh	r2, [r3, #0]
 8001606:	2308      	movs	r3, #8
 8001608:	18fb      	adds	r3, r7, r3
 800160a:	1c02      	adds	r2, r0, #0
 800160c:	801a      	strh	r2, [r3, #0]
 800160e:	1dbb      	adds	r3, r7, #6
 8001610:	1c0a      	adds	r2, r1, #0
 8001612:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2241      	movs	r2, #65	; 0x41
 8001618:	5c9b      	ldrb	r3, [r3, r2]
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2b20      	cmp	r3, #32
 800161e:	d000      	beq.n	8001622 <HAL_I2C_Mem_Read+0x32>
 8001620:	e110      	b.n	8001844 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001624:	2b00      	cmp	r3, #0
 8001626:	d004      	beq.n	8001632 <HAL_I2C_Mem_Read+0x42>
 8001628:	232c      	movs	r3, #44	; 0x2c
 800162a:	18fb      	adds	r3, r7, r3
 800162c:	881b      	ldrh	r3, [r3, #0]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d105      	bne.n	800163e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2280      	movs	r2, #128	; 0x80
 8001636:	0092      	lsls	r2, r2, #2
 8001638:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e103      	b.n	8001846 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2240      	movs	r2, #64	; 0x40
 8001642:	5c9b      	ldrb	r3, [r3, r2]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d101      	bne.n	800164c <HAL_I2C_Mem_Read+0x5c>
 8001648:	2302      	movs	r3, #2
 800164a:	e0fc      	b.n	8001846 <HAL_I2C_Mem_Read+0x256>
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2240      	movs	r2, #64	; 0x40
 8001650:	2101      	movs	r1, #1
 8001652:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001654:	f7ff fb98 	bl	8000d88 <HAL_GetTick>
 8001658:	0003      	movs	r3, r0
 800165a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800165c:	2380      	movs	r3, #128	; 0x80
 800165e:	0219      	lsls	r1, r3, #8
 8001660:	68f8      	ldr	r0, [r7, #12]
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	2319      	movs	r3, #25
 8001668:	2201      	movs	r2, #1
 800166a:	f000 f9dd 	bl	8001a28 <I2C_WaitOnFlagUntilTimeout>
 800166e:	1e03      	subs	r3, r0, #0
 8001670:	d001      	beq.n	8001676 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e0e7      	b.n	8001846 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	2241      	movs	r2, #65	; 0x41
 800167a:	2122      	movs	r1, #34	; 0x22
 800167c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2242      	movs	r2, #66	; 0x42
 8001682:	2140      	movs	r1, #64	; 0x40
 8001684:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	2200      	movs	r2, #0
 800168a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001690:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	222c      	movs	r2, #44	; 0x2c
 8001696:	18ba      	adds	r2, r7, r2
 8001698:	8812      	ldrh	r2, [r2, #0]
 800169a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	2200      	movs	r2, #0
 80016a0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80016a2:	1dbb      	adds	r3, r7, #6
 80016a4:	881c      	ldrh	r4, [r3, #0]
 80016a6:	2308      	movs	r3, #8
 80016a8:	18fb      	adds	r3, r7, r3
 80016aa:	881a      	ldrh	r2, [r3, #0]
 80016ac:	230a      	movs	r3, #10
 80016ae:	18fb      	adds	r3, r7, r3
 80016b0:	8819      	ldrh	r1, [r3, #0]
 80016b2:	68f8      	ldr	r0, [r7, #12]
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	9301      	str	r3, [sp, #4]
 80016b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80016ba:	9300      	str	r3, [sp, #0]
 80016bc:	0023      	movs	r3, r4
 80016be:	f000 f92f 	bl	8001920 <I2C_RequestMemoryRead>
 80016c2:	1e03      	subs	r3, r0, #0
 80016c4:	d005      	beq.n	80016d2 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	2240      	movs	r2, #64	; 0x40
 80016ca:	2100      	movs	r1, #0
 80016cc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e0b9      	b.n	8001846 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	2bff      	cmp	r3, #255	; 0xff
 80016da:	d911      	bls.n	8001700 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	22ff      	movs	r2, #255	; 0xff
 80016e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	2380      	movs	r3, #128	; 0x80
 80016ea:	045c      	lsls	r4, r3, #17
 80016ec:	230a      	movs	r3, #10
 80016ee:	18fb      	adds	r3, r7, r3
 80016f0:	8819      	ldrh	r1, [r3, #0]
 80016f2:	68f8      	ldr	r0, [r7, #12]
 80016f4:	4b56      	ldr	r3, [pc, #344]	; (8001850 <HAL_I2C_Mem_Read+0x260>)
 80016f6:	9300      	str	r3, [sp, #0]
 80016f8:	0023      	movs	r3, r4
 80016fa:	f000 fb6d 	bl	8001dd8 <I2C_TransferConfig>
 80016fe:	e012      	b.n	8001726 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001704:	b29a      	uxth	r2, r3
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800170e:	b2da      	uxtb	r2, r3
 8001710:	2380      	movs	r3, #128	; 0x80
 8001712:	049c      	lsls	r4, r3, #18
 8001714:	230a      	movs	r3, #10
 8001716:	18fb      	adds	r3, r7, r3
 8001718:	8819      	ldrh	r1, [r3, #0]
 800171a:	68f8      	ldr	r0, [r7, #12]
 800171c:	4b4c      	ldr	r3, [pc, #304]	; (8001850 <HAL_I2C_Mem_Read+0x260>)
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	0023      	movs	r3, r4
 8001722:	f000 fb59 	bl	8001dd8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001726:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001728:	68f8      	ldr	r0, [r7, #12]
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	0013      	movs	r3, r2
 8001730:	2200      	movs	r2, #0
 8001732:	2104      	movs	r1, #4
 8001734:	f000 f978 	bl	8001a28 <I2C_WaitOnFlagUntilTimeout>
 8001738:	1e03      	subs	r3, r0, #0
 800173a:	d001      	beq.n	8001740 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e082      	b.n	8001846 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001752:	1c5a      	adds	r2, r3, #1
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800175c:	3b01      	subs	r3, #1
 800175e:	b29a      	uxth	r2, r3
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001768:	b29b      	uxth	r3, r3
 800176a:	3b01      	subs	r3, #1
 800176c:	b29a      	uxth	r2, r3
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001776:	b29b      	uxth	r3, r3
 8001778:	2b00      	cmp	r3, #0
 800177a:	d03a      	beq.n	80017f2 <HAL_I2C_Mem_Read+0x202>
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001780:	2b00      	cmp	r3, #0
 8001782:	d136      	bne.n	80017f2 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001784:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001786:	68f8      	ldr	r0, [r7, #12]
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	9300      	str	r3, [sp, #0]
 800178c:	0013      	movs	r3, r2
 800178e:	2200      	movs	r2, #0
 8001790:	2180      	movs	r1, #128	; 0x80
 8001792:	f000 f949 	bl	8001a28 <I2C_WaitOnFlagUntilTimeout>
 8001796:	1e03      	subs	r3, r0, #0
 8001798:	d001      	beq.n	800179e <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e053      	b.n	8001846 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	2bff      	cmp	r3, #255	; 0xff
 80017a6:	d911      	bls.n	80017cc <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	22ff      	movs	r2, #255	; 0xff
 80017ac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017b2:	b2da      	uxtb	r2, r3
 80017b4:	2380      	movs	r3, #128	; 0x80
 80017b6:	045c      	lsls	r4, r3, #17
 80017b8:	230a      	movs	r3, #10
 80017ba:	18fb      	adds	r3, r7, r3
 80017bc:	8819      	ldrh	r1, [r3, #0]
 80017be:	68f8      	ldr	r0, [r7, #12]
 80017c0:	2300      	movs	r3, #0
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	0023      	movs	r3, r4
 80017c6:	f000 fb07 	bl	8001dd8 <I2C_TransferConfig>
 80017ca:	e012      	b.n	80017f2 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017da:	b2da      	uxtb	r2, r3
 80017dc:	2380      	movs	r3, #128	; 0x80
 80017de:	049c      	lsls	r4, r3, #18
 80017e0:	230a      	movs	r3, #10
 80017e2:	18fb      	adds	r3, r7, r3
 80017e4:	8819      	ldrh	r1, [r3, #0]
 80017e6:	68f8      	ldr	r0, [r7, #12]
 80017e8:	2300      	movs	r3, #0
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	0023      	movs	r3, r4
 80017ee:	f000 faf3 	bl	8001dd8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d194      	bne.n	8001726 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	0018      	movs	r0, r3
 8001804:	f000 f9a4 	bl	8001b50 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001808:	1e03      	subs	r3, r0, #0
 800180a:	d001      	beq.n	8001810 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	e01a      	b.n	8001846 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2220      	movs	r2, #32
 8001816:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	685a      	ldr	r2, [r3, #4]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	490c      	ldr	r1, [pc, #48]	; (8001854 <HAL_I2C_Mem_Read+0x264>)
 8001824:	400a      	ands	r2, r1
 8001826:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2241      	movs	r2, #65	; 0x41
 800182c:	2120      	movs	r1, #32
 800182e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	2242      	movs	r2, #66	; 0x42
 8001834:	2100      	movs	r1, #0
 8001836:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2240      	movs	r2, #64	; 0x40
 800183c:	2100      	movs	r1, #0
 800183e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001840:	2300      	movs	r3, #0
 8001842:	e000      	b.n	8001846 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001844:	2302      	movs	r3, #2
  }
}
 8001846:	0018      	movs	r0, r3
 8001848:	46bd      	mov	sp, r7
 800184a:	b007      	add	sp, #28
 800184c:	bd90      	pop	{r4, r7, pc}
 800184e:	46c0      	nop			; (mov r8, r8)
 8001850:	80002400 	.word	0x80002400
 8001854:	fe00e800 	.word	0xfe00e800

08001858 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001858:	b5b0      	push	{r4, r5, r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af02      	add	r7, sp, #8
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	000c      	movs	r4, r1
 8001862:	0010      	movs	r0, r2
 8001864:	0019      	movs	r1, r3
 8001866:	250a      	movs	r5, #10
 8001868:	197b      	adds	r3, r7, r5
 800186a:	1c22      	adds	r2, r4, #0
 800186c:	801a      	strh	r2, [r3, #0]
 800186e:	2308      	movs	r3, #8
 8001870:	18fb      	adds	r3, r7, r3
 8001872:	1c02      	adds	r2, r0, #0
 8001874:	801a      	strh	r2, [r3, #0]
 8001876:	1dbb      	adds	r3, r7, #6
 8001878:	1c0a      	adds	r2, r1, #0
 800187a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800187c:	1dbb      	adds	r3, r7, #6
 800187e:	881b      	ldrh	r3, [r3, #0]
 8001880:	b2da      	uxtb	r2, r3
 8001882:	2380      	movs	r3, #128	; 0x80
 8001884:	045c      	lsls	r4, r3, #17
 8001886:	197b      	adds	r3, r7, r5
 8001888:	8819      	ldrh	r1, [r3, #0]
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	4b23      	ldr	r3, [pc, #140]	; (800191c <I2C_RequestMemoryWrite+0xc4>)
 800188e:	9300      	str	r3, [sp, #0]
 8001890:	0023      	movs	r3, r4
 8001892:	f000 faa1 	bl	8001dd8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001896:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001898:	6a39      	ldr	r1, [r7, #32]
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	0018      	movs	r0, r3
 800189e:	f000 f911 	bl	8001ac4 <I2C_WaitOnTXISFlagUntilTimeout>
 80018a2:	1e03      	subs	r3, r0, #0
 80018a4:	d001      	beq.n	80018aa <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e033      	b.n	8001912 <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80018aa:	1dbb      	adds	r3, r7, #6
 80018ac:	881b      	ldrh	r3, [r3, #0]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d107      	bne.n	80018c2 <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80018b2:	2308      	movs	r3, #8
 80018b4:	18fb      	adds	r3, r7, r3
 80018b6:	881b      	ldrh	r3, [r3, #0]
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	629a      	str	r2, [r3, #40]	; 0x28
 80018c0:	e019      	b.n	80018f6 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80018c2:	2308      	movs	r3, #8
 80018c4:	18fb      	adds	r3, r7, r3
 80018c6:	881b      	ldrh	r3, [r3, #0]
 80018c8:	0a1b      	lsrs	r3, r3, #8
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80018d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018d6:	6a39      	ldr	r1, [r7, #32]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	0018      	movs	r0, r3
 80018dc:	f000 f8f2 	bl	8001ac4 <I2C_WaitOnTXISFlagUntilTimeout>
 80018e0:	1e03      	subs	r3, r0, #0
 80018e2:	d001      	beq.n	80018e8 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e014      	b.n	8001912 <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80018e8:	2308      	movs	r3, #8
 80018ea:	18fb      	adds	r3, r7, r3
 80018ec:	881b      	ldrh	r3, [r3, #0]
 80018ee:	b2da      	uxtb	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80018f6:	6a3a      	ldr	r2, [r7, #32]
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	9300      	str	r3, [sp, #0]
 80018fe:	0013      	movs	r3, r2
 8001900:	2200      	movs	r2, #0
 8001902:	2180      	movs	r1, #128	; 0x80
 8001904:	f000 f890 	bl	8001a28 <I2C_WaitOnFlagUntilTimeout>
 8001908:	1e03      	subs	r3, r0, #0
 800190a:	d001      	beq.n	8001910 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e000      	b.n	8001912 <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8001910:	2300      	movs	r3, #0
}
 8001912:	0018      	movs	r0, r3
 8001914:	46bd      	mov	sp, r7
 8001916:	b004      	add	sp, #16
 8001918:	bdb0      	pop	{r4, r5, r7, pc}
 800191a:	46c0      	nop			; (mov r8, r8)
 800191c:	80002000 	.word	0x80002000

08001920 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001920:	b5b0      	push	{r4, r5, r7, lr}
 8001922:	b086      	sub	sp, #24
 8001924:	af02      	add	r7, sp, #8
 8001926:	60f8      	str	r0, [r7, #12]
 8001928:	000c      	movs	r4, r1
 800192a:	0010      	movs	r0, r2
 800192c:	0019      	movs	r1, r3
 800192e:	250a      	movs	r5, #10
 8001930:	197b      	adds	r3, r7, r5
 8001932:	1c22      	adds	r2, r4, #0
 8001934:	801a      	strh	r2, [r3, #0]
 8001936:	2308      	movs	r3, #8
 8001938:	18fb      	adds	r3, r7, r3
 800193a:	1c02      	adds	r2, r0, #0
 800193c:	801a      	strh	r2, [r3, #0]
 800193e:	1dbb      	adds	r3, r7, #6
 8001940:	1c0a      	adds	r2, r1, #0
 8001942:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001944:	1dbb      	adds	r3, r7, #6
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	b2da      	uxtb	r2, r3
 800194a:	197b      	adds	r3, r7, r5
 800194c:	8819      	ldrh	r1, [r3, #0]
 800194e:	68f8      	ldr	r0, [r7, #12]
 8001950:	4b23      	ldr	r3, [pc, #140]	; (80019e0 <I2C_RequestMemoryRead+0xc0>)
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	2300      	movs	r3, #0
 8001956:	f000 fa3f 	bl	8001dd8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800195a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800195c:	6a39      	ldr	r1, [r7, #32]
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	0018      	movs	r0, r3
 8001962:	f000 f8af 	bl	8001ac4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001966:	1e03      	subs	r3, r0, #0
 8001968:	d001      	beq.n	800196e <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e033      	b.n	80019d6 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800196e:	1dbb      	adds	r3, r7, #6
 8001970:	881b      	ldrh	r3, [r3, #0]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d107      	bne.n	8001986 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001976:	2308      	movs	r3, #8
 8001978:	18fb      	adds	r3, r7, r3
 800197a:	881b      	ldrh	r3, [r3, #0]
 800197c:	b2da      	uxtb	r2, r3
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	629a      	str	r2, [r3, #40]	; 0x28
 8001984:	e019      	b.n	80019ba <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001986:	2308      	movs	r3, #8
 8001988:	18fb      	adds	r3, r7, r3
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	0a1b      	lsrs	r3, r3, #8
 800198e:	b29b      	uxth	r3, r3
 8001990:	b2da      	uxtb	r2, r3
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800199a:	6a39      	ldr	r1, [r7, #32]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	0018      	movs	r0, r3
 80019a0:	f000 f890 	bl	8001ac4 <I2C_WaitOnTXISFlagUntilTimeout>
 80019a4:	1e03      	subs	r3, r0, #0
 80019a6:	d001      	beq.n	80019ac <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e014      	b.n	80019d6 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80019ac:	2308      	movs	r3, #8
 80019ae:	18fb      	adds	r3, r7, r3
 80019b0:	881b      	ldrh	r3, [r3, #0]
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80019ba:	6a3a      	ldr	r2, [r7, #32]
 80019bc:	68f8      	ldr	r0, [r7, #12]
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	0013      	movs	r3, r2
 80019c4:	2200      	movs	r2, #0
 80019c6:	2140      	movs	r1, #64	; 0x40
 80019c8:	f000 f82e 	bl	8001a28 <I2C_WaitOnFlagUntilTimeout>
 80019cc:	1e03      	subs	r3, r0, #0
 80019ce:	d001      	beq.n	80019d4 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e000      	b.n	80019d6 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	0018      	movs	r0, r3
 80019d8:	46bd      	mov	sp, r7
 80019da:	b004      	add	sp, #16
 80019dc:	bdb0      	pop	{r4, r5, r7, pc}
 80019de:	46c0      	nop			; (mov r8, r8)
 80019e0:	80002000 	.word	0x80002000

080019e4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	2202      	movs	r2, #2
 80019f4:	4013      	ands	r3, r2
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d103      	bne.n	8001a02 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2200      	movs	r2, #0
 8001a00:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	699b      	ldr	r3, [r3, #24]
 8001a08:	2201      	movs	r2, #1
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d007      	beq.n	8001a20 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	699a      	ldr	r2, [r3, #24]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	619a      	str	r2, [r3, #24]
  }
}
 8001a20:	46c0      	nop			; (mov r8, r8)
 8001a22:	46bd      	mov	sp, r7
 8001a24:	b002      	add	sp, #8
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	603b      	str	r3, [r7, #0]
 8001a34:	1dfb      	adds	r3, r7, #7
 8001a36:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a38:	e030      	b.n	8001a9c <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	d02d      	beq.n	8001a9c <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a40:	f7ff f9a2 	bl	8000d88 <HAL_GetTick>
 8001a44:	0002      	movs	r2, r0
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	683a      	ldr	r2, [r7, #0]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d302      	bcc.n	8001a56 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d122      	bne.n	8001a9c <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	699b      	ldr	r3, [r3, #24]
 8001a5c:	68ba      	ldr	r2, [r7, #8]
 8001a5e:	4013      	ands	r3, r2
 8001a60:	68ba      	ldr	r2, [r7, #8]
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	425a      	negs	r2, r3
 8001a66:	4153      	adcs	r3, r2
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	001a      	movs	r2, r3
 8001a6c:	1dfb      	adds	r3, r7, #7
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	d113      	bne.n	8001a9c <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a78:	2220      	movs	r2, #32
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2241      	movs	r2, #65	; 0x41
 8001a84:	2120      	movs	r1, #32
 8001a86:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2242      	movs	r2, #66	; 0x42
 8001a8c:	2100      	movs	r1, #0
 8001a8e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2240      	movs	r2, #64	; 0x40
 8001a94:	2100      	movs	r1, #0
 8001a96:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e00f      	b.n	8001abc <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	699b      	ldr	r3, [r3, #24]
 8001aa2:	68ba      	ldr	r2, [r7, #8]
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	68ba      	ldr	r2, [r7, #8]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	425a      	negs	r2, r3
 8001aac:	4153      	adcs	r3, r2
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	001a      	movs	r2, r3
 8001ab2:	1dfb      	adds	r3, r7, #7
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d0bf      	beq.n	8001a3a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	0018      	movs	r0, r3
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	b004      	add	sp, #16
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ad0:	e032      	b.n	8001b38 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	68b9      	ldr	r1, [r7, #8]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	0018      	movs	r0, r3
 8001ada:	f000 f87d 	bl	8001bd8 <I2C_IsErrorOccurred>
 8001ade:	1e03      	subs	r3, r0, #0
 8001ae0:	d001      	beq.n	8001ae6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e030      	b.n	8001b48 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	d025      	beq.n	8001b38 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001aec:	f7ff f94c 	bl	8000d88 <HAL_GetTick>
 8001af0:	0002      	movs	r2, r0
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d302      	bcc.n	8001b02 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d11a      	bne.n	8001b38 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	2202      	movs	r2, #2
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d013      	beq.n	8001b38 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b14:	2220      	movs	r2, #32
 8001b16:	431a      	orrs	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2241      	movs	r2, #65	; 0x41
 8001b20:	2120      	movs	r1, #32
 8001b22:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2242      	movs	r2, #66	; 0x42
 8001b28:	2100      	movs	r1, #0
 8001b2a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2240      	movs	r2, #64	; 0x40
 8001b30:	2100      	movs	r1, #0
 8001b32:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e007      	b.n	8001b48 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	699b      	ldr	r3, [r3, #24]
 8001b3e:	2202      	movs	r2, #2
 8001b40:	4013      	ands	r3, r2
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d1c5      	bne.n	8001ad2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	0018      	movs	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	b004      	add	sp, #16
 8001b4e:	bd80      	pop	{r7, pc}

08001b50 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b5c:	e02f      	b.n	8001bbe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b5e:	687a      	ldr	r2, [r7, #4]
 8001b60:	68b9      	ldr	r1, [r7, #8]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	0018      	movs	r0, r3
 8001b66:	f000 f837 	bl	8001bd8 <I2C_IsErrorOccurred>
 8001b6a:	1e03      	subs	r3, r0, #0
 8001b6c:	d001      	beq.n	8001b72 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e02d      	b.n	8001bce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b72:	f7ff f909 	bl	8000d88 <HAL_GetTick>
 8001b76:	0002      	movs	r2, r0
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	68ba      	ldr	r2, [r7, #8]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d302      	bcc.n	8001b88 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d11a      	bne.n	8001bbe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	2220      	movs	r2, #32
 8001b90:	4013      	ands	r3, r2
 8001b92:	2b20      	cmp	r3, #32
 8001b94:	d013      	beq.n	8001bbe <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	2220      	movs	r2, #32
 8001b9c:	431a      	orrs	r2, r3
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2241      	movs	r2, #65	; 0x41
 8001ba6:	2120      	movs	r1, #32
 8001ba8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2242      	movs	r2, #66	; 0x42
 8001bae:	2100      	movs	r1, #0
 8001bb0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2240      	movs	r2, #64	; 0x40
 8001bb6:	2100      	movs	r1, #0
 8001bb8:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e007      	b.n	8001bce <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	699b      	ldr	r3, [r3, #24]
 8001bc4:	2220      	movs	r2, #32
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	2b20      	cmp	r3, #32
 8001bca:	d1c8      	bne.n	8001b5e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
}
 8001bce:	0018      	movs	r0, r3
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	b004      	add	sp, #16
 8001bd4:	bd80      	pop	{r7, pc}
	...

08001bd8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bd8:	b590      	push	{r4, r7, lr}
 8001bda:	b08b      	sub	sp, #44	; 0x2c
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001be4:	2327      	movs	r3, #39	; 0x27
 8001be6:	18fb      	adds	r3, r7, r3
 8001be8:	2200      	movs	r2, #0
 8001bea:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	2210      	movs	r2, #16
 8001c00:	4013      	ands	r3, r2
 8001c02:	d100      	bne.n	8001c06 <I2C_IsErrorOccurred+0x2e>
 8001c04:	e082      	b.n	8001d0c <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2210      	movs	r2, #16
 8001c0c:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c0e:	e060      	b.n	8001cd2 <I2C_IsErrorOccurred+0xfa>
 8001c10:	2427      	movs	r4, #39	; 0x27
 8001c12:	193b      	adds	r3, r7, r4
 8001c14:	193a      	adds	r2, r7, r4
 8001c16:	7812      	ldrb	r2, [r2, #0]
 8001c18:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	d058      	beq.n	8001cd2 <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001c20:	f7ff f8b2 	bl	8000d88 <HAL_GetTick>
 8001c24:	0002      	movs	r2, r0
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	68ba      	ldr	r2, [r7, #8]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d306      	bcc.n	8001c3e <I2C_IsErrorOccurred+0x66>
 8001c30:	193b      	adds	r3, r7, r4
 8001c32:	193a      	adds	r2, r7, r4
 8001c34:	7812      	ldrb	r2, [r2, #0]
 8001c36:	701a      	strb	r2, [r3, #0]
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d149      	bne.n	8001cd2 <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	685a      	ldr	r2, [r3, #4]
 8001c44:	2380      	movs	r3, #128	; 0x80
 8001c46:	01db      	lsls	r3, r3, #7
 8001c48:	4013      	ands	r3, r2
 8001c4a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001c4c:	2013      	movs	r0, #19
 8001c4e:	183b      	adds	r3, r7, r0
 8001c50:	68fa      	ldr	r2, [r7, #12]
 8001c52:	2142      	movs	r1, #66	; 0x42
 8001c54:	5c52      	ldrb	r2, [r2, r1]
 8001c56:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	699a      	ldr	r2, [r3, #24]
 8001c5e:	2380      	movs	r3, #128	; 0x80
 8001c60:	021b      	lsls	r3, r3, #8
 8001c62:	401a      	ands	r2, r3
 8001c64:	2380      	movs	r3, #128	; 0x80
 8001c66:	021b      	lsls	r3, r3, #8
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d126      	bne.n	8001cba <I2C_IsErrorOccurred+0xe2>
 8001c6c:	697a      	ldr	r2, [r7, #20]
 8001c6e:	2380      	movs	r3, #128	; 0x80
 8001c70:	01db      	lsls	r3, r3, #7
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d021      	beq.n	8001cba <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8001c76:	183b      	adds	r3, r7, r0
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	2b20      	cmp	r3, #32
 8001c7c:	d01d      	beq.n	8001cba <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2180      	movs	r1, #128	; 0x80
 8001c8a:	01c9      	lsls	r1, r1, #7
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001c90:	f7ff f87a 	bl	8000d88 <HAL_GetTick>
 8001c94:	0003      	movs	r3, r0
 8001c96:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c98:	e00f      	b.n	8001cba <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001c9a:	f7ff f875 	bl	8000d88 <HAL_GetTick>
 8001c9e:	0002      	movs	r2, r0
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b19      	cmp	r3, #25
 8001ca6:	d908      	bls.n	8001cba <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8001ca8:	6a3b      	ldr	r3, [r7, #32]
 8001caa:	2220      	movs	r2, #32
 8001cac:	4313      	orrs	r3, r2
 8001cae:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8001cb0:	2327      	movs	r3, #39	; 0x27
 8001cb2:	18fb      	adds	r3, r7, r3
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	701a      	strb	r2, [r3, #0]

              break;
 8001cb8:	e00b      	b.n	8001cd2 <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	2220      	movs	r2, #32
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	2127      	movs	r1, #39	; 0x27
 8001cc6:	187a      	adds	r2, r7, r1
 8001cc8:	1879      	adds	r1, r7, r1
 8001cca:	7809      	ldrb	r1, [r1, #0]
 8001ccc:	7011      	strb	r1, [r2, #0]
 8001cce:	2b20      	cmp	r3, #32
 8001cd0:	d1e3      	bne.n	8001c9a <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	2220      	movs	r2, #32
 8001cda:	4013      	ands	r3, r2
 8001cdc:	2b20      	cmp	r3, #32
 8001cde:	d004      	beq.n	8001cea <I2C_IsErrorOccurred+0x112>
 8001ce0:	2327      	movs	r3, #39	; 0x27
 8001ce2:	18fb      	adds	r3, r7, r3
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d092      	beq.n	8001c10 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001cea:	2327      	movs	r3, #39	; 0x27
 8001cec:	18fb      	adds	r3, r7, r3
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d103      	bne.n	8001cfc <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2220      	movs	r2, #32
 8001cfa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001cfc:	6a3b      	ldr	r3, [r7, #32]
 8001cfe:	2204      	movs	r2, #4
 8001d00:	4313      	orrs	r3, r2
 8001d02:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001d04:	2327      	movs	r3, #39	; 0x27
 8001d06:	18fb      	adds	r3, r7, r3
 8001d08:	2201      	movs	r2, #1
 8001d0a:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	699b      	ldr	r3, [r3, #24]
 8001d12:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	2380      	movs	r3, #128	; 0x80
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	d00c      	beq.n	8001d38 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001d1e:	6a3b      	ldr	r3, [r7, #32]
 8001d20:	2201      	movs	r2, #1
 8001d22:	4313      	orrs	r3, r2
 8001d24:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2280      	movs	r2, #128	; 0x80
 8001d2c:	0052      	lsls	r2, r2, #1
 8001d2e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d30:	2327      	movs	r3, #39	; 0x27
 8001d32:	18fb      	adds	r3, r7, r3
 8001d34:	2201      	movs	r2, #1
 8001d36:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001d38:	69ba      	ldr	r2, [r7, #24]
 8001d3a:	2380      	movs	r3, #128	; 0x80
 8001d3c:	00db      	lsls	r3, r3, #3
 8001d3e:	4013      	ands	r3, r2
 8001d40:	d00c      	beq.n	8001d5c <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001d42:	6a3b      	ldr	r3, [r7, #32]
 8001d44:	2208      	movs	r2, #8
 8001d46:	4313      	orrs	r3, r2
 8001d48:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2280      	movs	r2, #128	; 0x80
 8001d50:	00d2      	lsls	r2, r2, #3
 8001d52:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d54:	2327      	movs	r3, #39	; 0x27
 8001d56:	18fb      	adds	r3, r7, r3
 8001d58:	2201      	movs	r2, #1
 8001d5a:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	2380      	movs	r3, #128	; 0x80
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4013      	ands	r3, r2
 8001d64:	d00c      	beq.n	8001d80 <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001d66:	6a3b      	ldr	r3, [r7, #32]
 8001d68:	2202      	movs	r2, #2
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2280      	movs	r2, #128	; 0x80
 8001d74:	0092      	lsls	r2, r2, #2
 8001d76:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001d78:	2327      	movs	r3, #39	; 0x27
 8001d7a:	18fb      	adds	r3, r7, r3
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8001d80:	2327      	movs	r3, #39	; 0x27
 8001d82:	18fb      	adds	r3, r7, r3
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d01d      	beq.n	8001dc6 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	0018      	movs	r0, r3
 8001d8e:	f7ff fe29 	bl	80019e4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	490d      	ldr	r1, [pc, #52]	; (8001dd4 <I2C_IsErrorOccurred+0x1fc>)
 8001d9e:	400a      	ands	r2, r1
 8001da0:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001da6:	6a3b      	ldr	r3, [r7, #32]
 8001da8:	431a      	orrs	r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2241      	movs	r2, #65	; 0x41
 8001db2:	2120      	movs	r1, #32
 8001db4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2242      	movs	r2, #66	; 0x42
 8001dba:	2100      	movs	r1, #0
 8001dbc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	2240      	movs	r2, #64	; 0x40
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8001dc6:	2327      	movs	r3, #39	; 0x27
 8001dc8:	18fb      	adds	r3, r7, r3
 8001dca:	781b      	ldrb	r3, [r3, #0]
}
 8001dcc:	0018      	movs	r0, r3
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	b00b      	add	sp, #44	; 0x2c
 8001dd2:	bd90      	pop	{r4, r7, pc}
 8001dd4:	fe00e800 	.word	0xfe00e800

08001dd8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001dd8:	b590      	push	{r4, r7, lr}
 8001dda:	b087      	sub	sp, #28
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	0008      	movs	r0, r1
 8001de2:	0011      	movs	r1, r2
 8001de4:	607b      	str	r3, [r7, #4]
 8001de6:	240a      	movs	r4, #10
 8001de8:	193b      	adds	r3, r7, r4
 8001dea:	1c02      	adds	r2, r0, #0
 8001dec:	801a      	strh	r2, [r3, #0]
 8001dee:	2009      	movs	r0, #9
 8001df0:	183b      	adds	r3, r7, r0
 8001df2:	1c0a      	adds	r2, r1, #0
 8001df4:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001df6:	193b      	adds	r3, r7, r4
 8001df8:	881b      	ldrh	r3, [r3, #0]
 8001dfa:	059b      	lsls	r3, r3, #22
 8001dfc:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001dfe:	183b      	adds	r3, r7, r0
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	0419      	lsls	r1, r3, #16
 8001e04:	23ff      	movs	r3, #255	; 0xff
 8001e06:	041b      	lsls	r3, r3, #16
 8001e08:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e0a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e12:	4313      	orrs	r3, r2
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	085b      	lsrs	r3, r3, #1
 8001e18:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e22:	0d51      	lsrs	r1, r2, #21
 8001e24:	2280      	movs	r2, #128	; 0x80
 8001e26:	00d2      	lsls	r2, r2, #3
 8001e28:	400a      	ands	r2, r1
 8001e2a:	4907      	ldr	r1, [pc, #28]	; (8001e48 <I2C_TransferConfig+0x70>)
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	43d2      	mvns	r2, r2
 8001e30:	401a      	ands	r2, r3
 8001e32:	0011      	movs	r1, r2
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	430a      	orrs	r2, r1
 8001e3c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001e3e:	46c0      	nop			; (mov r8, r8)
 8001e40:	46bd      	mov	sp, r7
 8001e42:	b007      	add	sp, #28
 8001e44:	bd90      	pop	{r4, r7, pc}
 8001e46:	46c0      	nop			; (mov r8, r8)
 8001e48:	03ff63ff 	.word	0x03ff63ff

08001e4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2241      	movs	r2, #65	; 0x41
 8001e5a:	5c9b      	ldrb	r3, [r3, r2]
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	2b20      	cmp	r3, #32
 8001e60:	d138      	bne.n	8001ed4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2240      	movs	r2, #64	; 0x40
 8001e66:	5c9b      	ldrb	r3, [r3, r2]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d101      	bne.n	8001e70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	e032      	b.n	8001ed6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2240      	movs	r2, #64	; 0x40
 8001e74:	2101      	movs	r1, #1
 8001e76:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2241      	movs	r2, #65	; 0x41
 8001e7c:	2124      	movs	r1, #36	; 0x24
 8001e7e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	2101      	movs	r1, #1
 8001e8c:	438a      	bics	r2, r1
 8001e8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4911      	ldr	r1, [pc, #68]	; (8001ee0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001e9c:	400a      	ands	r2, r1
 8001e9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6819      	ldr	r1, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	430a      	orrs	r2, r1
 8001eae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2101      	movs	r1, #1
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2241      	movs	r2, #65	; 0x41
 8001ec4:	2120      	movs	r1, #32
 8001ec6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2240      	movs	r2, #64	; 0x40
 8001ecc:	2100      	movs	r1, #0
 8001ece:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	e000      	b.n	8001ed6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ed4:	2302      	movs	r3, #2
  }
}
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	b002      	add	sp, #8
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	46c0      	nop			; (mov r8, r8)
 8001ee0:	ffffefff 	.word	0xffffefff

08001ee4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2241      	movs	r2, #65	; 0x41
 8001ef2:	5c9b      	ldrb	r3, [r3, r2]
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	2b20      	cmp	r3, #32
 8001ef8:	d139      	bne.n	8001f6e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2240      	movs	r2, #64	; 0x40
 8001efe:	5c9b      	ldrb	r3, [r3, r2]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d101      	bne.n	8001f08 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f04:	2302      	movs	r3, #2
 8001f06:	e033      	b.n	8001f70 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2240      	movs	r2, #64	; 0x40
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2241      	movs	r2, #65	; 0x41
 8001f14:	2124      	movs	r1, #36	; 0x24
 8001f16:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2101      	movs	r1, #1
 8001f24:	438a      	bics	r2, r1
 8001f26:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	4a11      	ldr	r2, [pc, #68]	; (8001f78 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	021b      	lsls	r3, r3, #8
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2101      	movs	r1, #1
 8001f56:	430a      	orrs	r2, r1
 8001f58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2241      	movs	r2, #65	; 0x41
 8001f5e:	2120      	movs	r1, #32
 8001f60:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2240      	movs	r2, #64	; 0x40
 8001f66:	2100      	movs	r1, #0
 8001f68:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	e000      	b.n	8001f70 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f6e:	2302      	movs	r3, #2
  }
}
 8001f70:	0018      	movs	r0, r3
 8001f72:	46bd      	mov	sp, r7
 8001f74:	b004      	add	sp, #16
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	fffff0ff 	.word	0xfffff0ff

08001f7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b088      	sub	sp, #32
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d101      	bne.n	8001f8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e301      	b.n	8002592 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	2201      	movs	r2, #1
 8001f94:	4013      	ands	r3, r2
 8001f96:	d100      	bne.n	8001f9a <HAL_RCC_OscConfig+0x1e>
 8001f98:	e08d      	b.n	80020b6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001f9a:	4bc3      	ldr	r3, [pc, #780]	; (80022a8 <HAL_RCC_OscConfig+0x32c>)
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	220c      	movs	r2, #12
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	d00e      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fa6:	4bc0      	ldr	r3, [pc, #768]	; (80022a8 <HAL_RCC_OscConfig+0x32c>)
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	220c      	movs	r2, #12
 8001fac:	4013      	ands	r3, r2
 8001fae:	2b08      	cmp	r3, #8
 8001fb0:	d116      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x64>
 8001fb2:	4bbd      	ldr	r3, [pc, #756]	; (80022a8 <HAL_RCC_OscConfig+0x32c>)
 8001fb4:	685a      	ldr	r2, [r3, #4]
 8001fb6:	2380      	movs	r3, #128	; 0x80
 8001fb8:	025b      	lsls	r3, r3, #9
 8001fba:	401a      	ands	r2, r3
 8001fbc:	2380      	movs	r3, #128	; 0x80
 8001fbe:	025b      	lsls	r3, r3, #9
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d10d      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc4:	4bb8      	ldr	r3, [pc, #736]	; (80022a8 <HAL_RCC_OscConfig+0x32c>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	2380      	movs	r3, #128	; 0x80
 8001fca:	029b      	lsls	r3, r3, #10
 8001fcc:	4013      	ands	r3, r2
 8001fce:	d100      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x56>
 8001fd0:	e070      	b.n	80020b4 <HAL_RCC_OscConfig+0x138>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d000      	beq.n	8001fdc <HAL_RCC_OscConfig+0x60>
 8001fda:	e06b      	b.n	80020b4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e2d8      	b.n	8002592 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d107      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x7c>
 8001fe8:	4baf      	ldr	r3, [pc, #700]	; (80022a8 <HAL_RCC_OscConfig+0x32c>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4bae      	ldr	r3, [pc, #696]	; (80022a8 <HAL_RCC_OscConfig+0x32c>)
 8001fee:	2180      	movs	r1, #128	; 0x80
 8001ff0:	0249      	lsls	r1, r1, #9
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	e02f      	b.n	8002058 <HAL_RCC_OscConfig+0xdc>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d10c      	bne.n	800201a <HAL_RCC_OscConfig+0x9e>
 8002000:	4ba9      	ldr	r3, [pc, #676]	; (80022a8 <HAL_RCC_OscConfig+0x32c>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	4ba8      	ldr	r3, [pc, #672]	; (80022a8 <HAL_RCC_OscConfig+0x32c>)
 8002006:	49a9      	ldr	r1, [pc, #676]	; (80022ac <HAL_RCC_OscConfig+0x330>)
 8002008:	400a      	ands	r2, r1
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	4ba6      	ldr	r3, [pc, #664]	; (80022a8 <HAL_RCC_OscConfig+0x32c>)
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	4ba5      	ldr	r3, [pc, #660]	; (80022a8 <HAL_RCC_OscConfig+0x32c>)
 8002012:	49a7      	ldr	r1, [pc, #668]	; (80022b0 <HAL_RCC_OscConfig+0x334>)
 8002014:	400a      	ands	r2, r1
 8002016:	601a      	str	r2, [r3, #0]
 8002018:	e01e      	b.n	8002058 <HAL_RCC_OscConfig+0xdc>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b05      	cmp	r3, #5
 8002020:	d10e      	bne.n	8002040 <HAL_RCC_OscConfig+0xc4>
 8002022:	4ba1      	ldr	r3, [pc, #644]	; (80022a8 <HAL_RCC_OscConfig+0x32c>)
 8002024:	681a      	ldr	r2, [r3, #0]
 8002026:	4ba0      	ldr	r3, [pc, #640]	; (80022a8 <HAL_RCC_OscConfig+0x32c>)
 8002028:	2180      	movs	r1, #128	; 0x80
 800202a:	02c9      	lsls	r1, r1, #11
 800202c:	430a      	orrs	r2, r1
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	4b9d      	ldr	r3, [pc, #628]	; (80022a8 <HAL_RCC_OscConfig+0x32c>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	4b9c      	ldr	r3, [pc, #624]	; (80022a8 <HAL_RCC_OscConfig+0x32c>)
 8002036:	2180      	movs	r1, #128	; 0x80
 8002038:	0249      	lsls	r1, r1, #9
 800203a:	430a      	orrs	r2, r1
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	e00b      	b.n	8002058 <HAL_RCC_OscConfig+0xdc>
 8002040:	4b99      	ldr	r3, [pc, #612]	; (80022a8 <HAL_RCC_OscConfig+0x32c>)
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	4b98      	ldr	r3, [pc, #608]	; (80022a8 <HAL_RCC_OscConfig+0x32c>)
 8002046:	4999      	ldr	r1, [pc, #612]	; (80022ac <HAL_RCC_OscConfig+0x330>)
 8002048:	400a      	ands	r2, r1
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	4b96      	ldr	r3, [pc, #600]	; (80022a8 <HAL_RCC_OscConfig+0x32c>)
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	4b95      	ldr	r3, [pc, #596]	; (80022a8 <HAL_RCC_OscConfig+0x32c>)
 8002052:	4997      	ldr	r1, [pc, #604]	; (80022b0 <HAL_RCC_OscConfig+0x334>)
 8002054:	400a      	ands	r2, r1
 8002056:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d014      	beq.n	800208a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002060:	f7fe fe92 	bl	8000d88 <HAL_GetTick>
 8002064:	0003      	movs	r3, r0
 8002066:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002068:	e008      	b.n	800207c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800206a:	f7fe fe8d 	bl	8000d88 <HAL_GetTick>
 800206e:	0002      	movs	r2, r0
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b64      	cmp	r3, #100	; 0x64
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e28a      	b.n	8002592 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207c:	4b8a      	ldr	r3, [pc, #552]	; (80022a8 <HAL_RCC_OscConfig+0x32c>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	2380      	movs	r3, #128	; 0x80
 8002082:	029b      	lsls	r3, r3, #10
 8002084:	4013      	ands	r3, r2
 8002086:	d0f0      	beq.n	800206a <HAL_RCC_OscConfig+0xee>
 8002088:	e015      	b.n	80020b6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208a:	f7fe fe7d 	bl	8000d88 <HAL_GetTick>
 800208e:	0003      	movs	r3, r0
 8002090:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002094:	f7fe fe78 	bl	8000d88 <HAL_GetTick>
 8002098:	0002      	movs	r2, r0
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b64      	cmp	r3, #100	; 0x64
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e275      	b.n	8002592 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020a6:	4b80      	ldr	r3, [pc, #512]	; (80022a8 <HAL_RCC_OscConfig+0x32c>)
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	2380      	movs	r3, #128	; 0x80
 80020ac:	029b      	lsls	r3, r3, #10
 80020ae:	4013      	ands	r3, r2
 80020b0:	d1f0      	bne.n	8002094 <HAL_RCC_OscConfig+0x118>
 80020b2:	e000      	b.n	80020b6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2202      	movs	r2, #2
 80020bc:	4013      	ands	r3, r2
 80020be:	d100      	bne.n	80020c2 <HAL_RCC_OscConfig+0x146>
 80020c0:	e069      	b.n	8002196 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80020c2:	4b79      	ldr	r3, [pc, #484]	; (80022a8 <HAL_RCC_OscConfig+0x32c>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	220c      	movs	r2, #12
 80020c8:	4013      	ands	r3, r2
 80020ca:	d00b      	beq.n	80020e4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80020cc:	4b76      	ldr	r3, [pc, #472]	; (80022a8 <HAL_RCC_OscConfig+0x32c>)
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	220c      	movs	r2, #12
 80020d2:	4013      	ands	r3, r2
 80020d4:	2b08      	cmp	r3, #8
 80020d6:	d11c      	bne.n	8002112 <HAL_RCC_OscConfig+0x196>
 80020d8:	4b73      	ldr	r3, [pc, #460]	; (80022a8 <HAL_RCC_OscConfig+0x32c>)
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	2380      	movs	r3, #128	; 0x80
 80020de:	025b      	lsls	r3, r3, #9
 80020e0:	4013      	ands	r3, r2
 80020e2:	d116      	bne.n	8002112 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020e4:	4b70      	ldr	r3, [pc, #448]	; (80022a8 <HAL_RCC_OscConfig+0x32c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2202      	movs	r2, #2
 80020ea:	4013      	ands	r3, r2
 80020ec:	d005      	beq.n	80020fa <HAL_RCC_OscConfig+0x17e>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d001      	beq.n	80020fa <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e24b      	b.n	8002592 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020fa:	4b6b      	ldr	r3, [pc, #428]	; (80022a8 <HAL_RCC_OscConfig+0x32c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	22f8      	movs	r2, #248	; 0xf8
 8002100:	4393      	bics	r3, r2
 8002102:	0019      	movs	r1, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	00da      	lsls	r2, r3, #3
 800210a:	4b67      	ldr	r3, [pc, #412]	; (80022a8 <HAL_RCC_OscConfig+0x32c>)
 800210c:	430a      	orrs	r2, r1
 800210e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002110:	e041      	b.n	8002196 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d024      	beq.n	8002164 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800211a:	4b63      	ldr	r3, [pc, #396]	; (80022a8 <HAL_RCC_OscConfig+0x32c>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	4b62      	ldr	r3, [pc, #392]	; (80022a8 <HAL_RCC_OscConfig+0x32c>)
 8002120:	2101      	movs	r1, #1
 8002122:	430a      	orrs	r2, r1
 8002124:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002126:	f7fe fe2f 	bl	8000d88 <HAL_GetTick>
 800212a:	0003      	movs	r3, r0
 800212c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800212e:	e008      	b.n	8002142 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002130:	f7fe fe2a 	bl	8000d88 <HAL_GetTick>
 8002134:	0002      	movs	r2, r0
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	2b02      	cmp	r3, #2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e227      	b.n	8002592 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002142:	4b59      	ldr	r3, [pc, #356]	; (80022a8 <HAL_RCC_OscConfig+0x32c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2202      	movs	r2, #2
 8002148:	4013      	ands	r3, r2
 800214a:	d0f1      	beq.n	8002130 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800214c:	4b56      	ldr	r3, [pc, #344]	; (80022a8 <HAL_RCC_OscConfig+0x32c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	22f8      	movs	r2, #248	; 0xf8
 8002152:	4393      	bics	r3, r2
 8002154:	0019      	movs	r1, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	00da      	lsls	r2, r3, #3
 800215c:	4b52      	ldr	r3, [pc, #328]	; (80022a8 <HAL_RCC_OscConfig+0x32c>)
 800215e:	430a      	orrs	r2, r1
 8002160:	601a      	str	r2, [r3, #0]
 8002162:	e018      	b.n	8002196 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002164:	4b50      	ldr	r3, [pc, #320]	; (80022a8 <HAL_RCC_OscConfig+0x32c>)
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	4b4f      	ldr	r3, [pc, #316]	; (80022a8 <HAL_RCC_OscConfig+0x32c>)
 800216a:	2101      	movs	r1, #1
 800216c:	438a      	bics	r2, r1
 800216e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002170:	f7fe fe0a 	bl	8000d88 <HAL_GetTick>
 8002174:	0003      	movs	r3, r0
 8002176:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002178:	e008      	b.n	800218c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800217a:	f7fe fe05 	bl	8000d88 <HAL_GetTick>
 800217e:	0002      	movs	r2, r0
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	2b02      	cmp	r3, #2
 8002186:	d901      	bls.n	800218c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002188:	2303      	movs	r3, #3
 800218a:	e202      	b.n	8002592 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800218c:	4b46      	ldr	r3, [pc, #280]	; (80022a8 <HAL_RCC_OscConfig+0x32c>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2202      	movs	r2, #2
 8002192:	4013      	ands	r3, r2
 8002194:	d1f1      	bne.n	800217a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2208      	movs	r2, #8
 800219c:	4013      	ands	r3, r2
 800219e:	d036      	beq.n	800220e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69db      	ldr	r3, [r3, #28]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d019      	beq.n	80021dc <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021a8:	4b3f      	ldr	r3, [pc, #252]	; (80022a8 <HAL_RCC_OscConfig+0x32c>)
 80021aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021ac:	4b3e      	ldr	r3, [pc, #248]	; (80022a8 <HAL_RCC_OscConfig+0x32c>)
 80021ae:	2101      	movs	r1, #1
 80021b0:	430a      	orrs	r2, r1
 80021b2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b4:	f7fe fde8 	bl	8000d88 <HAL_GetTick>
 80021b8:	0003      	movs	r3, r0
 80021ba:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021bc:	e008      	b.n	80021d0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021be:	f7fe fde3 	bl	8000d88 <HAL_GetTick>
 80021c2:	0002      	movs	r2, r0
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e1e0      	b.n	8002592 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021d0:	4b35      	ldr	r3, [pc, #212]	; (80022a8 <HAL_RCC_OscConfig+0x32c>)
 80021d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d4:	2202      	movs	r2, #2
 80021d6:	4013      	ands	r3, r2
 80021d8:	d0f1      	beq.n	80021be <HAL_RCC_OscConfig+0x242>
 80021da:	e018      	b.n	800220e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021dc:	4b32      	ldr	r3, [pc, #200]	; (80022a8 <HAL_RCC_OscConfig+0x32c>)
 80021de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021e0:	4b31      	ldr	r3, [pc, #196]	; (80022a8 <HAL_RCC_OscConfig+0x32c>)
 80021e2:	2101      	movs	r1, #1
 80021e4:	438a      	bics	r2, r1
 80021e6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e8:	f7fe fdce 	bl	8000d88 <HAL_GetTick>
 80021ec:	0003      	movs	r3, r0
 80021ee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80021f0:	e008      	b.n	8002204 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021f2:	f7fe fdc9 	bl	8000d88 <HAL_GetTick>
 80021f6:	0002      	movs	r2, r0
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e1c6      	b.n	8002592 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002204:	4b28      	ldr	r3, [pc, #160]	; (80022a8 <HAL_RCC_OscConfig+0x32c>)
 8002206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002208:	2202      	movs	r2, #2
 800220a:	4013      	ands	r3, r2
 800220c:	d1f1      	bne.n	80021f2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2204      	movs	r2, #4
 8002214:	4013      	ands	r3, r2
 8002216:	d100      	bne.n	800221a <HAL_RCC_OscConfig+0x29e>
 8002218:	e0b4      	b.n	8002384 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800221a:	201f      	movs	r0, #31
 800221c:	183b      	adds	r3, r7, r0
 800221e:	2200      	movs	r2, #0
 8002220:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002222:	4b21      	ldr	r3, [pc, #132]	; (80022a8 <HAL_RCC_OscConfig+0x32c>)
 8002224:	69da      	ldr	r2, [r3, #28]
 8002226:	2380      	movs	r3, #128	; 0x80
 8002228:	055b      	lsls	r3, r3, #21
 800222a:	4013      	ands	r3, r2
 800222c:	d110      	bne.n	8002250 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800222e:	4b1e      	ldr	r3, [pc, #120]	; (80022a8 <HAL_RCC_OscConfig+0x32c>)
 8002230:	69da      	ldr	r2, [r3, #28]
 8002232:	4b1d      	ldr	r3, [pc, #116]	; (80022a8 <HAL_RCC_OscConfig+0x32c>)
 8002234:	2180      	movs	r1, #128	; 0x80
 8002236:	0549      	lsls	r1, r1, #21
 8002238:	430a      	orrs	r2, r1
 800223a:	61da      	str	r2, [r3, #28]
 800223c:	4b1a      	ldr	r3, [pc, #104]	; (80022a8 <HAL_RCC_OscConfig+0x32c>)
 800223e:	69da      	ldr	r2, [r3, #28]
 8002240:	2380      	movs	r3, #128	; 0x80
 8002242:	055b      	lsls	r3, r3, #21
 8002244:	4013      	ands	r3, r2
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800224a:	183b      	adds	r3, r7, r0
 800224c:	2201      	movs	r2, #1
 800224e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002250:	4b18      	ldr	r3, [pc, #96]	; (80022b4 <HAL_RCC_OscConfig+0x338>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	2380      	movs	r3, #128	; 0x80
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	4013      	ands	r3, r2
 800225a:	d11a      	bne.n	8002292 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800225c:	4b15      	ldr	r3, [pc, #84]	; (80022b4 <HAL_RCC_OscConfig+0x338>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	4b14      	ldr	r3, [pc, #80]	; (80022b4 <HAL_RCC_OscConfig+0x338>)
 8002262:	2180      	movs	r1, #128	; 0x80
 8002264:	0049      	lsls	r1, r1, #1
 8002266:	430a      	orrs	r2, r1
 8002268:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800226a:	f7fe fd8d 	bl	8000d88 <HAL_GetTick>
 800226e:	0003      	movs	r3, r0
 8002270:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002274:	f7fe fd88 	bl	8000d88 <HAL_GetTick>
 8002278:	0002      	movs	r2, r0
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b64      	cmp	r3, #100	; 0x64
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e185      	b.n	8002592 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002286:	4b0b      	ldr	r3, [pc, #44]	; (80022b4 <HAL_RCC_OscConfig+0x338>)
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	2380      	movs	r3, #128	; 0x80
 800228c:	005b      	lsls	r3, r3, #1
 800228e:	4013      	ands	r3, r2
 8002290:	d0f0      	beq.n	8002274 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d10e      	bne.n	80022b8 <HAL_RCC_OscConfig+0x33c>
 800229a:	4b03      	ldr	r3, [pc, #12]	; (80022a8 <HAL_RCC_OscConfig+0x32c>)
 800229c:	6a1a      	ldr	r2, [r3, #32]
 800229e:	4b02      	ldr	r3, [pc, #8]	; (80022a8 <HAL_RCC_OscConfig+0x32c>)
 80022a0:	2101      	movs	r1, #1
 80022a2:	430a      	orrs	r2, r1
 80022a4:	621a      	str	r2, [r3, #32]
 80022a6:	e035      	b.n	8002314 <HAL_RCC_OscConfig+0x398>
 80022a8:	40021000 	.word	0x40021000
 80022ac:	fffeffff 	.word	0xfffeffff
 80022b0:	fffbffff 	.word	0xfffbffff
 80022b4:	40007000 	.word	0x40007000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d10c      	bne.n	80022da <HAL_RCC_OscConfig+0x35e>
 80022c0:	4bb6      	ldr	r3, [pc, #728]	; (800259c <HAL_RCC_OscConfig+0x620>)
 80022c2:	6a1a      	ldr	r2, [r3, #32]
 80022c4:	4bb5      	ldr	r3, [pc, #724]	; (800259c <HAL_RCC_OscConfig+0x620>)
 80022c6:	2101      	movs	r1, #1
 80022c8:	438a      	bics	r2, r1
 80022ca:	621a      	str	r2, [r3, #32]
 80022cc:	4bb3      	ldr	r3, [pc, #716]	; (800259c <HAL_RCC_OscConfig+0x620>)
 80022ce:	6a1a      	ldr	r2, [r3, #32]
 80022d0:	4bb2      	ldr	r3, [pc, #712]	; (800259c <HAL_RCC_OscConfig+0x620>)
 80022d2:	2104      	movs	r1, #4
 80022d4:	438a      	bics	r2, r1
 80022d6:	621a      	str	r2, [r3, #32]
 80022d8:	e01c      	b.n	8002314 <HAL_RCC_OscConfig+0x398>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	2b05      	cmp	r3, #5
 80022e0:	d10c      	bne.n	80022fc <HAL_RCC_OscConfig+0x380>
 80022e2:	4bae      	ldr	r3, [pc, #696]	; (800259c <HAL_RCC_OscConfig+0x620>)
 80022e4:	6a1a      	ldr	r2, [r3, #32]
 80022e6:	4bad      	ldr	r3, [pc, #692]	; (800259c <HAL_RCC_OscConfig+0x620>)
 80022e8:	2104      	movs	r1, #4
 80022ea:	430a      	orrs	r2, r1
 80022ec:	621a      	str	r2, [r3, #32]
 80022ee:	4bab      	ldr	r3, [pc, #684]	; (800259c <HAL_RCC_OscConfig+0x620>)
 80022f0:	6a1a      	ldr	r2, [r3, #32]
 80022f2:	4baa      	ldr	r3, [pc, #680]	; (800259c <HAL_RCC_OscConfig+0x620>)
 80022f4:	2101      	movs	r1, #1
 80022f6:	430a      	orrs	r2, r1
 80022f8:	621a      	str	r2, [r3, #32]
 80022fa:	e00b      	b.n	8002314 <HAL_RCC_OscConfig+0x398>
 80022fc:	4ba7      	ldr	r3, [pc, #668]	; (800259c <HAL_RCC_OscConfig+0x620>)
 80022fe:	6a1a      	ldr	r2, [r3, #32]
 8002300:	4ba6      	ldr	r3, [pc, #664]	; (800259c <HAL_RCC_OscConfig+0x620>)
 8002302:	2101      	movs	r1, #1
 8002304:	438a      	bics	r2, r1
 8002306:	621a      	str	r2, [r3, #32]
 8002308:	4ba4      	ldr	r3, [pc, #656]	; (800259c <HAL_RCC_OscConfig+0x620>)
 800230a:	6a1a      	ldr	r2, [r3, #32]
 800230c:	4ba3      	ldr	r3, [pc, #652]	; (800259c <HAL_RCC_OscConfig+0x620>)
 800230e:	2104      	movs	r1, #4
 8002310:	438a      	bics	r2, r1
 8002312:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d014      	beq.n	8002346 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800231c:	f7fe fd34 	bl	8000d88 <HAL_GetTick>
 8002320:	0003      	movs	r3, r0
 8002322:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002324:	e009      	b.n	800233a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002326:	f7fe fd2f 	bl	8000d88 <HAL_GetTick>
 800232a:	0002      	movs	r2, r0
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	4a9b      	ldr	r2, [pc, #620]	; (80025a0 <HAL_RCC_OscConfig+0x624>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e12b      	b.n	8002592 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800233a:	4b98      	ldr	r3, [pc, #608]	; (800259c <HAL_RCC_OscConfig+0x620>)
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	2202      	movs	r2, #2
 8002340:	4013      	ands	r3, r2
 8002342:	d0f0      	beq.n	8002326 <HAL_RCC_OscConfig+0x3aa>
 8002344:	e013      	b.n	800236e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002346:	f7fe fd1f 	bl	8000d88 <HAL_GetTick>
 800234a:	0003      	movs	r3, r0
 800234c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800234e:	e009      	b.n	8002364 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002350:	f7fe fd1a 	bl	8000d88 <HAL_GetTick>
 8002354:	0002      	movs	r2, r0
 8002356:	69bb      	ldr	r3, [r7, #24]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	4a91      	ldr	r2, [pc, #580]	; (80025a0 <HAL_RCC_OscConfig+0x624>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e116      	b.n	8002592 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002364:	4b8d      	ldr	r3, [pc, #564]	; (800259c <HAL_RCC_OscConfig+0x620>)
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	2202      	movs	r2, #2
 800236a:	4013      	ands	r3, r2
 800236c:	d1f0      	bne.n	8002350 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800236e:	231f      	movs	r3, #31
 8002370:	18fb      	adds	r3, r7, r3
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d105      	bne.n	8002384 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002378:	4b88      	ldr	r3, [pc, #544]	; (800259c <HAL_RCC_OscConfig+0x620>)
 800237a:	69da      	ldr	r2, [r3, #28]
 800237c:	4b87      	ldr	r3, [pc, #540]	; (800259c <HAL_RCC_OscConfig+0x620>)
 800237e:	4989      	ldr	r1, [pc, #548]	; (80025a4 <HAL_RCC_OscConfig+0x628>)
 8002380:	400a      	ands	r2, r1
 8002382:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2210      	movs	r2, #16
 800238a:	4013      	ands	r3, r2
 800238c:	d063      	beq.n	8002456 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d12a      	bne.n	80023ec <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002396:	4b81      	ldr	r3, [pc, #516]	; (800259c <HAL_RCC_OscConfig+0x620>)
 8002398:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800239a:	4b80      	ldr	r3, [pc, #512]	; (800259c <HAL_RCC_OscConfig+0x620>)
 800239c:	2104      	movs	r1, #4
 800239e:	430a      	orrs	r2, r1
 80023a0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80023a2:	4b7e      	ldr	r3, [pc, #504]	; (800259c <HAL_RCC_OscConfig+0x620>)
 80023a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023a6:	4b7d      	ldr	r3, [pc, #500]	; (800259c <HAL_RCC_OscConfig+0x620>)
 80023a8:	2101      	movs	r1, #1
 80023aa:	430a      	orrs	r2, r1
 80023ac:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ae:	f7fe fceb 	bl	8000d88 <HAL_GetTick>
 80023b2:	0003      	movs	r3, r0
 80023b4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80023b6:	e008      	b.n	80023ca <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80023b8:	f7fe fce6 	bl	8000d88 <HAL_GetTick>
 80023bc:	0002      	movs	r2, r0
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e0e3      	b.n	8002592 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80023ca:	4b74      	ldr	r3, [pc, #464]	; (800259c <HAL_RCC_OscConfig+0x620>)
 80023cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ce:	2202      	movs	r2, #2
 80023d0:	4013      	ands	r3, r2
 80023d2:	d0f1      	beq.n	80023b8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80023d4:	4b71      	ldr	r3, [pc, #452]	; (800259c <HAL_RCC_OscConfig+0x620>)
 80023d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d8:	22f8      	movs	r2, #248	; 0xf8
 80023da:	4393      	bics	r3, r2
 80023dc:	0019      	movs	r1, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	699b      	ldr	r3, [r3, #24]
 80023e2:	00da      	lsls	r2, r3, #3
 80023e4:	4b6d      	ldr	r3, [pc, #436]	; (800259c <HAL_RCC_OscConfig+0x620>)
 80023e6:	430a      	orrs	r2, r1
 80023e8:	635a      	str	r2, [r3, #52]	; 0x34
 80023ea:	e034      	b.n	8002456 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	695b      	ldr	r3, [r3, #20]
 80023f0:	3305      	adds	r3, #5
 80023f2:	d111      	bne.n	8002418 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80023f4:	4b69      	ldr	r3, [pc, #420]	; (800259c <HAL_RCC_OscConfig+0x620>)
 80023f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023f8:	4b68      	ldr	r3, [pc, #416]	; (800259c <HAL_RCC_OscConfig+0x620>)
 80023fa:	2104      	movs	r1, #4
 80023fc:	438a      	bics	r2, r1
 80023fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002400:	4b66      	ldr	r3, [pc, #408]	; (800259c <HAL_RCC_OscConfig+0x620>)
 8002402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002404:	22f8      	movs	r2, #248	; 0xf8
 8002406:	4393      	bics	r3, r2
 8002408:	0019      	movs	r1, r3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	00da      	lsls	r2, r3, #3
 8002410:	4b62      	ldr	r3, [pc, #392]	; (800259c <HAL_RCC_OscConfig+0x620>)
 8002412:	430a      	orrs	r2, r1
 8002414:	635a      	str	r2, [r3, #52]	; 0x34
 8002416:	e01e      	b.n	8002456 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002418:	4b60      	ldr	r3, [pc, #384]	; (800259c <HAL_RCC_OscConfig+0x620>)
 800241a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800241c:	4b5f      	ldr	r3, [pc, #380]	; (800259c <HAL_RCC_OscConfig+0x620>)
 800241e:	2104      	movs	r1, #4
 8002420:	430a      	orrs	r2, r1
 8002422:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002424:	4b5d      	ldr	r3, [pc, #372]	; (800259c <HAL_RCC_OscConfig+0x620>)
 8002426:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002428:	4b5c      	ldr	r3, [pc, #368]	; (800259c <HAL_RCC_OscConfig+0x620>)
 800242a:	2101      	movs	r1, #1
 800242c:	438a      	bics	r2, r1
 800242e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002430:	f7fe fcaa 	bl	8000d88 <HAL_GetTick>
 8002434:	0003      	movs	r3, r0
 8002436:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800243a:	f7fe fca5 	bl	8000d88 <HAL_GetTick>
 800243e:	0002      	movs	r2, r0
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e0a2      	b.n	8002592 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800244c:	4b53      	ldr	r3, [pc, #332]	; (800259c <HAL_RCC_OscConfig+0x620>)
 800244e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002450:	2202      	movs	r2, #2
 8002452:	4013      	ands	r3, r2
 8002454:	d1f1      	bne.n	800243a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d100      	bne.n	8002460 <HAL_RCC_OscConfig+0x4e4>
 800245e:	e097      	b.n	8002590 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002460:	4b4e      	ldr	r3, [pc, #312]	; (800259c <HAL_RCC_OscConfig+0x620>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	220c      	movs	r2, #12
 8002466:	4013      	ands	r3, r2
 8002468:	2b08      	cmp	r3, #8
 800246a:	d100      	bne.n	800246e <HAL_RCC_OscConfig+0x4f2>
 800246c:	e06b      	b.n	8002546 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a1b      	ldr	r3, [r3, #32]
 8002472:	2b02      	cmp	r3, #2
 8002474:	d14c      	bne.n	8002510 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002476:	4b49      	ldr	r3, [pc, #292]	; (800259c <HAL_RCC_OscConfig+0x620>)
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	4b48      	ldr	r3, [pc, #288]	; (800259c <HAL_RCC_OscConfig+0x620>)
 800247c:	494a      	ldr	r1, [pc, #296]	; (80025a8 <HAL_RCC_OscConfig+0x62c>)
 800247e:	400a      	ands	r2, r1
 8002480:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002482:	f7fe fc81 	bl	8000d88 <HAL_GetTick>
 8002486:	0003      	movs	r3, r0
 8002488:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800248c:	f7fe fc7c 	bl	8000d88 <HAL_GetTick>
 8002490:	0002      	movs	r2, r0
 8002492:	69bb      	ldr	r3, [r7, #24]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e079      	b.n	8002592 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800249e:	4b3f      	ldr	r3, [pc, #252]	; (800259c <HAL_RCC_OscConfig+0x620>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	2380      	movs	r3, #128	; 0x80
 80024a4:	049b      	lsls	r3, r3, #18
 80024a6:	4013      	ands	r3, r2
 80024a8:	d1f0      	bne.n	800248c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024aa:	4b3c      	ldr	r3, [pc, #240]	; (800259c <HAL_RCC_OscConfig+0x620>)
 80024ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ae:	220f      	movs	r2, #15
 80024b0:	4393      	bics	r3, r2
 80024b2:	0019      	movs	r1, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024b8:	4b38      	ldr	r3, [pc, #224]	; (800259c <HAL_RCC_OscConfig+0x620>)
 80024ba:	430a      	orrs	r2, r1
 80024bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80024be:	4b37      	ldr	r3, [pc, #220]	; (800259c <HAL_RCC_OscConfig+0x620>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	4a3a      	ldr	r2, [pc, #232]	; (80025ac <HAL_RCC_OscConfig+0x630>)
 80024c4:	4013      	ands	r3, r2
 80024c6:	0019      	movs	r1, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d0:	431a      	orrs	r2, r3
 80024d2:	4b32      	ldr	r3, [pc, #200]	; (800259c <HAL_RCC_OscConfig+0x620>)
 80024d4:	430a      	orrs	r2, r1
 80024d6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024d8:	4b30      	ldr	r3, [pc, #192]	; (800259c <HAL_RCC_OscConfig+0x620>)
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	4b2f      	ldr	r3, [pc, #188]	; (800259c <HAL_RCC_OscConfig+0x620>)
 80024de:	2180      	movs	r1, #128	; 0x80
 80024e0:	0449      	lsls	r1, r1, #17
 80024e2:	430a      	orrs	r2, r1
 80024e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e6:	f7fe fc4f 	bl	8000d88 <HAL_GetTick>
 80024ea:	0003      	movs	r3, r0
 80024ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024f0:	f7fe fc4a 	bl	8000d88 <HAL_GetTick>
 80024f4:	0002      	movs	r2, r0
 80024f6:	69bb      	ldr	r3, [r7, #24]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e047      	b.n	8002592 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002502:	4b26      	ldr	r3, [pc, #152]	; (800259c <HAL_RCC_OscConfig+0x620>)
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	2380      	movs	r3, #128	; 0x80
 8002508:	049b      	lsls	r3, r3, #18
 800250a:	4013      	ands	r3, r2
 800250c:	d0f0      	beq.n	80024f0 <HAL_RCC_OscConfig+0x574>
 800250e:	e03f      	b.n	8002590 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002510:	4b22      	ldr	r3, [pc, #136]	; (800259c <HAL_RCC_OscConfig+0x620>)
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	4b21      	ldr	r3, [pc, #132]	; (800259c <HAL_RCC_OscConfig+0x620>)
 8002516:	4924      	ldr	r1, [pc, #144]	; (80025a8 <HAL_RCC_OscConfig+0x62c>)
 8002518:	400a      	ands	r2, r1
 800251a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251c:	f7fe fc34 	bl	8000d88 <HAL_GetTick>
 8002520:	0003      	movs	r3, r0
 8002522:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002526:	f7fe fc2f 	bl	8000d88 <HAL_GetTick>
 800252a:	0002      	movs	r2, r0
 800252c:	69bb      	ldr	r3, [r7, #24]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e02c      	b.n	8002592 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002538:	4b18      	ldr	r3, [pc, #96]	; (800259c <HAL_RCC_OscConfig+0x620>)
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	2380      	movs	r3, #128	; 0x80
 800253e:	049b      	lsls	r3, r3, #18
 8002540:	4013      	ands	r3, r2
 8002542:	d1f0      	bne.n	8002526 <HAL_RCC_OscConfig+0x5aa>
 8002544:	e024      	b.n	8002590 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d101      	bne.n	8002552 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800254e:	2301      	movs	r3, #1
 8002550:	e01f      	b.n	8002592 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002552:	4b12      	ldr	r3, [pc, #72]	; (800259c <HAL_RCC_OscConfig+0x620>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002558:	4b10      	ldr	r3, [pc, #64]	; (800259c <HAL_RCC_OscConfig+0x620>)
 800255a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800255e:	697a      	ldr	r2, [r7, #20]
 8002560:	2380      	movs	r3, #128	; 0x80
 8002562:	025b      	lsls	r3, r3, #9
 8002564:	401a      	ands	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256a:	429a      	cmp	r2, r3
 800256c:	d10e      	bne.n	800258c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	220f      	movs	r2, #15
 8002572:	401a      	ands	r2, r3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002578:	429a      	cmp	r2, r3
 800257a:	d107      	bne.n	800258c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	23f0      	movs	r3, #240	; 0xf0
 8002580:	039b      	lsls	r3, r3, #14
 8002582:	401a      	ands	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002588:	429a      	cmp	r2, r3
 800258a:	d001      	beq.n	8002590 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e000      	b.n	8002592 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	0018      	movs	r0, r3
 8002594:	46bd      	mov	sp, r7
 8002596:	b008      	add	sp, #32
 8002598:	bd80      	pop	{r7, pc}
 800259a:	46c0      	nop			; (mov r8, r8)
 800259c:	40021000 	.word	0x40021000
 80025a0:	00001388 	.word	0x00001388
 80025a4:	efffffff 	.word	0xefffffff
 80025a8:	feffffff 	.word	0xfeffffff
 80025ac:	ffc2ffff 	.word	0xffc2ffff

080025b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b084      	sub	sp, #16
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d101      	bne.n	80025c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e0b3      	b.n	800272c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80025c4:	4b5b      	ldr	r3, [pc, #364]	; (8002734 <HAL_RCC_ClockConfig+0x184>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	2201      	movs	r2, #1
 80025ca:	4013      	ands	r3, r2
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d911      	bls.n	80025f6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d2:	4b58      	ldr	r3, [pc, #352]	; (8002734 <HAL_RCC_ClockConfig+0x184>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2201      	movs	r2, #1
 80025d8:	4393      	bics	r3, r2
 80025da:	0019      	movs	r1, r3
 80025dc:	4b55      	ldr	r3, [pc, #340]	; (8002734 <HAL_RCC_ClockConfig+0x184>)
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	430a      	orrs	r2, r1
 80025e2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e4:	4b53      	ldr	r3, [pc, #332]	; (8002734 <HAL_RCC_ClockConfig+0x184>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2201      	movs	r2, #1
 80025ea:	4013      	ands	r3, r2
 80025ec:	683a      	ldr	r2, [r7, #0]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d001      	beq.n	80025f6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e09a      	b.n	800272c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	2202      	movs	r2, #2
 80025fc:	4013      	ands	r3, r2
 80025fe:	d015      	beq.n	800262c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2204      	movs	r2, #4
 8002606:	4013      	ands	r3, r2
 8002608:	d006      	beq.n	8002618 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800260a:	4b4b      	ldr	r3, [pc, #300]	; (8002738 <HAL_RCC_ClockConfig+0x188>)
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	4b4a      	ldr	r3, [pc, #296]	; (8002738 <HAL_RCC_ClockConfig+0x188>)
 8002610:	21e0      	movs	r1, #224	; 0xe0
 8002612:	00c9      	lsls	r1, r1, #3
 8002614:	430a      	orrs	r2, r1
 8002616:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002618:	4b47      	ldr	r3, [pc, #284]	; (8002738 <HAL_RCC_ClockConfig+0x188>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	22f0      	movs	r2, #240	; 0xf0
 800261e:	4393      	bics	r3, r2
 8002620:	0019      	movs	r1, r3
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	689a      	ldr	r2, [r3, #8]
 8002626:	4b44      	ldr	r3, [pc, #272]	; (8002738 <HAL_RCC_ClockConfig+0x188>)
 8002628:	430a      	orrs	r2, r1
 800262a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2201      	movs	r2, #1
 8002632:	4013      	ands	r3, r2
 8002634:	d040      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d107      	bne.n	800264e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263e:	4b3e      	ldr	r3, [pc, #248]	; (8002738 <HAL_RCC_ClockConfig+0x188>)
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	2380      	movs	r3, #128	; 0x80
 8002644:	029b      	lsls	r3, r3, #10
 8002646:	4013      	ands	r3, r2
 8002648:	d114      	bne.n	8002674 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e06e      	b.n	800272c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b02      	cmp	r3, #2
 8002654:	d107      	bne.n	8002666 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002656:	4b38      	ldr	r3, [pc, #224]	; (8002738 <HAL_RCC_ClockConfig+0x188>)
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	2380      	movs	r3, #128	; 0x80
 800265c:	049b      	lsls	r3, r3, #18
 800265e:	4013      	ands	r3, r2
 8002660:	d108      	bne.n	8002674 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e062      	b.n	800272c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002666:	4b34      	ldr	r3, [pc, #208]	; (8002738 <HAL_RCC_ClockConfig+0x188>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2202      	movs	r2, #2
 800266c:	4013      	ands	r3, r2
 800266e:	d101      	bne.n	8002674 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e05b      	b.n	800272c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002674:	4b30      	ldr	r3, [pc, #192]	; (8002738 <HAL_RCC_ClockConfig+0x188>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	2203      	movs	r2, #3
 800267a:	4393      	bics	r3, r2
 800267c:	0019      	movs	r1, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	4b2d      	ldr	r3, [pc, #180]	; (8002738 <HAL_RCC_ClockConfig+0x188>)
 8002684:	430a      	orrs	r2, r1
 8002686:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002688:	f7fe fb7e 	bl	8000d88 <HAL_GetTick>
 800268c:	0003      	movs	r3, r0
 800268e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002690:	e009      	b.n	80026a6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002692:	f7fe fb79 	bl	8000d88 <HAL_GetTick>
 8002696:	0002      	movs	r2, r0
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	4a27      	ldr	r2, [pc, #156]	; (800273c <HAL_RCC_ClockConfig+0x18c>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e042      	b.n	800272c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026a6:	4b24      	ldr	r3, [pc, #144]	; (8002738 <HAL_RCC_ClockConfig+0x188>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	220c      	movs	r2, #12
 80026ac:	401a      	ands	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d1ec      	bne.n	8002692 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80026b8:	4b1e      	ldr	r3, [pc, #120]	; (8002734 <HAL_RCC_ClockConfig+0x184>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2201      	movs	r2, #1
 80026be:	4013      	ands	r3, r2
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d211      	bcs.n	80026ea <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026c6:	4b1b      	ldr	r3, [pc, #108]	; (8002734 <HAL_RCC_ClockConfig+0x184>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2201      	movs	r2, #1
 80026cc:	4393      	bics	r3, r2
 80026ce:	0019      	movs	r1, r3
 80026d0:	4b18      	ldr	r3, [pc, #96]	; (8002734 <HAL_RCC_ClockConfig+0x184>)
 80026d2:	683a      	ldr	r2, [r7, #0]
 80026d4:	430a      	orrs	r2, r1
 80026d6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d8:	4b16      	ldr	r3, [pc, #88]	; (8002734 <HAL_RCC_ClockConfig+0x184>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2201      	movs	r2, #1
 80026de:	4013      	ands	r3, r2
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d001      	beq.n	80026ea <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e020      	b.n	800272c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2204      	movs	r2, #4
 80026f0:	4013      	ands	r3, r2
 80026f2:	d009      	beq.n	8002708 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80026f4:	4b10      	ldr	r3, [pc, #64]	; (8002738 <HAL_RCC_ClockConfig+0x188>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	4a11      	ldr	r2, [pc, #68]	; (8002740 <HAL_RCC_ClockConfig+0x190>)
 80026fa:	4013      	ands	r3, r2
 80026fc:	0019      	movs	r1, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68da      	ldr	r2, [r3, #12]
 8002702:	4b0d      	ldr	r3, [pc, #52]	; (8002738 <HAL_RCC_ClockConfig+0x188>)
 8002704:	430a      	orrs	r2, r1
 8002706:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002708:	f000 f820 	bl	800274c <HAL_RCC_GetSysClockFreq>
 800270c:	0001      	movs	r1, r0
 800270e:	4b0a      	ldr	r3, [pc, #40]	; (8002738 <HAL_RCC_ClockConfig+0x188>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	091b      	lsrs	r3, r3, #4
 8002714:	220f      	movs	r2, #15
 8002716:	4013      	ands	r3, r2
 8002718:	4a0a      	ldr	r2, [pc, #40]	; (8002744 <HAL_RCC_ClockConfig+0x194>)
 800271a:	5cd3      	ldrb	r3, [r2, r3]
 800271c:	000a      	movs	r2, r1
 800271e:	40da      	lsrs	r2, r3
 8002720:	4b09      	ldr	r3, [pc, #36]	; (8002748 <HAL_RCC_ClockConfig+0x198>)
 8002722:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002724:	2003      	movs	r0, #3
 8002726:	f7fe fae9 	bl	8000cfc <HAL_InitTick>
  
  return HAL_OK;
 800272a:	2300      	movs	r3, #0
}
 800272c:	0018      	movs	r0, r3
 800272e:	46bd      	mov	sp, r7
 8002730:	b004      	add	sp, #16
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40022000 	.word	0x40022000
 8002738:	40021000 	.word	0x40021000
 800273c:	00001388 	.word	0x00001388
 8002740:	fffff8ff 	.word	0xfffff8ff
 8002744:	08003b44 	.word	0x08003b44
 8002748:	20000000 	.word	0x20000000

0800274c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002752:	2300      	movs	r3, #0
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	2300      	movs	r3, #0
 8002758:	60bb      	str	r3, [r7, #8]
 800275a:	2300      	movs	r3, #0
 800275c:	617b      	str	r3, [r7, #20]
 800275e:	2300      	movs	r3, #0
 8002760:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002762:	2300      	movs	r3, #0
 8002764:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002766:	4b20      	ldr	r3, [pc, #128]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	220c      	movs	r2, #12
 8002770:	4013      	ands	r3, r2
 8002772:	2b04      	cmp	r3, #4
 8002774:	d002      	beq.n	800277c <HAL_RCC_GetSysClockFreq+0x30>
 8002776:	2b08      	cmp	r3, #8
 8002778:	d003      	beq.n	8002782 <HAL_RCC_GetSysClockFreq+0x36>
 800277a:	e02c      	b.n	80027d6 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800277c:	4b1b      	ldr	r3, [pc, #108]	; (80027ec <HAL_RCC_GetSysClockFreq+0xa0>)
 800277e:	613b      	str	r3, [r7, #16]
      break;
 8002780:	e02c      	b.n	80027dc <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	0c9b      	lsrs	r3, r3, #18
 8002786:	220f      	movs	r2, #15
 8002788:	4013      	ands	r3, r2
 800278a:	4a19      	ldr	r2, [pc, #100]	; (80027f0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800278c:	5cd3      	ldrb	r3, [r2, r3]
 800278e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002790:	4b15      	ldr	r3, [pc, #84]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002794:	220f      	movs	r2, #15
 8002796:	4013      	ands	r3, r2
 8002798:	4a16      	ldr	r2, [pc, #88]	; (80027f4 <HAL_RCC_GetSysClockFreq+0xa8>)
 800279a:	5cd3      	ldrb	r3, [r2, r3]
 800279c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	2380      	movs	r3, #128	; 0x80
 80027a2:	025b      	lsls	r3, r3, #9
 80027a4:	4013      	ands	r3, r2
 80027a6:	d009      	beq.n	80027bc <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80027a8:	68b9      	ldr	r1, [r7, #8]
 80027aa:	4810      	ldr	r0, [pc, #64]	; (80027ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80027ac:	f7fd fcb6 	bl	800011c <__udivsi3>
 80027b0:	0003      	movs	r3, r0
 80027b2:	001a      	movs	r2, r3
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4353      	muls	r3, r2
 80027b8:	617b      	str	r3, [r7, #20]
 80027ba:	e009      	b.n	80027d0 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	000a      	movs	r2, r1
 80027c0:	0152      	lsls	r2, r2, #5
 80027c2:	1a52      	subs	r2, r2, r1
 80027c4:	0193      	lsls	r3, r2, #6
 80027c6:	1a9b      	subs	r3, r3, r2
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	185b      	adds	r3, r3, r1
 80027cc:	021b      	lsls	r3, r3, #8
 80027ce:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	613b      	str	r3, [r7, #16]
      break;
 80027d4:	e002      	b.n	80027dc <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027d6:	4b05      	ldr	r3, [pc, #20]	; (80027ec <HAL_RCC_GetSysClockFreq+0xa0>)
 80027d8:	613b      	str	r3, [r7, #16]
      break;
 80027da:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80027dc:	693b      	ldr	r3, [r7, #16]
}
 80027de:	0018      	movs	r0, r3
 80027e0:	46bd      	mov	sp, r7
 80027e2:	b006      	add	sp, #24
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	46c0      	nop			; (mov r8, r8)
 80027e8:	40021000 	.word	0x40021000
 80027ec:	007a1200 	.word	0x007a1200
 80027f0:	08003b54 	.word	0x08003b54
 80027f4:	08003b64 	.word	0x08003b64

080027f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002800:	2300      	movs	r3, #0
 8002802:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002804:	2300      	movs	r3, #0
 8002806:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	2380      	movs	r3, #128	; 0x80
 800280e:	025b      	lsls	r3, r3, #9
 8002810:	4013      	ands	r3, r2
 8002812:	d100      	bne.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002814:	e08e      	b.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002816:	2017      	movs	r0, #23
 8002818:	183b      	adds	r3, r7, r0
 800281a:	2200      	movs	r2, #0
 800281c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800281e:	4b57      	ldr	r3, [pc, #348]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002820:	69da      	ldr	r2, [r3, #28]
 8002822:	2380      	movs	r3, #128	; 0x80
 8002824:	055b      	lsls	r3, r3, #21
 8002826:	4013      	ands	r3, r2
 8002828:	d110      	bne.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800282a:	4b54      	ldr	r3, [pc, #336]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800282c:	69da      	ldr	r2, [r3, #28]
 800282e:	4b53      	ldr	r3, [pc, #332]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002830:	2180      	movs	r1, #128	; 0x80
 8002832:	0549      	lsls	r1, r1, #21
 8002834:	430a      	orrs	r2, r1
 8002836:	61da      	str	r2, [r3, #28]
 8002838:	4b50      	ldr	r3, [pc, #320]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800283a:	69da      	ldr	r2, [r3, #28]
 800283c:	2380      	movs	r3, #128	; 0x80
 800283e:	055b      	lsls	r3, r3, #21
 8002840:	4013      	ands	r3, r2
 8002842:	60bb      	str	r3, [r7, #8]
 8002844:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002846:	183b      	adds	r3, r7, r0
 8002848:	2201      	movs	r2, #1
 800284a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800284c:	4b4c      	ldr	r3, [pc, #304]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	2380      	movs	r3, #128	; 0x80
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	4013      	ands	r3, r2
 8002856:	d11a      	bne.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002858:	4b49      	ldr	r3, [pc, #292]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	4b48      	ldr	r3, [pc, #288]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800285e:	2180      	movs	r1, #128	; 0x80
 8002860:	0049      	lsls	r1, r1, #1
 8002862:	430a      	orrs	r2, r1
 8002864:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002866:	f7fe fa8f 	bl	8000d88 <HAL_GetTick>
 800286a:	0003      	movs	r3, r0
 800286c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800286e:	e008      	b.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002870:	f7fe fa8a 	bl	8000d88 <HAL_GetTick>
 8002874:	0002      	movs	r2, r0
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b64      	cmp	r3, #100	; 0x64
 800287c:	d901      	bls.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e077      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002882:	4b3f      	ldr	r3, [pc, #252]	; (8002980 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	2380      	movs	r3, #128	; 0x80
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	4013      	ands	r3, r2
 800288c:	d0f0      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800288e:	4b3b      	ldr	r3, [pc, #236]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002890:	6a1a      	ldr	r2, [r3, #32]
 8002892:	23c0      	movs	r3, #192	; 0xc0
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4013      	ands	r3, r2
 8002898:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d034      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685a      	ldr	r2, [r3, #4]
 80028a4:	23c0      	movs	r3, #192	; 0xc0
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	4013      	ands	r3, r2
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d02c      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80028b0:	4b32      	ldr	r3, [pc, #200]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	4a33      	ldr	r2, [pc, #204]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80028b6:	4013      	ands	r3, r2
 80028b8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80028ba:	4b30      	ldr	r3, [pc, #192]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80028bc:	6a1a      	ldr	r2, [r3, #32]
 80028be:	4b2f      	ldr	r3, [pc, #188]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80028c0:	2180      	movs	r1, #128	; 0x80
 80028c2:	0249      	lsls	r1, r1, #9
 80028c4:	430a      	orrs	r2, r1
 80028c6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80028c8:	4b2c      	ldr	r3, [pc, #176]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80028ca:	6a1a      	ldr	r2, [r3, #32]
 80028cc:	4b2b      	ldr	r3, [pc, #172]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80028ce:	492e      	ldr	r1, [pc, #184]	; (8002988 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80028d0:	400a      	ands	r2, r1
 80028d2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80028d4:	4b29      	ldr	r3, [pc, #164]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2201      	movs	r2, #1
 80028de:	4013      	ands	r3, r2
 80028e0:	d013      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e2:	f7fe fa51 	bl	8000d88 <HAL_GetTick>
 80028e6:	0003      	movs	r3, r0
 80028e8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ea:	e009      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ec:	f7fe fa4c 	bl	8000d88 <HAL_GetTick>
 80028f0:	0002      	movs	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	4a25      	ldr	r2, [pc, #148]	; (800298c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d901      	bls.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e038      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002900:	4b1e      	ldr	r3, [pc, #120]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	2202      	movs	r2, #2
 8002906:	4013      	ands	r3, r2
 8002908:	d0f0      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800290a:	4b1c      	ldr	r3, [pc, #112]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	4a1d      	ldr	r2, [pc, #116]	; (8002984 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002910:	4013      	ands	r3, r2
 8002912:	0019      	movs	r1, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	4b18      	ldr	r3, [pc, #96]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800291a:	430a      	orrs	r2, r1
 800291c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800291e:	2317      	movs	r3, #23
 8002920:	18fb      	adds	r3, r7, r3
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d105      	bne.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002928:	4b14      	ldr	r3, [pc, #80]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800292a:	69da      	ldr	r2, [r3, #28]
 800292c:	4b13      	ldr	r3, [pc, #76]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800292e:	4918      	ldr	r1, [pc, #96]	; (8002990 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002930:	400a      	ands	r2, r1
 8002932:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2201      	movs	r2, #1
 800293a:	4013      	ands	r3, r2
 800293c:	d009      	beq.n	8002952 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800293e:	4b0f      	ldr	r3, [pc, #60]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	2203      	movs	r2, #3
 8002944:	4393      	bics	r3, r2
 8002946:	0019      	movs	r1, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	4b0b      	ldr	r3, [pc, #44]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800294e:	430a      	orrs	r2, r1
 8002950:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2220      	movs	r2, #32
 8002958:	4013      	ands	r3, r2
 800295a:	d009      	beq.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800295c:	4b07      	ldr	r3, [pc, #28]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800295e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002960:	2210      	movs	r2, #16
 8002962:	4393      	bics	r3, r2
 8002964:	0019      	movs	r1, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	4b04      	ldr	r3, [pc, #16]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800296c:	430a      	orrs	r2, r1
 800296e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002970:	2300      	movs	r3, #0
}
 8002972:	0018      	movs	r0, r3
 8002974:	46bd      	mov	sp, r7
 8002976:	b006      	add	sp, #24
 8002978:	bd80      	pop	{r7, pc}
 800297a:	46c0      	nop			; (mov r8, r8)
 800297c:	40021000 	.word	0x40021000
 8002980:	40007000 	.word	0x40007000
 8002984:	fffffcff 	.word	0xfffffcff
 8002988:	fffeffff 	.word	0xfffeffff
 800298c:	00001388 	.word	0x00001388
 8002990:	efffffff 	.word	0xefffffff

08002994 <__errno>:
 8002994:	4b01      	ldr	r3, [pc, #4]	; (800299c <__errno+0x8>)
 8002996:	6818      	ldr	r0, [r3, #0]
 8002998:	4770      	bx	lr
 800299a:	46c0      	nop			; (mov r8, r8)
 800299c:	2000000c 	.word	0x2000000c

080029a0 <__libc_init_array>:
 80029a0:	b570      	push	{r4, r5, r6, lr}
 80029a2:	2600      	movs	r6, #0
 80029a4:	4d0c      	ldr	r5, [pc, #48]	; (80029d8 <__libc_init_array+0x38>)
 80029a6:	4c0d      	ldr	r4, [pc, #52]	; (80029dc <__libc_init_array+0x3c>)
 80029a8:	1b64      	subs	r4, r4, r5
 80029aa:	10a4      	asrs	r4, r4, #2
 80029ac:	42a6      	cmp	r6, r4
 80029ae:	d109      	bne.n	80029c4 <__libc_init_array+0x24>
 80029b0:	2600      	movs	r6, #0
 80029b2:	f001 f8a7 	bl	8003b04 <_init>
 80029b6:	4d0a      	ldr	r5, [pc, #40]	; (80029e0 <__libc_init_array+0x40>)
 80029b8:	4c0a      	ldr	r4, [pc, #40]	; (80029e4 <__libc_init_array+0x44>)
 80029ba:	1b64      	subs	r4, r4, r5
 80029bc:	10a4      	asrs	r4, r4, #2
 80029be:	42a6      	cmp	r6, r4
 80029c0:	d105      	bne.n	80029ce <__libc_init_array+0x2e>
 80029c2:	bd70      	pop	{r4, r5, r6, pc}
 80029c4:	00b3      	lsls	r3, r6, #2
 80029c6:	58eb      	ldr	r3, [r5, r3]
 80029c8:	4798      	blx	r3
 80029ca:	3601      	adds	r6, #1
 80029cc:	e7ee      	b.n	80029ac <__libc_init_array+0xc>
 80029ce:	00b3      	lsls	r3, r6, #2
 80029d0:	58eb      	ldr	r3, [r5, r3]
 80029d2:	4798      	blx	r3
 80029d4:	3601      	adds	r6, #1
 80029d6:	e7f2      	b.n	80029be <__libc_init_array+0x1e>
 80029d8:	08003cbc 	.word	0x08003cbc
 80029dc:	08003cbc 	.word	0x08003cbc
 80029e0:	08003cbc 	.word	0x08003cbc
 80029e4:	08003cc0 	.word	0x08003cc0

080029e8 <memset>:
 80029e8:	0003      	movs	r3, r0
 80029ea:	1882      	adds	r2, r0, r2
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d100      	bne.n	80029f2 <memset+0xa>
 80029f0:	4770      	bx	lr
 80029f2:	7019      	strb	r1, [r3, #0]
 80029f4:	3301      	adds	r3, #1
 80029f6:	e7f9      	b.n	80029ec <memset+0x4>

080029f8 <rand>:
 80029f8:	4b16      	ldr	r3, [pc, #88]	; (8002a54 <rand+0x5c>)
 80029fa:	b510      	push	{r4, lr}
 80029fc:	681c      	ldr	r4, [r3, #0]
 80029fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d116      	bne.n	8002a32 <rand+0x3a>
 8002a04:	2018      	movs	r0, #24
 8002a06:	f000 f863 	bl	8002ad0 <malloc>
 8002a0a:	1e02      	subs	r2, r0, #0
 8002a0c:	63a0      	str	r0, [r4, #56]	; 0x38
 8002a0e:	d104      	bne.n	8002a1a <rand+0x22>
 8002a10:	214e      	movs	r1, #78	; 0x4e
 8002a12:	4b11      	ldr	r3, [pc, #68]	; (8002a58 <rand+0x60>)
 8002a14:	4811      	ldr	r0, [pc, #68]	; (8002a5c <rand+0x64>)
 8002a16:	f000 f82d 	bl	8002a74 <__assert_func>
 8002a1a:	4b11      	ldr	r3, [pc, #68]	; (8002a60 <rand+0x68>)
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	6003      	str	r3, [r0, #0]
 8002a20:	4b10      	ldr	r3, [pc, #64]	; (8002a64 <rand+0x6c>)
 8002a22:	6043      	str	r3, [r0, #4]
 8002a24:	4b10      	ldr	r3, [pc, #64]	; (8002a68 <rand+0x70>)
 8002a26:	6083      	str	r3, [r0, #8]
 8002a28:	230b      	movs	r3, #11
 8002a2a:	8183      	strh	r3, [r0, #12]
 8002a2c:	2001      	movs	r0, #1
 8002a2e:	6110      	str	r0, [r2, #16]
 8002a30:	6151      	str	r1, [r2, #20]
 8002a32:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8002a34:	4a0d      	ldr	r2, [pc, #52]	; (8002a6c <rand+0x74>)
 8002a36:	6920      	ldr	r0, [r4, #16]
 8002a38:	6961      	ldr	r1, [r4, #20]
 8002a3a:	4b0d      	ldr	r3, [pc, #52]	; (8002a70 <rand+0x78>)
 8002a3c:	f7fd fce4 	bl	8000408 <__aeabi_lmul>
 8002a40:	2201      	movs	r2, #1
 8002a42:	2300      	movs	r3, #0
 8002a44:	1880      	adds	r0, r0, r2
 8002a46:	4159      	adcs	r1, r3
 8002a48:	6120      	str	r0, [r4, #16]
 8002a4a:	6161      	str	r1, [r4, #20]
 8002a4c:	0048      	lsls	r0, r1, #1
 8002a4e:	0840      	lsrs	r0, r0, #1
 8002a50:	bd10      	pop	{r4, pc}
 8002a52:	46c0      	nop			; (mov r8, r8)
 8002a54:	2000000c 	.word	0x2000000c
 8002a58:	08003b78 	.word	0x08003b78
 8002a5c:	08003b8f 	.word	0x08003b8f
 8002a60:	abcd330e 	.word	0xabcd330e
 8002a64:	e66d1234 	.word	0xe66d1234
 8002a68:	0005deec 	.word	0x0005deec
 8002a6c:	4c957f2d 	.word	0x4c957f2d
 8002a70:	5851f42d 	.word	0x5851f42d

08002a74 <__assert_func>:
 8002a74:	b530      	push	{r4, r5, lr}
 8002a76:	0014      	movs	r4, r2
 8002a78:	001a      	movs	r2, r3
 8002a7a:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <__assert_func+0x2c>)
 8002a7c:	0005      	movs	r5, r0
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	b085      	sub	sp, #20
 8002a82:	68d8      	ldr	r0, [r3, #12]
 8002a84:	4b07      	ldr	r3, [pc, #28]	; (8002aa4 <__assert_func+0x30>)
 8002a86:	2c00      	cmp	r4, #0
 8002a88:	d101      	bne.n	8002a8e <__assert_func+0x1a>
 8002a8a:	4b07      	ldr	r3, [pc, #28]	; (8002aa8 <__assert_func+0x34>)
 8002a8c:	001c      	movs	r4, r3
 8002a8e:	9301      	str	r3, [sp, #4]
 8002a90:	9100      	str	r1, [sp, #0]
 8002a92:	002b      	movs	r3, r5
 8002a94:	4905      	ldr	r1, [pc, #20]	; (8002aac <__assert_func+0x38>)
 8002a96:	9402      	str	r4, [sp, #8]
 8002a98:	f000 f80a 	bl	8002ab0 <fiprintf>
 8002a9c:	f000 fcc8 	bl	8003430 <abort>
 8002aa0:	2000000c 	.word	0x2000000c
 8002aa4:	08003bea 	.word	0x08003bea
 8002aa8:	08003c25 	.word	0x08003c25
 8002aac:	08003bf7 	.word	0x08003bf7

08002ab0 <fiprintf>:
 8002ab0:	b40e      	push	{r1, r2, r3}
 8002ab2:	b503      	push	{r0, r1, lr}
 8002ab4:	0001      	movs	r1, r0
 8002ab6:	ab03      	add	r3, sp, #12
 8002ab8:	4804      	ldr	r0, [pc, #16]	; (8002acc <fiprintf+0x1c>)
 8002aba:	cb04      	ldmia	r3!, {r2}
 8002abc:	6800      	ldr	r0, [r0, #0]
 8002abe:	9301      	str	r3, [sp, #4]
 8002ac0:	f000 f91a 	bl	8002cf8 <_vfiprintf_r>
 8002ac4:	b002      	add	sp, #8
 8002ac6:	bc08      	pop	{r3}
 8002ac8:	b003      	add	sp, #12
 8002aca:	4718      	bx	r3
 8002acc:	2000000c 	.word	0x2000000c

08002ad0 <malloc>:
 8002ad0:	b510      	push	{r4, lr}
 8002ad2:	4b03      	ldr	r3, [pc, #12]	; (8002ae0 <malloc+0x10>)
 8002ad4:	0001      	movs	r1, r0
 8002ad6:	6818      	ldr	r0, [r3, #0]
 8002ad8:	f000 f870 	bl	8002bbc <_malloc_r>
 8002adc:	bd10      	pop	{r4, pc}
 8002ade:	46c0      	nop			; (mov r8, r8)
 8002ae0:	2000000c 	.word	0x2000000c

08002ae4 <_free_r>:
 8002ae4:	b570      	push	{r4, r5, r6, lr}
 8002ae6:	0005      	movs	r5, r0
 8002ae8:	2900      	cmp	r1, #0
 8002aea:	d010      	beq.n	8002b0e <_free_r+0x2a>
 8002aec:	1f0c      	subs	r4, r1, #4
 8002aee:	6823      	ldr	r3, [r4, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	da00      	bge.n	8002af6 <_free_r+0x12>
 8002af4:	18e4      	adds	r4, r4, r3
 8002af6:	0028      	movs	r0, r5
 8002af8:	f000 feec 	bl	80038d4 <__malloc_lock>
 8002afc:	4a1d      	ldr	r2, [pc, #116]	; (8002b74 <_free_r+0x90>)
 8002afe:	6813      	ldr	r3, [r2, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d105      	bne.n	8002b10 <_free_r+0x2c>
 8002b04:	6063      	str	r3, [r4, #4]
 8002b06:	6014      	str	r4, [r2, #0]
 8002b08:	0028      	movs	r0, r5
 8002b0a:	f000 feeb 	bl	80038e4 <__malloc_unlock>
 8002b0e:	bd70      	pop	{r4, r5, r6, pc}
 8002b10:	42a3      	cmp	r3, r4
 8002b12:	d908      	bls.n	8002b26 <_free_r+0x42>
 8002b14:	6821      	ldr	r1, [r4, #0]
 8002b16:	1860      	adds	r0, r4, r1
 8002b18:	4283      	cmp	r3, r0
 8002b1a:	d1f3      	bne.n	8002b04 <_free_r+0x20>
 8002b1c:	6818      	ldr	r0, [r3, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	1841      	adds	r1, r0, r1
 8002b22:	6021      	str	r1, [r4, #0]
 8002b24:	e7ee      	b.n	8002b04 <_free_r+0x20>
 8002b26:	001a      	movs	r2, r3
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <_free_r+0x4e>
 8002b2e:	42a3      	cmp	r3, r4
 8002b30:	d9f9      	bls.n	8002b26 <_free_r+0x42>
 8002b32:	6811      	ldr	r1, [r2, #0]
 8002b34:	1850      	adds	r0, r2, r1
 8002b36:	42a0      	cmp	r0, r4
 8002b38:	d10b      	bne.n	8002b52 <_free_r+0x6e>
 8002b3a:	6820      	ldr	r0, [r4, #0]
 8002b3c:	1809      	adds	r1, r1, r0
 8002b3e:	1850      	adds	r0, r2, r1
 8002b40:	6011      	str	r1, [r2, #0]
 8002b42:	4283      	cmp	r3, r0
 8002b44:	d1e0      	bne.n	8002b08 <_free_r+0x24>
 8002b46:	6818      	ldr	r0, [r3, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	1841      	adds	r1, r0, r1
 8002b4c:	6011      	str	r1, [r2, #0]
 8002b4e:	6053      	str	r3, [r2, #4]
 8002b50:	e7da      	b.n	8002b08 <_free_r+0x24>
 8002b52:	42a0      	cmp	r0, r4
 8002b54:	d902      	bls.n	8002b5c <_free_r+0x78>
 8002b56:	230c      	movs	r3, #12
 8002b58:	602b      	str	r3, [r5, #0]
 8002b5a:	e7d5      	b.n	8002b08 <_free_r+0x24>
 8002b5c:	6821      	ldr	r1, [r4, #0]
 8002b5e:	1860      	adds	r0, r4, r1
 8002b60:	4283      	cmp	r3, r0
 8002b62:	d103      	bne.n	8002b6c <_free_r+0x88>
 8002b64:	6818      	ldr	r0, [r3, #0]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	1841      	adds	r1, r0, r1
 8002b6a:	6021      	str	r1, [r4, #0]
 8002b6c:	6063      	str	r3, [r4, #4]
 8002b6e:	6054      	str	r4, [r2, #4]
 8002b70:	e7ca      	b.n	8002b08 <_free_r+0x24>
 8002b72:	46c0      	nop			; (mov r8, r8)
 8002b74:	200000e8 	.word	0x200000e8

08002b78 <sbrk_aligned>:
 8002b78:	b570      	push	{r4, r5, r6, lr}
 8002b7a:	4e0f      	ldr	r6, [pc, #60]	; (8002bb8 <sbrk_aligned+0x40>)
 8002b7c:	000d      	movs	r5, r1
 8002b7e:	6831      	ldr	r1, [r6, #0]
 8002b80:	0004      	movs	r4, r0
 8002b82:	2900      	cmp	r1, #0
 8002b84:	d102      	bne.n	8002b8c <sbrk_aligned+0x14>
 8002b86:	f000 fb73 	bl	8003270 <_sbrk_r>
 8002b8a:	6030      	str	r0, [r6, #0]
 8002b8c:	0029      	movs	r1, r5
 8002b8e:	0020      	movs	r0, r4
 8002b90:	f000 fb6e 	bl	8003270 <_sbrk_r>
 8002b94:	1c43      	adds	r3, r0, #1
 8002b96:	d00a      	beq.n	8002bae <sbrk_aligned+0x36>
 8002b98:	2303      	movs	r3, #3
 8002b9a:	1cc5      	adds	r5, r0, #3
 8002b9c:	439d      	bics	r5, r3
 8002b9e:	42a8      	cmp	r0, r5
 8002ba0:	d007      	beq.n	8002bb2 <sbrk_aligned+0x3a>
 8002ba2:	1a29      	subs	r1, r5, r0
 8002ba4:	0020      	movs	r0, r4
 8002ba6:	f000 fb63 	bl	8003270 <_sbrk_r>
 8002baa:	1c43      	adds	r3, r0, #1
 8002bac:	d101      	bne.n	8002bb2 <sbrk_aligned+0x3a>
 8002bae:	2501      	movs	r5, #1
 8002bb0:	426d      	negs	r5, r5
 8002bb2:	0028      	movs	r0, r5
 8002bb4:	bd70      	pop	{r4, r5, r6, pc}
 8002bb6:	46c0      	nop			; (mov r8, r8)
 8002bb8:	200000ec 	.word	0x200000ec

08002bbc <_malloc_r>:
 8002bbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002bbe:	2203      	movs	r2, #3
 8002bc0:	1ccb      	adds	r3, r1, #3
 8002bc2:	4393      	bics	r3, r2
 8002bc4:	3308      	adds	r3, #8
 8002bc6:	0006      	movs	r6, r0
 8002bc8:	001f      	movs	r7, r3
 8002bca:	2b0c      	cmp	r3, #12
 8002bcc:	d232      	bcs.n	8002c34 <_malloc_r+0x78>
 8002bce:	270c      	movs	r7, #12
 8002bd0:	42b9      	cmp	r1, r7
 8002bd2:	d831      	bhi.n	8002c38 <_malloc_r+0x7c>
 8002bd4:	0030      	movs	r0, r6
 8002bd6:	f000 fe7d 	bl	80038d4 <__malloc_lock>
 8002bda:	4d32      	ldr	r5, [pc, #200]	; (8002ca4 <_malloc_r+0xe8>)
 8002bdc:	682b      	ldr	r3, [r5, #0]
 8002bde:	001c      	movs	r4, r3
 8002be0:	2c00      	cmp	r4, #0
 8002be2:	d12e      	bne.n	8002c42 <_malloc_r+0x86>
 8002be4:	0039      	movs	r1, r7
 8002be6:	0030      	movs	r0, r6
 8002be8:	f7ff ffc6 	bl	8002b78 <sbrk_aligned>
 8002bec:	0004      	movs	r4, r0
 8002bee:	1c43      	adds	r3, r0, #1
 8002bf0:	d11e      	bne.n	8002c30 <_malloc_r+0x74>
 8002bf2:	682c      	ldr	r4, [r5, #0]
 8002bf4:	0025      	movs	r5, r4
 8002bf6:	2d00      	cmp	r5, #0
 8002bf8:	d14a      	bne.n	8002c90 <_malloc_r+0xd4>
 8002bfa:	6823      	ldr	r3, [r4, #0]
 8002bfc:	0029      	movs	r1, r5
 8002bfe:	18e3      	adds	r3, r4, r3
 8002c00:	0030      	movs	r0, r6
 8002c02:	9301      	str	r3, [sp, #4]
 8002c04:	f000 fb34 	bl	8003270 <_sbrk_r>
 8002c08:	9b01      	ldr	r3, [sp, #4]
 8002c0a:	4283      	cmp	r3, r0
 8002c0c:	d143      	bne.n	8002c96 <_malloc_r+0xda>
 8002c0e:	6823      	ldr	r3, [r4, #0]
 8002c10:	3703      	adds	r7, #3
 8002c12:	1aff      	subs	r7, r7, r3
 8002c14:	2303      	movs	r3, #3
 8002c16:	439f      	bics	r7, r3
 8002c18:	3708      	adds	r7, #8
 8002c1a:	2f0c      	cmp	r7, #12
 8002c1c:	d200      	bcs.n	8002c20 <_malloc_r+0x64>
 8002c1e:	270c      	movs	r7, #12
 8002c20:	0039      	movs	r1, r7
 8002c22:	0030      	movs	r0, r6
 8002c24:	f7ff ffa8 	bl	8002b78 <sbrk_aligned>
 8002c28:	1c43      	adds	r3, r0, #1
 8002c2a:	d034      	beq.n	8002c96 <_malloc_r+0xda>
 8002c2c:	6823      	ldr	r3, [r4, #0]
 8002c2e:	19df      	adds	r7, r3, r7
 8002c30:	6027      	str	r7, [r4, #0]
 8002c32:	e013      	b.n	8002c5c <_malloc_r+0xa0>
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	dacb      	bge.n	8002bd0 <_malloc_r+0x14>
 8002c38:	230c      	movs	r3, #12
 8002c3a:	2500      	movs	r5, #0
 8002c3c:	6033      	str	r3, [r6, #0]
 8002c3e:	0028      	movs	r0, r5
 8002c40:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002c42:	6822      	ldr	r2, [r4, #0]
 8002c44:	1bd1      	subs	r1, r2, r7
 8002c46:	d420      	bmi.n	8002c8a <_malloc_r+0xce>
 8002c48:	290b      	cmp	r1, #11
 8002c4a:	d917      	bls.n	8002c7c <_malloc_r+0xc0>
 8002c4c:	19e2      	adds	r2, r4, r7
 8002c4e:	6027      	str	r7, [r4, #0]
 8002c50:	42a3      	cmp	r3, r4
 8002c52:	d111      	bne.n	8002c78 <_malloc_r+0xbc>
 8002c54:	602a      	str	r2, [r5, #0]
 8002c56:	6863      	ldr	r3, [r4, #4]
 8002c58:	6011      	str	r1, [r2, #0]
 8002c5a:	6053      	str	r3, [r2, #4]
 8002c5c:	0030      	movs	r0, r6
 8002c5e:	0025      	movs	r5, r4
 8002c60:	f000 fe40 	bl	80038e4 <__malloc_unlock>
 8002c64:	2207      	movs	r2, #7
 8002c66:	350b      	adds	r5, #11
 8002c68:	1d23      	adds	r3, r4, #4
 8002c6a:	4395      	bics	r5, r2
 8002c6c:	1aea      	subs	r2, r5, r3
 8002c6e:	429d      	cmp	r5, r3
 8002c70:	d0e5      	beq.n	8002c3e <_malloc_r+0x82>
 8002c72:	1b5b      	subs	r3, r3, r5
 8002c74:	50a3      	str	r3, [r4, r2]
 8002c76:	e7e2      	b.n	8002c3e <_malloc_r+0x82>
 8002c78:	605a      	str	r2, [r3, #4]
 8002c7a:	e7ec      	b.n	8002c56 <_malloc_r+0x9a>
 8002c7c:	6862      	ldr	r2, [r4, #4]
 8002c7e:	42a3      	cmp	r3, r4
 8002c80:	d101      	bne.n	8002c86 <_malloc_r+0xca>
 8002c82:	602a      	str	r2, [r5, #0]
 8002c84:	e7ea      	b.n	8002c5c <_malloc_r+0xa0>
 8002c86:	605a      	str	r2, [r3, #4]
 8002c88:	e7e8      	b.n	8002c5c <_malloc_r+0xa0>
 8002c8a:	0023      	movs	r3, r4
 8002c8c:	6864      	ldr	r4, [r4, #4]
 8002c8e:	e7a7      	b.n	8002be0 <_malloc_r+0x24>
 8002c90:	002c      	movs	r4, r5
 8002c92:	686d      	ldr	r5, [r5, #4]
 8002c94:	e7af      	b.n	8002bf6 <_malloc_r+0x3a>
 8002c96:	230c      	movs	r3, #12
 8002c98:	0030      	movs	r0, r6
 8002c9a:	6033      	str	r3, [r6, #0]
 8002c9c:	f000 fe22 	bl	80038e4 <__malloc_unlock>
 8002ca0:	e7cd      	b.n	8002c3e <_malloc_r+0x82>
 8002ca2:	46c0      	nop			; (mov r8, r8)
 8002ca4:	200000e8 	.word	0x200000e8

08002ca8 <__sfputc_r>:
 8002ca8:	6893      	ldr	r3, [r2, #8]
 8002caa:	b510      	push	{r4, lr}
 8002cac:	3b01      	subs	r3, #1
 8002cae:	6093      	str	r3, [r2, #8]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	da04      	bge.n	8002cbe <__sfputc_r+0x16>
 8002cb4:	6994      	ldr	r4, [r2, #24]
 8002cb6:	42a3      	cmp	r3, r4
 8002cb8:	db07      	blt.n	8002cca <__sfputc_r+0x22>
 8002cba:	290a      	cmp	r1, #10
 8002cbc:	d005      	beq.n	8002cca <__sfputc_r+0x22>
 8002cbe:	6813      	ldr	r3, [r2, #0]
 8002cc0:	1c58      	adds	r0, r3, #1
 8002cc2:	6010      	str	r0, [r2, #0]
 8002cc4:	7019      	strb	r1, [r3, #0]
 8002cc6:	0008      	movs	r0, r1
 8002cc8:	bd10      	pop	{r4, pc}
 8002cca:	f000 fae3 	bl	8003294 <__swbuf_r>
 8002cce:	0001      	movs	r1, r0
 8002cd0:	e7f9      	b.n	8002cc6 <__sfputc_r+0x1e>

08002cd2 <__sfputs_r>:
 8002cd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cd4:	0006      	movs	r6, r0
 8002cd6:	000f      	movs	r7, r1
 8002cd8:	0014      	movs	r4, r2
 8002cda:	18d5      	adds	r5, r2, r3
 8002cdc:	42ac      	cmp	r4, r5
 8002cde:	d101      	bne.n	8002ce4 <__sfputs_r+0x12>
 8002ce0:	2000      	movs	r0, #0
 8002ce2:	e007      	b.n	8002cf4 <__sfputs_r+0x22>
 8002ce4:	7821      	ldrb	r1, [r4, #0]
 8002ce6:	003a      	movs	r2, r7
 8002ce8:	0030      	movs	r0, r6
 8002cea:	f7ff ffdd 	bl	8002ca8 <__sfputc_r>
 8002cee:	3401      	adds	r4, #1
 8002cf0:	1c43      	adds	r3, r0, #1
 8002cf2:	d1f3      	bne.n	8002cdc <__sfputs_r+0xa>
 8002cf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002cf8 <_vfiprintf_r>:
 8002cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cfa:	b0a1      	sub	sp, #132	; 0x84
 8002cfc:	0006      	movs	r6, r0
 8002cfe:	000c      	movs	r4, r1
 8002d00:	001f      	movs	r7, r3
 8002d02:	9203      	str	r2, [sp, #12]
 8002d04:	2800      	cmp	r0, #0
 8002d06:	d004      	beq.n	8002d12 <_vfiprintf_r+0x1a>
 8002d08:	6983      	ldr	r3, [r0, #24]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <_vfiprintf_r+0x1a>
 8002d0e:	f000 fcc5 	bl	800369c <__sinit>
 8002d12:	4b8e      	ldr	r3, [pc, #568]	; (8002f4c <_vfiprintf_r+0x254>)
 8002d14:	429c      	cmp	r4, r3
 8002d16:	d11c      	bne.n	8002d52 <_vfiprintf_r+0x5a>
 8002d18:	6874      	ldr	r4, [r6, #4]
 8002d1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d1c:	07db      	lsls	r3, r3, #31
 8002d1e:	d405      	bmi.n	8002d2c <_vfiprintf_r+0x34>
 8002d20:	89a3      	ldrh	r3, [r4, #12]
 8002d22:	059b      	lsls	r3, r3, #22
 8002d24:	d402      	bmi.n	8002d2c <_vfiprintf_r+0x34>
 8002d26:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d28:	f000 fd59 	bl	80037de <__retarget_lock_acquire_recursive>
 8002d2c:	89a3      	ldrh	r3, [r4, #12]
 8002d2e:	071b      	lsls	r3, r3, #28
 8002d30:	d502      	bpl.n	8002d38 <_vfiprintf_r+0x40>
 8002d32:	6923      	ldr	r3, [r4, #16]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d11d      	bne.n	8002d74 <_vfiprintf_r+0x7c>
 8002d38:	0021      	movs	r1, r4
 8002d3a:	0030      	movs	r0, r6
 8002d3c:	f000 fb00 	bl	8003340 <__swsetup_r>
 8002d40:	2800      	cmp	r0, #0
 8002d42:	d017      	beq.n	8002d74 <_vfiprintf_r+0x7c>
 8002d44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002d46:	07db      	lsls	r3, r3, #31
 8002d48:	d50d      	bpl.n	8002d66 <_vfiprintf_r+0x6e>
 8002d4a:	2001      	movs	r0, #1
 8002d4c:	4240      	negs	r0, r0
 8002d4e:	b021      	add	sp, #132	; 0x84
 8002d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d52:	4b7f      	ldr	r3, [pc, #508]	; (8002f50 <_vfiprintf_r+0x258>)
 8002d54:	429c      	cmp	r4, r3
 8002d56:	d101      	bne.n	8002d5c <_vfiprintf_r+0x64>
 8002d58:	68b4      	ldr	r4, [r6, #8]
 8002d5a:	e7de      	b.n	8002d1a <_vfiprintf_r+0x22>
 8002d5c:	4b7d      	ldr	r3, [pc, #500]	; (8002f54 <_vfiprintf_r+0x25c>)
 8002d5e:	429c      	cmp	r4, r3
 8002d60:	d1db      	bne.n	8002d1a <_vfiprintf_r+0x22>
 8002d62:	68f4      	ldr	r4, [r6, #12]
 8002d64:	e7d9      	b.n	8002d1a <_vfiprintf_r+0x22>
 8002d66:	89a3      	ldrh	r3, [r4, #12]
 8002d68:	059b      	lsls	r3, r3, #22
 8002d6a:	d4ee      	bmi.n	8002d4a <_vfiprintf_r+0x52>
 8002d6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002d6e:	f000 fd37 	bl	80037e0 <__retarget_lock_release_recursive>
 8002d72:	e7ea      	b.n	8002d4a <_vfiprintf_r+0x52>
 8002d74:	2300      	movs	r3, #0
 8002d76:	ad08      	add	r5, sp, #32
 8002d78:	616b      	str	r3, [r5, #20]
 8002d7a:	3320      	adds	r3, #32
 8002d7c:	766b      	strb	r3, [r5, #25]
 8002d7e:	3310      	adds	r3, #16
 8002d80:	76ab      	strb	r3, [r5, #26]
 8002d82:	9707      	str	r7, [sp, #28]
 8002d84:	9f03      	ldr	r7, [sp, #12]
 8002d86:	783b      	ldrb	r3, [r7, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <_vfiprintf_r+0x98>
 8002d8c:	2b25      	cmp	r3, #37	; 0x25
 8002d8e:	d14e      	bne.n	8002e2e <_vfiprintf_r+0x136>
 8002d90:	9b03      	ldr	r3, [sp, #12]
 8002d92:	1afb      	subs	r3, r7, r3
 8002d94:	9305      	str	r3, [sp, #20]
 8002d96:	9b03      	ldr	r3, [sp, #12]
 8002d98:	429f      	cmp	r7, r3
 8002d9a:	d00d      	beq.n	8002db8 <_vfiprintf_r+0xc0>
 8002d9c:	9b05      	ldr	r3, [sp, #20]
 8002d9e:	0021      	movs	r1, r4
 8002da0:	0030      	movs	r0, r6
 8002da2:	9a03      	ldr	r2, [sp, #12]
 8002da4:	f7ff ff95 	bl	8002cd2 <__sfputs_r>
 8002da8:	1c43      	adds	r3, r0, #1
 8002daa:	d100      	bne.n	8002dae <_vfiprintf_r+0xb6>
 8002dac:	e0b5      	b.n	8002f1a <_vfiprintf_r+0x222>
 8002dae:	696a      	ldr	r2, [r5, #20]
 8002db0:	9b05      	ldr	r3, [sp, #20]
 8002db2:	4694      	mov	ip, r2
 8002db4:	4463      	add	r3, ip
 8002db6:	616b      	str	r3, [r5, #20]
 8002db8:	783b      	ldrb	r3, [r7, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d100      	bne.n	8002dc0 <_vfiprintf_r+0xc8>
 8002dbe:	e0ac      	b.n	8002f1a <_vfiprintf_r+0x222>
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	1c7b      	adds	r3, r7, #1
 8002dc4:	9303      	str	r3, [sp, #12]
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	4252      	negs	r2, r2
 8002dca:	606a      	str	r2, [r5, #4]
 8002dcc:	a904      	add	r1, sp, #16
 8002dce:	3254      	adds	r2, #84	; 0x54
 8002dd0:	1852      	adds	r2, r2, r1
 8002dd2:	602b      	str	r3, [r5, #0]
 8002dd4:	60eb      	str	r3, [r5, #12]
 8002dd6:	60ab      	str	r3, [r5, #8]
 8002dd8:	7013      	strb	r3, [r2, #0]
 8002dda:	65ab      	str	r3, [r5, #88]	; 0x58
 8002ddc:	9b03      	ldr	r3, [sp, #12]
 8002dde:	2205      	movs	r2, #5
 8002de0:	7819      	ldrb	r1, [r3, #0]
 8002de2:	485d      	ldr	r0, [pc, #372]	; (8002f58 <_vfiprintf_r+0x260>)
 8002de4:	f000 fd6a 	bl	80038bc <memchr>
 8002de8:	9b03      	ldr	r3, [sp, #12]
 8002dea:	1c5f      	adds	r7, r3, #1
 8002dec:	2800      	cmp	r0, #0
 8002dee:	d120      	bne.n	8002e32 <_vfiprintf_r+0x13a>
 8002df0:	682a      	ldr	r2, [r5, #0]
 8002df2:	06d3      	lsls	r3, r2, #27
 8002df4:	d504      	bpl.n	8002e00 <_vfiprintf_r+0x108>
 8002df6:	2353      	movs	r3, #83	; 0x53
 8002df8:	a904      	add	r1, sp, #16
 8002dfa:	185b      	adds	r3, r3, r1
 8002dfc:	2120      	movs	r1, #32
 8002dfe:	7019      	strb	r1, [r3, #0]
 8002e00:	0713      	lsls	r3, r2, #28
 8002e02:	d504      	bpl.n	8002e0e <_vfiprintf_r+0x116>
 8002e04:	2353      	movs	r3, #83	; 0x53
 8002e06:	a904      	add	r1, sp, #16
 8002e08:	185b      	adds	r3, r3, r1
 8002e0a:	212b      	movs	r1, #43	; 0x2b
 8002e0c:	7019      	strb	r1, [r3, #0]
 8002e0e:	9b03      	ldr	r3, [sp, #12]
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	2b2a      	cmp	r3, #42	; 0x2a
 8002e14:	d016      	beq.n	8002e44 <_vfiprintf_r+0x14c>
 8002e16:	2100      	movs	r1, #0
 8002e18:	68eb      	ldr	r3, [r5, #12]
 8002e1a:	9f03      	ldr	r7, [sp, #12]
 8002e1c:	783a      	ldrb	r2, [r7, #0]
 8002e1e:	1c78      	adds	r0, r7, #1
 8002e20:	3a30      	subs	r2, #48	; 0x30
 8002e22:	4684      	mov	ip, r0
 8002e24:	2a09      	cmp	r2, #9
 8002e26:	d94f      	bls.n	8002ec8 <_vfiprintf_r+0x1d0>
 8002e28:	2900      	cmp	r1, #0
 8002e2a:	d111      	bne.n	8002e50 <_vfiprintf_r+0x158>
 8002e2c:	e017      	b.n	8002e5e <_vfiprintf_r+0x166>
 8002e2e:	3701      	adds	r7, #1
 8002e30:	e7a9      	b.n	8002d86 <_vfiprintf_r+0x8e>
 8002e32:	4b49      	ldr	r3, [pc, #292]	; (8002f58 <_vfiprintf_r+0x260>)
 8002e34:	682a      	ldr	r2, [r5, #0]
 8002e36:	1ac0      	subs	r0, r0, r3
 8002e38:	2301      	movs	r3, #1
 8002e3a:	4083      	lsls	r3, r0
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	602b      	str	r3, [r5, #0]
 8002e40:	9703      	str	r7, [sp, #12]
 8002e42:	e7cb      	b.n	8002ddc <_vfiprintf_r+0xe4>
 8002e44:	9b07      	ldr	r3, [sp, #28]
 8002e46:	1d19      	adds	r1, r3, #4
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	9107      	str	r1, [sp, #28]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	db01      	blt.n	8002e54 <_vfiprintf_r+0x15c>
 8002e50:	930b      	str	r3, [sp, #44]	; 0x2c
 8002e52:	e004      	b.n	8002e5e <_vfiprintf_r+0x166>
 8002e54:	425b      	negs	r3, r3
 8002e56:	60eb      	str	r3, [r5, #12]
 8002e58:	2302      	movs	r3, #2
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	602b      	str	r3, [r5, #0]
 8002e5e:	783b      	ldrb	r3, [r7, #0]
 8002e60:	2b2e      	cmp	r3, #46	; 0x2e
 8002e62:	d10a      	bne.n	8002e7a <_vfiprintf_r+0x182>
 8002e64:	787b      	ldrb	r3, [r7, #1]
 8002e66:	2b2a      	cmp	r3, #42	; 0x2a
 8002e68:	d137      	bne.n	8002eda <_vfiprintf_r+0x1e2>
 8002e6a:	9b07      	ldr	r3, [sp, #28]
 8002e6c:	3702      	adds	r7, #2
 8002e6e:	1d1a      	adds	r2, r3, #4
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	9207      	str	r2, [sp, #28]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	db2d      	blt.n	8002ed4 <_vfiprintf_r+0x1dc>
 8002e78:	9309      	str	r3, [sp, #36]	; 0x24
 8002e7a:	2203      	movs	r2, #3
 8002e7c:	7839      	ldrb	r1, [r7, #0]
 8002e7e:	4837      	ldr	r0, [pc, #220]	; (8002f5c <_vfiprintf_r+0x264>)
 8002e80:	f000 fd1c 	bl	80038bc <memchr>
 8002e84:	2800      	cmp	r0, #0
 8002e86:	d007      	beq.n	8002e98 <_vfiprintf_r+0x1a0>
 8002e88:	4b34      	ldr	r3, [pc, #208]	; (8002f5c <_vfiprintf_r+0x264>)
 8002e8a:	682a      	ldr	r2, [r5, #0]
 8002e8c:	1ac0      	subs	r0, r0, r3
 8002e8e:	2340      	movs	r3, #64	; 0x40
 8002e90:	4083      	lsls	r3, r0
 8002e92:	4313      	orrs	r3, r2
 8002e94:	3701      	adds	r7, #1
 8002e96:	602b      	str	r3, [r5, #0]
 8002e98:	7839      	ldrb	r1, [r7, #0]
 8002e9a:	1c7b      	adds	r3, r7, #1
 8002e9c:	2206      	movs	r2, #6
 8002e9e:	4830      	ldr	r0, [pc, #192]	; (8002f60 <_vfiprintf_r+0x268>)
 8002ea0:	9303      	str	r3, [sp, #12]
 8002ea2:	7629      	strb	r1, [r5, #24]
 8002ea4:	f000 fd0a 	bl	80038bc <memchr>
 8002ea8:	2800      	cmp	r0, #0
 8002eaa:	d045      	beq.n	8002f38 <_vfiprintf_r+0x240>
 8002eac:	4b2d      	ldr	r3, [pc, #180]	; (8002f64 <_vfiprintf_r+0x26c>)
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d127      	bne.n	8002f02 <_vfiprintf_r+0x20a>
 8002eb2:	2207      	movs	r2, #7
 8002eb4:	9b07      	ldr	r3, [sp, #28]
 8002eb6:	3307      	adds	r3, #7
 8002eb8:	4393      	bics	r3, r2
 8002eba:	3308      	adds	r3, #8
 8002ebc:	9307      	str	r3, [sp, #28]
 8002ebe:	696b      	ldr	r3, [r5, #20]
 8002ec0:	9a04      	ldr	r2, [sp, #16]
 8002ec2:	189b      	adds	r3, r3, r2
 8002ec4:	616b      	str	r3, [r5, #20]
 8002ec6:	e75d      	b.n	8002d84 <_vfiprintf_r+0x8c>
 8002ec8:	210a      	movs	r1, #10
 8002eca:	434b      	muls	r3, r1
 8002ecc:	4667      	mov	r7, ip
 8002ece:	189b      	adds	r3, r3, r2
 8002ed0:	3909      	subs	r1, #9
 8002ed2:	e7a3      	b.n	8002e1c <_vfiprintf_r+0x124>
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	425b      	negs	r3, r3
 8002ed8:	e7ce      	b.n	8002e78 <_vfiprintf_r+0x180>
 8002eda:	2300      	movs	r3, #0
 8002edc:	001a      	movs	r2, r3
 8002ede:	3701      	adds	r7, #1
 8002ee0:	606b      	str	r3, [r5, #4]
 8002ee2:	7839      	ldrb	r1, [r7, #0]
 8002ee4:	1c78      	adds	r0, r7, #1
 8002ee6:	3930      	subs	r1, #48	; 0x30
 8002ee8:	4684      	mov	ip, r0
 8002eea:	2909      	cmp	r1, #9
 8002eec:	d903      	bls.n	8002ef6 <_vfiprintf_r+0x1fe>
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0c3      	beq.n	8002e7a <_vfiprintf_r+0x182>
 8002ef2:	9209      	str	r2, [sp, #36]	; 0x24
 8002ef4:	e7c1      	b.n	8002e7a <_vfiprintf_r+0x182>
 8002ef6:	230a      	movs	r3, #10
 8002ef8:	435a      	muls	r2, r3
 8002efa:	4667      	mov	r7, ip
 8002efc:	1852      	adds	r2, r2, r1
 8002efe:	3b09      	subs	r3, #9
 8002f00:	e7ef      	b.n	8002ee2 <_vfiprintf_r+0x1ea>
 8002f02:	ab07      	add	r3, sp, #28
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	0022      	movs	r2, r4
 8002f08:	0029      	movs	r1, r5
 8002f0a:	0030      	movs	r0, r6
 8002f0c:	4b16      	ldr	r3, [pc, #88]	; (8002f68 <_vfiprintf_r+0x270>)
 8002f0e:	e000      	b.n	8002f12 <_vfiprintf_r+0x21a>
 8002f10:	bf00      	nop
 8002f12:	9004      	str	r0, [sp, #16]
 8002f14:	9b04      	ldr	r3, [sp, #16]
 8002f16:	3301      	adds	r3, #1
 8002f18:	d1d1      	bne.n	8002ebe <_vfiprintf_r+0x1c6>
 8002f1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002f1c:	07db      	lsls	r3, r3, #31
 8002f1e:	d405      	bmi.n	8002f2c <_vfiprintf_r+0x234>
 8002f20:	89a3      	ldrh	r3, [r4, #12]
 8002f22:	059b      	lsls	r3, r3, #22
 8002f24:	d402      	bmi.n	8002f2c <_vfiprintf_r+0x234>
 8002f26:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002f28:	f000 fc5a 	bl	80037e0 <__retarget_lock_release_recursive>
 8002f2c:	89a3      	ldrh	r3, [r4, #12]
 8002f2e:	065b      	lsls	r3, r3, #25
 8002f30:	d500      	bpl.n	8002f34 <_vfiprintf_r+0x23c>
 8002f32:	e70a      	b.n	8002d4a <_vfiprintf_r+0x52>
 8002f34:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002f36:	e70a      	b.n	8002d4e <_vfiprintf_r+0x56>
 8002f38:	ab07      	add	r3, sp, #28
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	0022      	movs	r2, r4
 8002f3e:	0029      	movs	r1, r5
 8002f40:	0030      	movs	r0, r6
 8002f42:	4b09      	ldr	r3, [pc, #36]	; (8002f68 <_vfiprintf_r+0x270>)
 8002f44:	f000 f882 	bl	800304c <_printf_i>
 8002f48:	e7e3      	b.n	8002f12 <_vfiprintf_r+0x21a>
 8002f4a:	46c0      	nop			; (mov r8, r8)
 8002f4c:	08003c7c 	.word	0x08003c7c
 8002f50:	08003c9c 	.word	0x08003c9c
 8002f54:	08003c5c 	.word	0x08003c5c
 8002f58:	08003c26 	.word	0x08003c26
 8002f5c:	08003c2c 	.word	0x08003c2c
 8002f60:	08003c30 	.word	0x08003c30
 8002f64:	00000000 	.word	0x00000000
 8002f68:	08002cd3 	.word	0x08002cd3

08002f6c <_printf_common>:
 8002f6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002f6e:	0015      	movs	r5, r2
 8002f70:	9301      	str	r3, [sp, #4]
 8002f72:	688a      	ldr	r2, [r1, #8]
 8002f74:	690b      	ldr	r3, [r1, #16]
 8002f76:	000c      	movs	r4, r1
 8002f78:	9000      	str	r0, [sp, #0]
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	da00      	bge.n	8002f80 <_printf_common+0x14>
 8002f7e:	0013      	movs	r3, r2
 8002f80:	0022      	movs	r2, r4
 8002f82:	602b      	str	r3, [r5, #0]
 8002f84:	3243      	adds	r2, #67	; 0x43
 8002f86:	7812      	ldrb	r2, [r2, #0]
 8002f88:	2a00      	cmp	r2, #0
 8002f8a:	d001      	beq.n	8002f90 <_printf_common+0x24>
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	602b      	str	r3, [r5, #0]
 8002f90:	6823      	ldr	r3, [r4, #0]
 8002f92:	069b      	lsls	r3, r3, #26
 8002f94:	d502      	bpl.n	8002f9c <_printf_common+0x30>
 8002f96:	682b      	ldr	r3, [r5, #0]
 8002f98:	3302      	adds	r3, #2
 8002f9a:	602b      	str	r3, [r5, #0]
 8002f9c:	6822      	ldr	r2, [r4, #0]
 8002f9e:	2306      	movs	r3, #6
 8002fa0:	0017      	movs	r7, r2
 8002fa2:	401f      	ands	r7, r3
 8002fa4:	421a      	tst	r2, r3
 8002fa6:	d027      	beq.n	8002ff8 <_printf_common+0x8c>
 8002fa8:	0023      	movs	r3, r4
 8002faa:	3343      	adds	r3, #67	; 0x43
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	1e5a      	subs	r2, r3, #1
 8002fb0:	4193      	sbcs	r3, r2
 8002fb2:	6822      	ldr	r2, [r4, #0]
 8002fb4:	0692      	lsls	r2, r2, #26
 8002fb6:	d430      	bmi.n	800301a <_printf_common+0xae>
 8002fb8:	0022      	movs	r2, r4
 8002fba:	9901      	ldr	r1, [sp, #4]
 8002fbc:	9800      	ldr	r0, [sp, #0]
 8002fbe:	9e08      	ldr	r6, [sp, #32]
 8002fc0:	3243      	adds	r2, #67	; 0x43
 8002fc2:	47b0      	blx	r6
 8002fc4:	1c43      	adds	r3, r0, #1
 8002fc6:	d025      	beq.n	8003014 <_printf_common+0xa8>
 8002fc8:	2306      	movs	r3, #6
 8002fca:	6820      	ldr	r0, [r4, #0]
 8002fcc:	682a      	ldr	r2, [r5, #0]
 8002fce:	68e1      	ldr	r1, [r4, #12]
 8002fd0:	2500      	movs	r5, #0
 8002fd2:	4003      	ands	r3, r0
 8002fd4:	2b04      	cmp	r3, #4
 8002fd6:	d103      	bne.n	8002fe0 <_printf_common+0x74>
 8002fd8:	1a8d      	subs	r5, r1, r2
 8002fda:	43eb      	mvns	r3, r5
 8002fdc:	17db      	asrs	r3, r3, #31
 8002fde:	401d      	ands	r5, r3
 8002fe0:	68a3      	ldr	r3, [r4, #8]
 8002fe2:	6922      	ldr	r2, [r4, #16]
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	dd01      	ble.n	8002fec <_printf_common+0x80>
 8002fe8:	1a9b      	subs	r3, r3, r2
 8002fea:	18ed      	adds	r5, r5, r3
 8002fec:	2700      	movs	r7, #0
 8002fee:	42bd      	cmp	r5, r7
 8002ff0:	d120      	bne.n	8003034 <_printf_common+0xc8>
 8002ff2:	2000      	movs	r0, #0
 8002ff4:	e010      	b.n	8003018 <_printf_common+0xac>
 8002ff6:	3701      	adds	r7, #1
 8002ff8:	68e3      	ldr	r3, [r4, #12]
 8002ffa:	682a      	ldr	r2, [r5, #0]
 8002ffc:	1a9b      	subs	r3, r3, r2
 8002ffe:	42bb      	cmp	r3, r7
 8003000:	ddd2      	ble.n	8002fa8 <_printf_common+0x3c>
 8003002:	0022      	movs	r2, r4
 8003004:	2301      	movs	r3, #1
 8003006:	9901      	ldr	r1, [sp, #4]
 8003008:	9800      	ldr	r0, [sp, #0]
 800300a:	9e08      	ldr	r6, [sp, #32]
 800300c:	3219      	adds	r2, #25
 800300e:	47b0      	blx	r6
 8003010:	1c43      	adds	r3, r0, #1
 8003012:	d1f0      	bne.n	8002ff6 <_printf_common+0x8a>
 8003014:	2001      	movs	r0, #1
 8003016:	4240      	negs	r0, r0
 8003018:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800301a:	2030      	movs	r0, #48	; 0x30
 800301c:	18e1      	adds	r1, r4, r3
 800301e:	3143      	adds	r1, #67	; 0x43
 8003020:	7008      	strb	r0, [r1, #0]
 8003022:	0021      	movs	r1, r4
 8003024:	1c5a      	adds	r2, r3, #1
 8003026:	3145      	adds	r1, #69	; 0x45
 8003028:	7809      	ldrb	r1, [r1, #0]
 800302a:	18a2      	adds	r2, r4, r2
 800302c:	3243      	adds	r2, #67	; 0x43
 800302e:	3302      	adds	r3, #2
 8003030:	7011      	strb	r1, [r2, #0]
 8003032:	e7c1      	b.n	8002fb8 <_printf_common+0x4c>
 8003034:	0022      	movs	r2, r4
 8003036:	2301      	movs	r3, #1
 8003038:	9901      	ldr	r1, [sp, #4]
 800303a:	9800      	ldr	r0, [sp, #0]
 800303c:	9e08      	ldr	r6, [sp, #32]
 800303e:	321a      	adds	r2, #26
 8003040:	47b0      	blx	r6
 8003042:	1c43      	adds	r3, r0, #1
 8003044:	d0e6      	beq.n	8003014 <_printf_common+0xa8>
 8003046:	3701      	adds	r7, #1
 8003048:	e7d1      	b.n	8002fee <_printf_common+0x82>
	...

0800304c <_printf_i>:
 800304c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800304e:	b08b      	sub	sp, #44	; 0x2c
 8003050:	9206      	str	r2, [sp, #24]
 8003052:	000a      	movs	r2, r1
 8003054:	3243      	adds	r2, #67	; 0x43
 8003056:	9307      	str	r3, [sp, #28]
 8003058:	9005      	str	r0, [sp, #20]
 800305a:	9204      	str	r2, [sp, #16]
 800305c:	7e0a      	ldrb	r2, [r1, #24]
 800305e:	000c      	movs	r4, r1
 8003060:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003062:	2a78      	cmp	r2, #120	; 0x78
 8003064:	d807      	bhi.n	8003076 <_printf_i+0x2a>
 8003066:	2a62      	cmp	r2, #98	; 0x62
 8003068:	d809      	bhi.n	800307e <_printf_i+0x32>
 800306a:	2a00      	cmp	r2, #0
 800306c:	d100      	bne.n	8003070 <_printf_i+0x24>
 800306e:	e0c1      	b.n	80031f4 <_printf_i+0x1a8>
 8003070:	2a58      	cmp	r2, #88	; 0x58
 8003072:	d100      	bne.n	8003076 <_printf_i+0x2a>
 8003074:	e08c      	b.n	8003190 <_printf_i+0x144>
 8003076:	0026      	movs	r6, r4
 8003078:	3642      	adds	r6, #66	; 0x42
 800307a:	7032      	strb	r2, [r6, #0]
 800307c:	e022      	b.n	80030c4 <_printf_i+0x78>
 800307e:	0010      	movs	r0, r2
 8003080:	3863      	subs	r0, #99	; 0x63
 8003082:	2815      	cmp	r0, #21
 8003084:	d8f7      	bhi.n	8003076 <_printf_i+0x2a>
 8003086:	f7fd f83f 	bl	8000108 <__gnu_thumb1_case_shi>
 800308a:	0016      	.short	0x0016
 800308c:	fff6001f 	.word	0xfff6001f
 8003090:	fff6fff6 	.word	0xfff6fff6
 8003094:	001ffff6 	.word	0x001ffff6
 8003098:	fff6fff6 	.word	0xfff6fff6
 800309c:	fff6fff6 	.word	0xfff6fff6
 80030a0:	003600a8 	.word	0x003600a8
 80030a4:	fff6009a 	.word	0xfff6009a
 80030a8:	00b9fff6 	.word	0x00b9fff6
 80030ac:	0036fff6 	.word	0x0036fff6
 80030b0:	fff6fff6 	.word	0xfff6fff6
 80030b4:	009e      	.short	0x009e
 80030b6:	0026      	movs	r6, r4
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	3642      	adds	r6, #66	; 0x42
 80030bc:	1d11      	adds	r1, r2, #4
 80030be:	6019      	str	r1, [r3, #0]
 80030c0:	6813      	ldr	r3, [r2, #0]
 80030c2:	7033      	strb	r3, [r6, #0]
 80030c4:	2301      	movs	r3, #1
 80030c6:	e0a7      	b.n	8003218 <_printf_i+0x1cc>
 80030c8:	6808      	ldr	r0, [r1, #0]
 80030ca:	6819      	ldr	r1, [r3, #0]
 80030cc:	1d0a      	adds	r2, r1, #4
 80030ce:	0605      	lsls	r5, r0, #24
 80030d0:	d50b      	bpl.n	80030ea <_printf_i+0x9e>
 80030d2:	680d      	ldr	r5, [r1, #0]
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	2d00      	cmp	r5, #0
 80030d8:	da03      	bge.n	80030e2 <_printf_i+0x96>
 80030da:	232d      	movs	r3, #45	; 0x2d
 80030dc:	9a04      	ldr	r2, [sp, #16]
 80030de:	426d      	negs	r5, r5
 80030e0:	7013      	strb	r3, [r2, #0]
 80030e2:	4b61      	ldr	r3, [pc, #388]	; (8003268 <_printf_i+0x21c>)
 80030e4:	270a      	movs	r7, #10
 80030e6:	9303      	str	r3, [sp, #12]
 80030e8:	e01b      	b.n	8003122 <_printf_i+0xd6>
 80030ea:	680d      	ldr	r5, [r1, #0]
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	0641      	lsls	r1, r0, #25
 80030f0:	d5f1      	bpl.n	80030d6 <_printf_i+0x8a>
 80030f2:	b22d      	sxth	r5, r5
 80030f4:	e7ef      	b.n	80030d6 <_printf_i+0x8a>
 80030f6:	680d      	ldr	r5, [r1, #0]
 80030f8:	6819      	ldr	r1, [r3, #0]
 80030fa:	1d08      	adds	r0, r1, #4
 80030fc:	6018      	str	r0, [r3, #0]
 80030fe:	062e      	lsls	r6, r5, #24
 8003100:	d501      	bpl.n	8003106 <_printf_i+0xba>
 8003102:	680d      	ldr	r5, [r1, #0]
 8003104:	e003      	b.n	800310e <_printf_i+0xc2>
 8003106:	066d      	lsls	r5, r5, #25
 8003108:	d5fb      	bpl.n	8003102 <_printf_i+0xb6>
 800310a:	680d      	ldr	r5, [r1, #0]
 800310c:	b2ad      	uxth	r5, r5
 800310e:	4b56      	ldr	r3, [pc, #344]	; (8003268 <_printf_i+0x21c>)
 8003110:	2708      	movs	r7, #8
 8003112:	9303      	str	r3, [sp, #12]
 8003114:	2a6f      	cmp	r2, #111	; 0x6f
 8003116:	d000      	beq.n	800311a <_printf_i+0xce>
 8003118:	3702      	adds	r7, #2
 800311a:	0023      	movs	r3, r4
 800311c:	2200      	movs	r2, #0
 800311e:	3343      	adds	r3, #67	; 0x43
 8003120:	701a      	strb	r2, [r3, #0]
 8003122:	6863      	ldr	r3, [r4, #4]
 8003124:	60a3      	str	r3, [r4, #8]
 8003126:	2b00      	cmp	r3, #0
 8003128:	db03      	blt.n	8003132 <_printf_i+0xe6>
 800312a:	2204      	movs	r2, #4
 800312c:	6821      	ldr	r1, [r4, #0]
 800312e:	4391      	bics	r1, r2
 8003130:	6021      	str	r1, [r4, #0]
 8003132:	2d00      	cmp	r5, #0
 8003134:	d102      	bne.n	800313c <_printf_i+0xf0>
 8003136:	9e04      	ldr	r6, [sp, #16]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00c      	beq.n	8003156 <_printf_i+0x10a>
 800313c:	9e04      	ldr	r6, [sp, #16]
 800313e:	0028      	movs	r0, r5
 8003140:	0039      	movs	r1, r7
 8003142:	f7fd f871 	bl	8000228 <__aeabi_uidivmod>
 8003146:	9b03      	ldr	r3, [sp, #12]
 8003148:	3e01      	subs	r6, #1
 800314a:	5c5b      	ldrb	r3, [r3, r1]
 800314c:	7033      	strb	r3, [r6, #0]
 800314e:	002b      	movs	r3, r5
 8003150:	0005      	movs	r5, r0
 8003152:	429f      	cmp	r7, r3
 8003154:	d9f3      	bls.n	800313e <_printf_i+0xf2>
 8003156:	2f08      	cmp	r7, #8
 8003158:	d109      	bne.n	800316e <_printf_i+0x122>
 800315a:	6823      	ldr	r3, [r4, #0]
 800315c:	07db      	lsls	r3, r3, #31
 800315e:	d506      	bpl.n	800316e <_printf_i+0x122>
 8003160:	6863      	ldr	r3, [r4, #4]
 8003162:	6922      	ldr	r2, [r4, #16]
 8003164:	4293      	cmp	r3, r2
 8003166:	dc02      	bgt.n	800316e <_printf_i+0x122>
 8003168:	2330      	movs	r3, #48	; 0x30
 800316a:	3e01      	subs	r6, #1
 800316c:	7033      	strb	r3, [r6, #0]
 800316e:	9b04      	ldr	r3, [sp, #16]
 8003170:	1b9b      	subs	r3, r3, r6
 8003172:	6123      	str	r3, [r4, #16]
 8003174:	9b07      	ldr	r3, [sp, #28]
 8003176:	0021      	movs	r1, r4
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	9805      	ldr	r0, [sp, #20]
 800317c:	9b06      	ldr	r3, [sp, #24]
 800317e:	aa09      	add	r2, sp, #36	; 0x24
 8003180:	f7ff fef4 	bl	8002f6c <_printf_common>
 8003184:	1c43      	adds	r3, r0, #1
 8003186:	d14c      	bne.n	8003222 <_printf_i+0x1d6>
 8003188:	2001      	movs	r0, #1
 800318a:	4240      	negs	r0, r0
 800318c:	b00b      	add	sp, #44	; 0x2c
 800318e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003190:	3145      	adds	r1, #69	; 0x45
 8003192:	700a      	strb	r2, [r1, #0]
 8003194:	4a34      	ldr	r2, [pc, #208]	; (8003268 <_printf_i+0x21c>)
 8003196:	9203      	str	r2, [sp, #12]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	6821      	ldr	r1, [r4, #0]
 800319c:	ca20      	ldmia	r2!, {r5}
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	0608      	lsls	r0, r1, #24
 80031a2:	d516      	bpl.n	80031d2 <_printf_i+0x186>
 80031a4:	07cb      	lsls	r3, r1, #31
 80031a6:	d502      	bpl.n	80031ae <_printf_i+0x162>
 80031a8:	2320      	movs	r3, #32
 80031aa:	4319      	orrs	r1, r3
 80031ac:	6021      	str	r1, [r4, #0]
 80031ae:	2710      	movs	r7, #16
 80031b0:	2d00      	cmp	r5, #0
 80031b2:	d1b2      	bne.n	800311a <_printf_i+0xce>
 80031b4:	2320      	movs	r3, #32
 80031b6:	6822      	ldr	r2, [r4, #0]
 80031b8:	439a      	bics	r2, r3
 80031ba:	6022      	str	r2, [r4, #0]
 80031bc:	e7ad      	b.n	800311a <_printf_i+0xce>
 80031be:	2220      	movs	r2, #32
 80031c0:	6809      	ldr	r1, [r1, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	6022      	str	r2, [r4, #0]
 80031c6:	0022      	movs	r2, r4
 80031c8:	2178      	movs	r1, #120	; 0x78
 80031ca:	3245      	adds	r2, #69	; 0x45
 80031cc:	7011      	strb	r1, [r2, #0]
 80031ce:	4a27      	ldr	r2, [pc, #156]	; (800326c <_printf_i+0x220>)
 80031d0:	e7e1      	b.n	8003196 <_printf_i+0x14a>
 80031d2:	0648      	lsls	r0, r1, #25
 80031d4:	d5e6      	bpl.n	80031a4 <_printf_i+0x158>
 80031d6:	b2ad      	uxth	r5, r5
 80031d8:	e7e4      	b.n	80031a4 <_printf_i+0x158>
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	680d      	ldr	r5, [r1, #0]
 80031de:	1d10      	adds	r0, r2, #4
 80031e0:	6949      	ldr	r1, [r1, #20]
 80031e2:	6018      	str	r0, [r3, #0]
 80031e4:	6813      	ldr	r3, [r2, #0]
 80031e6:	062e      	lsls	r6, r5, #24
 80031e8:	d501      	bpl.n	80031ee <_printf_i+0x1a2>
 80031ea:	6019      	str	r1, [r3, #0]
 80031ec:	e002      	b.n	80031f4 <_printf_i+0x1a8>
 80031ee:	066d      	lsls	r5, r5, #25
 80031f0:	d5fb      	bpl.n	80031ea <_printf_i+0x19e>
 80031f2:	8019      	strh	r1, [r3, #0]
 80031f4:	2300      	movs	r3, #0
 80031f6:	9e04      	ldr	r6, [sp, #16]
 80031f8:	6123      	str	r3, [r4, #16]
 80031fa:	e7bb      	b.n	8003174 <_printf_i+0x128>
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	1d11      	adds	r1, r2, #4
 8003200:	6019      	str	r1, [r3, #0]
 8003202:	6816      	ldr	r6, [r2, #0]
 8003204:	2100      	movs	r1, #0
 8003206:	0030      	movs	r0, r6
 8003208:	6862      	ldr	r2, [r4, #4]
 800320a:	f000 fb57 	bl	80038bc <memchr>
 800320e:	2800      	cmp	r0, #0
 8003210:	d001      	beq.n	8003216 <_printf_i+0x1ca>
 8003212:	1b80      	subs	r0, r0, r6
 8003214:	6060      	str	r0, [r4, #4]
 8003216:	6863      	ldr	r3, [r4, #4]
 8003218:	6123      	str	r3, [r4, #16]
 800321a:	2300      	movs	r3, #0
 800321c:	9a04      	ldr	r2, [sp, #16]
 800321e:	7013      	strb	r3, [r2, #0]
 8003220:	e7a8      	b.n	8003174 <_printf_i+0x128>
 8003222:	6923      	ldr	r3, [r4, #16]
 8003224:	0032      	movs	r2, r6
 8003226:	9906      	ldr	r1, [sp, #24]
 8003228:	9805      	ldr	r0, [sp, #20]
 800322a:	9d07      	ldr	r5, [sp, #28]
 800322c:	47a8      	blx	r5
 800322e:	1c43      	adds	r3, r0, #1
 8003230:	d0aa      	beq.n	8003188 <_printf_i+0x13c>
 8003232:	6823      	ldr	r3, [r4, #0]
 8003234:	079b      	lsls	r3, r3, #30
 8003236:	d415      	bmi.n	8003264 <_printf_i+0x218>
 8003238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800323a:	68e0      	ldr	r0, [r4, #12]
 800323c:	4298      	cmp	r0, r3
 800323e:	daa5      	bge.n	800318c <_printf_i+0x140>
 8003240:	0018      	movs	r0, r3
 8003242:	e7a3      	b.n	800318c <_printf_i+0x140>
 8003244:	0022      	movs	r2, r4
 8003246:	2301      	movs	r3, #1
 8003248:	9906      	ldr	r1, [sp, #24]
 800324a:	9805      	ldr	r0, [sp, #20]
 800324c:	9e07      	ldr	r6, [sp, #28]
 800324e:	3219      	adds	r2, #25
 8003250:	47b0      	blx	r6
 8003252:	1c43      	adds	r3, r0, #1
 8003254:	d098      	beq.n	8003188 <_printf_i+0x13c>
 8003256:	3501      	adds	r5, #1
 8003258:	68e3      	ldr	r3, [r4, #12]
 800325a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800325c:	1a9b      	subs	r3, r3, r2
 800325e:	42ab      	cmp	r3, r5
 8003260:	dcf0      	bgt.n	8003244 <_printf_i+0x1f8>
 8003262:	e7e9      	b.n	8003238 <_printf_i+0x1ec>
 8003264:	2500      	movs	r5, #0
 8003266:	e7f7      	b.n	8003258 <_printf_i+0x20c>
 8003268:	08003c37 	.word	0x08003c37
 800326c:	08003c48 	.word	0x08003c48

08003270 <_sbrk_r>:
 8003270:	2300      	movs	r3, #0
 8003272:	b570      	push	{r4, r5, r6, lr}
 8003274:	4d06      	ldr	r5, [pc, #24]	; (8003290 <_sbrk_r+0x20>)
 8003276:	0004      	movs	r4, r0
 8003278:	0008      	movs	r0, r1
 800327a:	602b      	str	r3, [r5, #0]
 800327c:	f7fd fcc4 	bl	8000c08 <_sbrk>
 8003280:	1c43      	adds	r3, r0, #1
 8003282:	d103      	bne.n	800328c <_sbrk_r+0x1c>
 8003284:	682b      	ldr	r3, [r5, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d000      	beq.n	800328c <_sbrk_r+0x1c>
 800328a:	6023      	str	r3, [r4, #0]
 800328c:	bd70      	pop	{r4, r5, r6, pc}
 800328e:	46c0      	nop			; (mov r8, r8)
 8003290:	200000f4 	.word	0x200000f4

08003294 <__swbuf_r>:
 8003294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003296:	0005      	movs	r5, r0
 8003298:	000e      	movs	r6, r1
 800329a:	0014      	movs	r4, r2
 800329c:	2800      	cmp	r0, #0
 800329e:	d004      	beq.n	80032aa <__swbuf_r+0x16>
 80032a0:	6983      	ldr	r3, [r0, #24]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <__swbuf_r+0x16>
 80032a6:	f000 f9f9 	bl	800369c <__sinit>
 80032aa:	4b22      	ldr	r3, [pc, #136]	; (8003334 <__swbuf_r+0xa0>)
 80032ac:	429c      	cmp	r4, r3
 80032ae:	d12e      	bne.n	800330e <__swbuf_r+0x7a>
 80032b0:	686c      	ldr	r4, [r5, #4]
 80032b2:	69a3      	ldr	r3, [r4, #24]
 80032b4:	60a3      	str	r3, [r4, #8]
 80032b6:	89a3      	ldrh	r3, [r4, #12]
 80032b8:	071b      	lsls	r3, r3, #28
 80032ba:	d532      	bpl.n	8003322 <__swbuf_r+0x8e>
 80032bc:	6923      	ldr	r3, [r4, #16]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d02f      	beq.n	8003322 <__swbuf_r+0x8e>
 80032c2:	6823      	ldr	r3, [r4, #0]
 80032c4:	6922      	ldr	r2, [r4, #16]
 80032c6:	b2f7      	uxtb	r7, r6
 80032c8:	1a98      	subs	r0, r3, r2
 80032ca:	6963      	ldr	r3, [r4, #20]
 80032cc:	b2f6      	uxtb	r6, r6
 80032ce:	4283      	cmp	r3, r0
 80032d0:	dc05      	bgt.n	80032de <__swbuf_r+0x4a>
 80032d2:	0021      	movs	r1, r4
 80032d4:	0028      	movs	r0, r5
 80032d6:	f000 f93f 	bl	8003558 <_fflush_r>
 80032da:	2800      	cmp	r0, #0
 80032dc:	d127      	bne.n	800332e <__swbuf_r+0x9a>
 80032de:	68a3      	ldr	r3, [r4, #8]
 80032e0:	3001      	adds	r0, #1
 80032e2:	3b01      	subs	r3, #1
 80032e4:	60a3      	str	r3, [r4, #8]
 80032e6:	6823      	ldr	r3, [r4, #0]
 80032e8:	1c5a      	adds	r2, r3, #1
 80032ea:	6022      	str	r2, [r4, #0]
 80032ec:	701f      	strb	r7, [r3, #0]
 80032ee:	6963      	ldr	r3, [r4, #20]
 80032f0:	4283      	cmp	r3, r0
 80032f2:	d004      	beq.n	80032fe <__swbuf_r+0x6a>
 80032f4:	89a3      	ldrh	r3, [r4, #12]
 80032f6:	07db      	lsls	r3, r3, #31
 80032f8:	d507      	bpl.n	800330a <__swbuf_r+0x76>
 80032fa:	2e0a      	cmp	r6, #10
 80032fc:	d105      	bne.n	800330a <__swbuf_r+0x76>
 80032fe:	0021      	movs	r1, r4
 8003300:	0028      	movs	r0, r5
 8003302:	f000 f929 	bl	8003558 <_fflush_r>
 8003306:	2800      	cmp	r0, #0
 8003308:	d111      	bne.n	800332e <__swbuf_r+0x9a>
 800330a:	0030      	movs	r0, r6
 800330c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800330e:	4b0a      	ldr	r3, [pc, #40]	; (8003338 <__swbuf_r+0xa4>)
 8003310:	429c      	cmp	r4, r3
 8003312:	d101      	bne.n	8003318 <__swbuf_r+0x84>
 8003314:	68ac      	ldr	r4, [r5, #8]
 8003316:	e7cc      	b.n	80032b2 <__swbuf_r+0x1e>
 8003318:	4b08      	ldr	r3, [pc, #32]	; (800333c <__swbuf_r+0xa8>)
 800331a:	429c      	cmp	r4, r3
 800331c:	d1c9      	bne.n	80032b2 <__swbuf_r+0x1e>
 800331e:	68ec      	ldr	r4, [r5, #12]
 8003320:	e7c7      	b.n	80032b2 <__swbuf_r+0x1e>
 8003322:	0021      	movs	r1, r4
 8003324:	0028      	movs	r0, r5
 8003326:	f000 f80b 	bl	8003340 <__swsetup_r>
 800332a:	2800      	cmp	r0, #0
 800332c:	d0c9      	beq.n	80032c2 <__swbuf_r+0x2e>
 800332e:	2601      	movs	r6, #1
 8003330:	4276      	negs	r6, r6
 8003332:	e7ea      	b.n	800330a <__swbuf_r+0x76>
 8003334:	08003c7c 	.word	0x08003c7c
 8003338:	08003c9c 	.word	0x08003c9c
 800333c:	08003c5c 	.word	0x08003c5c

08003340 <__swsetup_r>:
 8003340:	4b37      	ldr	r3, [pc, #220]	; (8003420 <__swsetup_r+0xe0>)
 8003342:	b570      	push	{r4, r5, r6, lr}
 8003344:	681d      	ldr	r5, [r3, #0]
 8003346:	0006      	movs	r6, r0
 8003348:	000c      	movs	r4, r1
 800334a:	2d00      	cmp	r5, #0
 800334c:	d005      	beq.n	800335a <__swsetup_r+0x1a>
 800334e:	69ab      	ldr	r3, [r5, #24]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d102      	bne.n	800335a <__swsetup_r+0x1a>
 8003354:	0028      	movs	r0, r5
 8003356:	f000 f9a1 	bl	800369c <__sinit>
 800335a:	4b32      	ldr	r3, [pc, #200]	; (8003424 <__swsetup_r+0xe4>)
 800335c:	429c      	cmp	r4, r3
 800335e:	d10f      	bne.n	8003380 <__swsetup_r+0x40>
 8003360:	686c      	ldr	r4, [r5, #4]
 8003362:	230c      	movs	r3, #12
 8003364:	5ee2      	ldrsh	r2, [r4, r3]
 8003366:	b293      	uxth	r3, r2
 8003368:	0711      	lsls	r1, r2, #28
 800336a:	d42d      	bmi.n	80033c8 <__swsetup_r+0x88>
 800336c:	06d9      	lsls	r1, r3, #27
 800336e:	d411      	bmi.n	8003394 <__swsetup_r+0x54>
 8003370:	2309      	movs	r3, #9
 8003372:	2001      	movs	r0, #1
 8003374:	6033      	str	r3, [r6, #0]
 8003376:	3337      	adds	r3, #55	; 0x37
 8003378:	4313      	orrs	r3, r2
 800337a:	81a3      	strh	r3, [r4, #12]
 800337c:	4240      	negs	r0, r0
 800337e:	bd70      	pop	{r4, r5, r6, pc}
 8003380:	4b29      	ldr	r3, [pc, #164]	; (8003428 <__swsetup_r+0xe8>)
 8003382:	429c      	cmp	r4, r3
 8003384:	d101      	bne.n	800338a <__swsetup_r+0x4a>
 8003386:	68ac      	ldr	r4, [r5, #8]
 8003388:	e7eb      	b.n	8003362 <__swsetup_r+0x22>
 800338a:	4b28      	ldr	r3, [pc, #160]	; (800342c <__swsetup_r+0xec>)
 800338c:	429c      	cmp	r4, r3
 800338e:	d1e8      	bne.n	8003362 <__swsetup_r+0x22>
 8003390:	68ec      	ldr	r4, [r5, #12]
 8003392:	e7e6      	b.n	8003362 <__swsetup_r+0x22>
 8003394:	075b      	lsls	r3, r3, #29
 8003396:	d513      	bpl.n	80033c0 <__swsetup_r+0x80>
 8003398:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800339a:	2900      	cmp	r1, #0
 800339c:	d008      	beq.n	80033b0 <__swsetup_r+0x70>
 800339e:	0023      	movs	r3, r4
 80033a0:	3344      	adds	r3, #68	; 0x44
 80033a2:	4299      	cmp	r1, r3
 80033a4:	d002      	beq.n	80033ac <__swsetup_r+0x6c>
 80033a6:	0030      	movs	r0, r6
 80033a8:	f7ff fb9c 	bl	8002ae4 <_free_r>
 80033ac:	2300      	movs	r3, #0
 80033ae:	6363      	str	r3, [r4, #52]	; 0x34
 80033b0:	2224      	movs	r2, #36	; 0x24
 80033b2:	89a3      	ldrh	r3, [r4, #12]
 80033b4:	4393      	bics	r3, r2
 80033b6:	81a3      	strh	r3, [r4, #12]
 80033b8:	2300      	movs	r3, #0
 80033ba:	6063      	str	r3, [r4, #4]
 80033bc:	6923      	ldr	r3, [r4, #16]
 80033be:	6023      	str	r3, [r4, #0]
 80033c0:	2308      	movs	r3, #8
 80033c2:	89a2      	ldrh	r2, [r4, #12]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	81a3      	strh	r3, [r4, #12]
 80033c8:	6923      	ldr	r3, [r4, #16]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10b      	bne.n	80033e6 <__swsetup_r+0xa6>
 80033ce:	21a0      	movs	r1, #160	; 0xa0
 80033d0:	2280      	movs	r2, #128	; 0x80
 80033d2:	89a3      	ldrh	r3, [r4, #12]
 80033d4:	0089      	lsls	r1, r1, #2
 80033d6:	0092      	lsls	r2, r2, #2
 80033d8:	400b      	ands	r3, r1
 80033da:	4293      	cmp	r3, r2
 80033dc:	d003      	beq.n	80033e6 <__swsetup_r+0xa6>
 80033de:	0021      	movs	r1, r4
 80033e0:	0030      	movs	r0, r6
 80033e2:	f000 fa27 	bl	8003834 <__smakebuf_r>
 80033e6:	220c      	movs	r2, #12
 80033e8:	5ea3      	ldrsh	r3, [r4, r2]
 80033ea:	2001      	movs	r0, #1
 80033ec:	001a      	movs	r2, r3
 80033ee:	b299      	uxth	r1, r3
 80033f0:	4002      	ands	r2, r0
 80033f2:	4203      	tst	r3, r0
 80033f4:	d00f      	beq.n	8003416 <__swsetup_r+0xd6>
 80033f6:	2200      	movs	r2, #0
 80033f8:	60a2      	str	r2, [r4, #8]
 80033fa:	6962      	ldr	r2, [r4, #20]
 80033fc:	4252      	negs	r2, r2
 80033fe:	61a2      	str	r2, [r4, #24]
 8003400:	2000      	movs	r0, #0
 8003402:	6922      	ldr	r2, [r4, #16]
 8003404:	4282      	cmp	r2, r0
 8003406:	d1ba      	bne.n	800337e <__swsetup_r+0x3e>
 8003408:	060a      	lsls	r2, r1, #24
 800340a:	d5b8      	bpl.n	800337e <__swsetup_r+0x3e>
 800340c:	2240      	movs	r2, #64	; 0x40
 800340e:	4313      	orrs	r3, r2
 8003410:	81a3      	strh	r3, [r4, #12]
 8003412:	3801      	subs	r0, #1
 8003414:	e7b3      	b.n	800337e <__swsetup_r+0x3e>
 8003416:	0788      	lsls	r0, r1, #30
 8003418:	d400      	bmi.n	800341c <__swsetup_r+0xdc>
 800341a:	6962      	ldr	r2, [r4, #20]
 800341c:	60a2      	str	r2, [r4, #8]
 800341e:	e7ef      	b.n	8003400 <__swsetup_r+0xc0>
 8003420:	2000000c 	.word	0x2000000c
 8003424:	08003c7c 	.word	0x08003c7c
 8003428:	08003c9c 	.word	0x08003c9c
 800342c:	08003c5c 	.word	0x08003c5c

08003430 <abort>:
 8003430:	2006      	movs	r0, #6
 8003432:	b510      	push	{r4, lr}
 8003434:	f000 fa88 	bl	8003948 <raise>
 8003438:	2001      	movs	r0, #1
 800343a:	f7fd fb74 	bl	8000b26 <_exit>
	...

08003440 <__sflush_r>:
 8003440:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003442:	898b      	ldrh	r3, [r1, #12]
 8003444:	0005      	movs	r5, r0
 8003446:	000c      	movs	r4, r1
 8003448:	071a      	lsls	r2, r3, #28
 800344a:	d45f      	bmi.n	800350c <__sflush_r+0xcc>
 800344c:	684a      	ldr	r2, [r1, #4]
 800344e:	2a00      	cmp	r2, #0
 8003450:	dc04      	bgt.n	800345c <__sflush_r+0x1c>
 8003452:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8003454:	2a00      	cmp	r2, #0
 8003456:	dc01      	bgt.n	800345c <__sflush_r+0x1c>
 8003458:	2000      	movs	r0, #0
 800345a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800345c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800345e:	2f00      	cmp	r7, #0
 8003460:	d0fa      	beq.n	8003458 <__sflush_r+0x18>
 8003462:	2200      	movs	r2, #0
 8003464:	2180      	movs	r1, #128	; 0x80
 8003466:	682e      	ldr	r6, [r5, #0]
 8003468:	602a      	str	r2, [r5, #0]
 800346a:	001a      	movs	r2, r3
 800346c:	0149      	lsls	r1, r1, #5
 800346e:	400a      	ands	r2, r1
 8003470:	420b      	tst	r3, r1
 8003472:	d034      	beq.n	80034de <__sflush_r+0x9e>
 8003474:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003476:	89a3      	ldrh	r3, [r4, #12]
 8003478:	075b      	lsls	r3, r3, #29
 800347a:	d506      	bpl.n	800348a <__sflush_r+0x4a>
 800347c:	6863      	ldr	r3, [r4, #4]
 800347e:	1ac0      	subs	r0, r0, r3
 8003480:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <__sflush_r+0x4a>
 8003486:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003488:	1ac0      	subs	r0, r0, r3
 800348a:	0002      	movs	r2, r0
 800348c:	6a21      	ldr	r1, [r4, #32]
 800348e:	2300      	movs	r3, #0
 8003490:	0028      	movs	r0, r5
 8003492:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003494:	47b8      	blx	r7
 8003496:	89a1      	ldrh	r1, [r4, #12]
 8003498:	1c43      	adds	r3, r0, #1
 800349a:	d106      	bne.n	80034aa <__sflush_r+0x6a>
 800349c:	682b      	ldr	r3, [r5, #0]
 800349e:	2b1d      	cmp	r3, #29
 80034a0:	d831      	bhi.n	8003506 <__sflush_r+0xc6>
 80034a2:	4a2c      	ldr	r2, [pc, #176]	; (8003554 <__sflush_r+0x114>)
 80034a4:	40da      	lsrs	r2, r3
 80034a6:	07d3      	lsls	r3, r2, #31
 80034a8:	d52d      	bpl.n	8003506 <__sflush_r+0xc6>
 80034aa:	2300      	movs	r3, #0
 80034ac:	6063      	str	r3, [r4, #4]
 80034ae:	6923      	ldr	r3, [r4, #16]
 80034b0:	6023      	str	r3, [r4, #0]
 80034b2:	04cb      	lsls	r3, r1, #19
 80034b4:	d505      	bpl.n	80034c2 <__sflush_r+0x82>
 80034b6:	1c43      	adds	r3, r0, #1
 80034b8:	d102      	bne.n	80034c0 <__sflush_r+0x80>
 80034ba:	682b      	ldr	r3, [r5, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d100      	bne.n	80034c2 <__sflush_r+0x82>
 80034c0:	6560      	str	r0, [r4, #84]	; 0x54
 80034c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80034c4:	602e      	str	r6, [r5, #0]
 80034c6:	2900      	cmp	r1, #0
 80034c8:	d0c6      	beq.n	8003458 <__sflush_r+0x18>
 80034ca:	0023      	movs	r3, r4
 80034cc:	3344      	adds	r3, #68	; 0x44
 80034ce:	4299      	cmp	r1, r3
 80034d0:	d002      	beq.n	80034d8 <__sflush_r+0x98>
 80034d2:	0028      	movs	r0, r5
 80034d4:	f7ff fb06 	bl	8002ae4 <_free_r>
 80034d8:	2000      	movs	r0, #0
 80034da:	6360      	str	r0, [r4, #52]	; 0x34
 80034dc:	e7bd      	b.n	800345a <__sflush_r+0x1a>
 80034de:	2301      	movs	r3, #1
 80034e0:	0028      	movs	r0, r5
 80034e2:	6a21      	ldr	r1, [r4, #32]
 80034e4:	47b8      	blx	r7
 80034e6:	1c43      	adds	r3, r0, #1
 80034e8:	d1c5      	bne.n	8003476 <__sflush_r+0x36>
 80034ea:	682b      	ldr	r3, [r5, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0c2      	beq.n	8003476 <__sflush_r+0x36>
 80034f0:	2b1d      	cmp	r3, #29
 80034f2:	d001      	beq.n	80034f8 <__sflush_r+0xb8>
 80034f4:	2b16      	cmp	r3, #22
 80034f6:	d101      	bne.n	80034fc <__sflush_r+0xbc>
 80034f8:	602e      	str	r6, [r5, #0]
 80034fa:	e7ad      	b.n	8003458 <__sflush_r+0x18>
 80034fc:	2340      	movs	r3, #64	; 0x40
 80034fe:	89a2      	ldrh	r2, [r4, #12]
 8003500:	4313      	orrs	r3, r2
 8003502:	81a3      	strh	r3, [r4, #12]
 8003504:	e7a9      	b.n	800345a <__sflush_r+0x1a>
 8003506:	2340      	movs	r3, #64	; 0x40
 8003508:	430b      	orrs	r3, r1
 800350a:	e7fa      	b.n	8003502 <__sflush_r+0xc2>
 800350c:	690f      	ldr	r7, [r1, #16]
 800350e:	2f00      	cmp	r7, #0
 8003510:	d0a2      	beq.n	8003458 <__sflush_r+0x18>
 8003512:	680a      	ldr	r2, [r1, #0]
 8003514:	600f      	str	r7, [r1, #0]
 8003516:	1bd2      	subs	r2, r2, r7
 8003518:	9201      	str	r2, [sp, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	079b      	lsls	r3, r3, #30
 800351e:	d100      	bne.n	8003522 <__sflush_r+0xe2>
 8003520:	694a      	ldr	r2, [r1, #20]
 8003522:	60a2      	str	r2, [r4, #8]
 8003524:	9b01      	ldr	r3, [sp, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	dc00      	bgt.n	800352c <__sflush_r+0xec>
 800352a:	e795      	b.n	8003458 <__sflush_r+0x18>
 800352c:	003a      	movs	r2, r7
 800352e:	0028      	movs	r0, r5
 8003530:	9b01      	ldr	r3, [sp, #4]
 8003532:	6a21      	ldr	r1, [r4, #32]
 8003534:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003536:	47b0      	blx	r6
 8003538:	2800      	cmp	r0, #0
 800353a:	dc06      	bgt.n	800354a <__sflush_r+0x10a>
 800353c:	2340      	movs	r3, #64	; 0x40
 800353e:	2001      	movs	r0, #1
 8003540:	89a2      	ldrh	r2, [r4, #12]
 8003542:	4240      	negs	r0, r0
 8003544:	4313      	orrs	r3, r2
 8003546:	81a3      	strh	r3, [r4, #12]
 8003548:	e787      	b.n	800345a <__sflush_r+0x1a>
 800354a:	9b01      	ldr	r3, [sp, #4]
 800354c:	183f      	adds	r7, r7, r0
 800354e:	1a1b      	subs	r3, r3, r0
 8003550:	9301      	str	r3, [sp, #4]
 8003552:	e7e7      	b.n	8003524 <__sflush_r+0xe4>
 8003554:	20400001 	.word	0x20400001

08003558 <_fflush_r>:
 8003558:	690b      	ldr	r3, [r1, #16]
 800355a:	b570      	push	{r4, r5, r6, lr}
 800355c:	0005      	movs	r5, r0
 800355e:	000c      	movs	r4, r1
 8003560:	2b00      	cmp	r3, #0
 8003562:	d102      	bne.n	800356a <_fflush_r+0x12>
 8003564:	2500      	movs	r5, #0
 8003566:	0028      	movs	r0, r5
 8003568:	bd70      	pop	{r4, r5, r6, pc}
 800356a:	2800      	cmp	r0, #0
 800356c:	d004      	beq.n	8003578 <_fflush_r+0x20>
 800356e:	6983      	ldr	r3, [r0, #24]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <_fflush_r+0x20>
 8003574:	f000 f892 	bl	800369c <__sinit>
 8003578:	4b14      	ldr	r3, [pc, #80]	; (80035cc <_fflush_r+0x74>)
 800357a:	429c      	cmp	r4, r3
 800357c:	d11b      	bne.n	80035b6 <_fflush_r+0x5e>
 800357e:	686c      	ldr	r4, [r5, #4]
 8003580:	220c      	movs	r2, #12
 8003582:	5ea3      	ldrsh	r3, [r4, r2]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d0ed      	beq.n	8003564 <_fflush_r+0xc>
 8003588:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800358a:	07d2      	lsls	r2, r2, #31
 800358c:	d404      	bmi.n	8003598 <_fflush_r+0x40>
 800358e:	059b      	lsls	r3, r3, #22
 8003590:	d402      	bmi.n	8003598 <_fflush_r+0x40>
 8003592:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003594:	f000 f923 	bl	80037de <__retarget_lock_acquire_recursive>
 8003598:	0028      	movs	r0, r5
 800359a:	0021      	movs	r1, r4
 800359c:	f7ff ff50 	bl	8003440 <__sflush_r>
 80035a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80035a2:	0005      	movs	r5, r0
 80035a4:	07db      	lsls	r3, r3, #31
 80035a6:	d4de      	bmi.n	8003566 <_fflush_r+0xe>
 80035a8:	89a3      	ldrh	r3, [r4, #12]
 80035aa:	059b      	lsls	r3, r3, #22
 80035ac:	d4db      	bmi.n	8003566 <_fflush_r+0xe>
 80035ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80035b0:	f000 f916 	bl	80037e0 <__retarget_lock_release_recursive>
 80035b4:	e7d7      	b.n	8003566 <_fflush_r+0xe>
 80035b6:	4b06      	ldr	r3, [pc, #24]	; (80035d0 <_fflush_r+0x78>)
 80035b8:	429c      	cmp	r4, r3
 80035ba:	d101      	bne.n	80035c0 <_fflush_r+0x68>
 80035bc:	68ac      	ldr	r4, [r5, #8]
 80035be:	e7df      	b.n	8003580 <_fflush_r+0x28>
 80035c0:	4b04      	ldr	r3, [pc, #16]	; (80035d4 <_fflush_r+0x7c>)
 80035c2:	429c      	cmp	r4, r3
 80035c4:	d1dc      	bne.n	8003580 <_fflush_r+0x28>
 80035c6:	68ec      	ldr	r4, [r5, #12]
 80035c8:	e7da      	b.n	8003580 <_fflush_r+0x28>
 80035ca:	46c0      	nop			; (mov r8, r8)
 80035cc:	08003c7c 	.word	0x08003c7c
 80035d0:	08003c9c 	.word	0x08003c9c
 80035d4:	08003c5c 	.word	0x08003c5c

080035d8 <std>:
 80035d8:	2300      	movs	r3, #0
 80035da:	b510      	push	{r4, lr}
 80035dc:	0004      	movs	r4, r0
 80035de:	6003      	str	r3, [r0, #0]
 80035e0:	6043      	str	r3, [r0, #4]
 80035e2:	6083      	str	r3, [r0, #8]
 80035e4:	8181      	strh	r1, [r0, #12]
 80035e6:	6643      	str	r3, [r0, #100]	; 0x64
 80035e8:	0019      	movs	r1, r3
 80035ea:	81c2      	strh	r2, [r0, #14]
 80035ec:	6103      	str	r3, [r0, #16]
 80035ee:	6143      	str	r3, [r0, #20]
 80035f0:	6183      	str	r3, [r0, #24]
 80035f2:	2208      	movs	r2, #8
 80035f4:	305c      	adds	r0, #92	; 0x5c
 80035f6:	f7ff f9f7 	bl	80029e8 <memset>
 80035fa:	4b05      	ldr	r3, [pc, #20]	; (8003610 <std+0x38>)
 80035fc:	6224      	str	r4, [r4, #32]
 80035fe:	6263      	str	r3, [r4, #36]	; 0x24
 8003600:	4b04      	ldr	r3, [pc, #16]	; (8003614 <std+0x3c>)
 8003602:	62a3      	str	r3, [r4, #40]	; 0x28
 8003604:	4b04      	ldr	r3, [pc, #16]	; (8003618 <std+0x40>)
 8003606:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003608:	4b04      	ldr	r3, [pc, #16]	; (800361c <std+0x44>)
 800360a:	6323      	str	r3, [r4, #48]	; 0x30
 800360c:	bd10      	pop	{r4, pc}
 800360e:	46c0      	nop			; (mov r8, r8)
 8003610:	08003989 	.word	0x08003989
 8003614:	080039b1 	.word	0x080039b1
 8003618:	080039e9 	.word	0x080039e9
 800361c:	08003a15 	.word	0x08003a15

08003620 <_cleanup_r>:
 8003620:	b510      	push	{r4, lr}
 8003622:	4902      	ldr	r1, [pc, #8]	; (800362c <_cleanup_r+0xc>)
 8003624:	f000 f8ba 	bl	800379c <_fwalk_reent>
 8003628:	bd10      	pop	{r4, pc}
 800362a:	46c0      	nop			; (mov r8, r8)
 800362c:	08003559 	.word	0x08003559

08003630 <__sfmoreglue>:
 8003630:	b570      	push	{r4, r5, r6, lr}
 8003632:	2568      	movs	r5, #104	; 0x68
 8003634:	1e4a      	subs	r2, r1, #1
 8003636:	4355      	muls	r5, r2
 8003638:	000e      	movs	r6, r1
 800363a:	0029      	movs	r1, r5
 800363c:	3174      	adds	r1, #116	; 0x74
 800363e:	f7ff fabd 	bl	8002bbc <_malloc_r>
 8003642:	1e04      	subs	r4, r0, #0
 8003644:	d008      	beq.n	8003658 <__sfmoreglue+0x28>
 8003646:	2100      	movs	r1, #0
 8003648:	002a      	movs	r2, r5
 800364a:	6001      	str	r1, [r0, #0]
 800364c:	6046      	str	r6, [r0, #4]
 800364e:	300c      	adds	r0, #12
 8003650:	60a0      	str	r0, [r4, #8]
 8003652:	3268      	adds	r2, #104	; 0x68
 8003654:	f7ff f9c8 	bl	80029e8 <memset>
 8003658:	0020      	movs	r0, r4
 800365a:	bd70      	pop	{r4, r5, r6, pc}

0800365c <__sfp_lock_acquire>:
 800365c:	b510      	push	{r4, lr}
 800365e:	4802      	ldr	r0, [pc, #8]	; (8003668 <__sfp_lock_acquire+0xc>)
 8003660:	f000 f8bd 	bl	80037de <__retarget_lock_acquire_recursive>
 8003664:	bd10      	pop	{r4, pc}
 8003666:	46c0      	nop			; (mov r8, r8)
 8003668:	200000f1 	.word	0x200000f1

0800366c <__sfp_lock_release>:
 800366c:	b510      	push	{r4, lr}
 800366e:	4802      	ldr	r0, [pc, #8]	; (8003678 <__sfp_lock_release+0xc>)
 8003670:	f000 f8b6 	bl	80037e0 <__retarget_lock_release_recursive>
 8003674:	bd10      	pop	{r4, pc}
 8003676:	46c0      	nop			; (mov r8, r8)
 8003678:	200000f1 	.word	0x200000f1

0800367c <__sinit_lock_acquire>:
 800367c:	b510      	push	{r4, lr}
 800367e:	4802      	ldr	r0, [pc, #8]	; (8003688 <__sinit_lock_acquire+0xc>)
 8003680:	f000 f8ad 	bl	80037de <__retarget_lock_acquire_recursive>
 8003684:	bd10      	pop	{r4, pc}
 8003686:	46c0      	nop			; (mov r8, r8)
 8003688:	200000f2 	.word	0x200000f2

0800368c <__sinit_lock_release>:
 800368c:	b510      	push	{r4, lr}
 800368e:	4802      	ldr	r0, [pc, #8]	; (8003698 <__sinit_lock_release+0xc>)
 8003690:	f000 f8a6 	bl	80037e0 <__retarget_lock_release_recursive>
 8003694:	bd10      	pop	{r4, pc}
 8003696:	46c0      	nop			; (mov r8, r8)
 8003698:	200000f2 	.word	0x200000f2

0800369c <__sinit>:
 800369c:	b513      	push	{r0, r1, r4, lr}
 800369e:	0004      	movs	r4, r0
 80036a0:	f7ff ffec 	bl	800367c <__sinit_lock_acquire>
 80036a4:	69a3      	ldr	r3, [r4, #24]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d002      	beq.n	80036b0 <__sinit+0x14>
 80036aa:	f7ff ffef 	bl	800368c <__sinit_lock_release>
 80036ae:	bd13      	pop	{r0, r1, r4, pc}
 80036b0:	64a3      	str	r3, [r4, #72]	; 0x48
 80036b2:	64e3      	str	r3, [r4, #76]	; 0x4c
 80036b4:	6523      	str	r3, [r4, #80]	; 0x50
 80036b6:	4b13      	ldr	r3, [pc, #76]	; (8003704 <__sinit+0x68>)
 80036b8:	4a13      	ldr	r2, [pc, #76]	; (8003708 <__sinit+0x6c>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80036be:	9301      	str	r3, [sp, #4]
 80036c0:	42a3      	cmp	r3, r4
 80036c2:	d101      	bne.n	80036c8 <__sinit+0x2c>
 80036c4:	2301      	movs	r3, #1
 80036c6:	61a3      	str	r3, [r4, #24]
 80036c8:	0020      	movs	r0, r4
 80036ca:	f000 f81f 	bl	800370c <__sfp>
 80036ce:	6060      	str	r0, [r4, #4]
 80036d0:	0020      	movs	r0, r4
 80036d2:	f000 f81b 	bl	800370c <__sfp>
 80036d6:	60a0      	str	r0, [r4, #8]
 80036d8:	0020      	movs	r0, r4
 80036da:	f000 f817 	bl	800370c <__sfp>
 80036de:	2200      	movs	r2, #0
 80036e0:	2104      	movs	r1, #4
 80036e2:	60e0      	str	r0, [r4, #12]
 80036e4:	6860      	ldr	r0, [r4, #4]
 80036e6:	f7ff ff77 	bl	80035d8 <std>
 80036ea:	2201      	movs	r2, #1
 80036ec:	2109      	movs	r1, #9
 80036ee:	68a0      	ldr	r0, [r4, #8]
 80036f0:	f7ff ff72 	bl	80035d8 <std>
 80036f4:	2202      	movs	r2, #2
 80036f6:	2112      	movs	r1, #18
 80036f8:	68e0      	ldr	r0, [r4, #12]
 80036fa:	f7ff ff6d 	bl	80035d8 <std>
 80036fe:	2301      	movs	r3, #1
 8003700:	61a3      	str	r3, [r4, #24]
 8003702:	e7d2      	b.n	80036aa <__sinit+0xe>
 8003704:	08003b74 	.word	0x08003b74
 8003708:	08003621 	.word	0x08003621

0800370c <__sfp>:
 800370c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800370e:	0007      	movs	r7, r0
 8003710:	f7ff ffa4 	bl	800365c <__sfp_lock_acquire>
 8003714:	4b1f      	ldr	r3, [pc, #124]	; (8003794 <__sfp+0x88>)
 8003716:	681e      	ldr	r6, [r3, #0]
 8003718:	69b3      	ldr	r3, [r6, #24]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d102      	bne.n	8003724 <__sfp+0x18>
 800371e:	0030      	movs	r0, r6
 8003720:	f7ff ffbc 	bl	800369c <__sinit>
 8003724:	3648      	adds	r6, #72	; 0x48
 8003726:	68b4      	ldr	r4, [r6, #8]
 8003728:	6873      	ldr	r3, [r6, #4]
 800372a:	3b01      	subs	r3, #1
 800372c:	d504      	bpl.n	8003738 <__sfp+0x2c>
 800372e:	6833      	ldr	r3, [r6, #0]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d022      	beq.n	800377a <__sfp+0x6e>
 8003734:	6836      	ldr	r6, [r6, #0]
 8003736:	e7f6      	b.n	8003726 <__sfp+0x1a>
 8003738:	220c      	movs	r2, #12
 800373a:	5ea5      	ldrsh	r5, [r4, r2]
 800373c:	2d00      	cmp	r5, #0
 800373e:	d11a      	bne.n	8003776 <__sfp+0x6a>
 8003740:	0020      	movs	r0, r4
 8003742:	4b15      	ldr	r3, [pc, #84]	; (8003798 <__sfp+0x8c>)
 8003744:	3058      	adds	r0, #88	; 0x58
 8003746:	60e3      	str	r3, [r4, #12]
 8003748:	6665      	str	r5, [r4, #100]	; 0x64
 800374a:	f000 f847 	bl	80037dc <__retarget_lock_init_recursive>
 800374e:	f7ff ff8d 	bl	800366c <__sfp_lock_release>
 8003752:	0020      	movs	r0, r4
 8003754:	2208      	movs	r2, #8
 8003756:	0029      	movs	r1, r5
 8003758:	6025      	str	r5, [r4, #0]
 800375a:	60a5      	str	r5, [r4, #8]
 800375c:	6065      	str	r5, [r4, #4]
 800375e:	6125      	str	r5, [r4, #16]
 8003760:	6165      	str	r5, [r4, #20]
 8003762:	61a5      	str	r5, [r4, #24]
 8003764:	305c      	adds	r0, #92	; 0x5c
 8003766:	f7ff f93f 	bl	80029e8 <memset>
 800376a:	6365      	str	r5, [r4, #52]	; 0x34
 800376c:	63a5      	str	r5, [r4, #56]	; 0x38
 800376e:	64a5      	str	r5, [r4, #72]	; 0x48
 8003770:	64e5      	str	r5, [r4, #76]	; 0x4c
 8003772:	0020      	movs	r0, r4
 8003774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003776:	3468      	adds	r4, #104	; 0x68
 8003778:	e7d7      	b.n	800372a <__sfp+0x1e>
 800377a:	2104      	movs	r1, #4
 800377c:	0038      	movs	r0, r7
 800377e:	f7ff ff57 	bl	8003630 <__sfmoreglue>
 8003782:	1e04      	subs	r4, r0, #0
 8003784:	6030      	str	r0, [r6, #0]
 8003786:	d1d5      	bne.n	8003734 <__sfp+0x28>
 8003788:	f7ff ff70 	bl	800366c <__sfp_lock_release>
 800378c:	230c      	movs	r3, #12
 800378e:	603b      	str	r3, [r7, #0]
 8003790:	e7ef      	b.n	8003772 <__sfp+0x66>
 8003792:	46c0      	nop			; (mov r8, r8)
 8003794:	08003b74 	.word	0x08003b74
 8003798:	ffff0001 	.word	0xffff0001

0800379c <_fwalk_reent>:
 800379c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800379e:	0004      	movs	r4, r0
 80037a0:	0006      	movs	r6, r0
 80037a2:	2700      	movs	r7, #0
 80037a4:	9101      	str	r1, [sp, #4]
 80037a6:	3448      	adds	r4, #72	; 0x48
 80037a8:	6863      	ldr	r3, [r4, #4]
 80037aa:	68a5      	ldr	r5, [r4, #8]
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	9b00      	ldr	r3, [sp, #0]
 80037b0:	3b01      	subs	r3, #1
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	d504      	bpl.n	80037c0 <_fwalk_reent+0x24>
 80037b6:	6824      	ldr	r4, [r4, #0]
 80037b8:	2c00      	cmp	r4, #0
 80037ba:	d1f5      	bne.n	80037a8 <_fwalk_reent+0xc>
 80037bc:	0038      	movs	r0, r7
 80037be:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80037c0:	89ab      	ldrh	r3, [r5, #12]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d908      	bls.n	80037d8 <_fwalk_reent+0x3c>
 80037c6:	220e      	movs	r2, #14
 80037c8:	5eab      	ldrsh	r3, [r5, r2]
 80037ca:	3301      	adds	r3, #1
 80037cc:	d004      	beq.n	80037d8 <_fwalk_reent+0x3c>
 80037ce:	0029      	movs	r1, r5
 80037d0:	0030      	movs	r0, r6
 80037d2:	9b01      	ldr	r3, [sp, #4]
 80037d4:	4798      	blx	r3
 80037d6:	4307      	orrs	r7, r0
 80037d8:	3568      	adds	r5, #104	; 0x68
 80037da:	e7e8      	b.n	80037ae <_fwalk_reent+0x12>

080037dc <__retarget_lock_init_recursive>:
 80037dc:	4770      	bx	lr

080037de <__retarget_lock_acquire_recursive>:
 80037de:	4770      	bx	lr

080037e0 <__retarget_lock_release_recursive>:
 80037e0:	4770      	bx	lr
	...

080037e4 <__swhatbuf_r>:
 80037e4:	b570      	push	{r4, r5, r6, lr}
 80037e6:	000e      	movs	r6, r1
 80037e8:	001d      	movs	r5, r3
 80037ea:	230e      	movs	r3, #14
 80037ec:	5ec9      	ldrsh	r1, [r1, r3]
 80037ee:	0014      	movs	r4, r2
 80037f0:	b096      	sub	sp, #88	; 0x58
 80037f2:	2900      	cmp	r1, #0
 80037f4:	da08      	bge.n	8003808 <__swhatbuf_r+0x24>
 80037f6:	220c      	movs	r2, #12
 80037f8:	5eb3      	ldrsh	r3, [r6, r2]
 80037fa:	2200      	movs	r2, #0
 80037fc:	602a      	str	r2, [r5, #0]
 80037fe:	061b      	lsls	r3, r3, #24
 8003800:	d411      	bmi.n	8003826 <__swhatbuf_r+0x42>
 8003802:	2380      	movs	r3, #128	; 0x80
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	e00f      	b.n	8003828 <__swhatbuf_r+0x44>
 8003808:	466a      	mov	r2, sp
 800380a:	f000 f92f 	bl	8003a6c <_fstat_r>
 800380e:	2800      	cmp	r0, #0
 8003810:	dbf1      	blt.n	80037f6 <__swhatbuf_r+0x12>
 8003812:	23f0      	movs	r3, #240	; 0xf0
 8003814:	9901      	ldr	r1, [sp, #4]
 8003816:	021b      	lsls	r3, r3, #8
 8003818:	4019      	ands	r1, r3
 800381a:	4b05      	ldr	r3, [pc, #20]	; (8003830 <__swhatbuf_r+0x4c>)
 800381c:	18c9      	adds	r1, r1, r3
 800381e:	424b      	negs	r3, r1
 8003820:	4159      	adcs	r1, r3
 8003822:	6029      	str	r1, [r5, #0]
 8003824:	e7ed      	b.n	8003802 <__swhatbuf_r+0x1e>
 8003826:	2340      	movs	r3, #64	; 0x40
 8003828:	2000      	movs	r0, #0
 800382a:	6023      	str	r3, [r4, #0]
 800382c:	b016      	add	sp, #88	; 0x58
 800382e:	bd70      	pop	{r4, r5, r6, pc}
 8003830:	ffffe000 	.word	0xffffe000

08003834 <__smakebuf_r>:
 8003834:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003836:	2602      	movs	r6, #2
 8003838:	898b      	ldrh	r3, [r1, #12]
 800383a:	0005      	movs	r5, r0
 800383c:	000c      	movs	r4, r1
 800383e:	4233      	tst	r3, r6
 8003840:	d006      	beq.n	8003850 <__smakebuf_r+0x1c>
 8003842:	0023      	movs	r3, r4
 8003844:	3347      	adds	r3, #71	; 0x47
 8003846:	6023      	str	r3, [r4, #0]
 8003848:	6123      	str	r3, [r4, #16]
 800384a:	2301      	movs	r3, #1
 800384c:	6163      	str	r3, [r4, #20]
 800384e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8003850:	466a      	mov	r2, sp
 8003852:	ab01      	add	r3, sp, #4
 8003854:	f7ff ffc6 	bl	80037e4 <__swhatbuf_r>
 8003858:	9900      	ldr	r1, [sp, #0]
 800385a:	0007      	movs	r7, r0
 800385c:	0028      	movs	r0, r5
 800385e:	f7ff f9ad 	bl	8002bbc <_malloc_r>
 8003862:	2800      	cmp	r0, #0
 8003864:	d108      	bne.n	8003878 <__smakebuf_r+0x44>
 8003866:	220c      	movs	r2, #12
 8003868:	5ea3      	ldrsh	r3, [r4, r2]
 800386a:	059a      	lsls	r2, r3, #22
 800386c:	d4ef      	bmi.n	800384e <__smakebuf_r+0x1a>
 800386e:	2203      	movs	r2, #3
 8003870:	4393      	bics	r3, r2
 8003872:	431e      	orrs	r6, r3
 8003874:	81a6      	strh	r6, [r4, #12]
 8003876:	e7e4      	b.n	8003842 <__smakebuf_r+0xe>
 8003878:	4b0f      	ldr	r3, [pc, #60]	; (80038b8 <__smakebuf_r+0x84>)
 800387a:	62ab      	str	r3, [r5, #40]	; 0x28
 800387c:	2380      	movs	r3, #128	; 0x80
 800387e:	89a2      	ldrh	r2, [r4, #12]
 8003880:	6020      	str	r0, [r4, #0]
 8003882:	4313      	orrs	r3, r2
 8003884:	81a3      	strh	r3, [r4, #12]
 8003886:	9b00      	ldr	r3, [sp, #0]
 8003888:	6120      	str	r0, [r4, #16]
 800388a:	6163      	str	r3, [r4, #20]
 800388c:	9b01      	ldr	r3, [sp, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d00d      	beq.n	80038ae <__smakebuf_r+0x7a>
 8003892:	0028      	movs	r0, r5
 8003894:	230e      	movs	r3, #14
 8003896:	5ee1      	ldrsh	r1, [r4, r3]
 8003898:	f000 f8fa 	bl	8003a90 <_isatty_r>
 800389c:	2800      	cmp	r0, #0
 800389e:	d006      	beq.n	80038ae <__smakebuf_r+0x7a>
 80038a0:	2203      	movs	r2, #3
 80038a2:	89a3      	ldrh	r3, [r4, #12]
 80038a4:	4393      	bics	r3, r2
 80038a6:	001a      	movs	r2, r3
 80038a8:	2301      	movs	r3, #1
 80038aa:	4313      	orrs	r3, r2
 80038ac:	81a3      	strh	r3, [r4, #12]
 80038ae:	89a0      	ldrh	r0, [r4, #12]
 80038b0:	4307      	orrs	r7, r0
 80038b2:	81a7      	strh	r7, [r4, #12]
 80038b4:	e7cb      	b.n	800384e <__smakebuf_r+0x1a>
 80038b6:	46c0      	nop			; (mov r8, r8)
 80038b8:	08003621 	.word	0x08003621

080038bc <memchr>:
 80038bc:	b2c9      	uxtb	r1, r1
 80038be:	1882      	adds	r2, r0, r2
 80038c0:	4290      	cmp	r0, r2
 80038c2:	d101      	bne.n	80038c8 <memchr+0xc>
 80038c4:	2000      	movs	r0, #0
 80038c6:	4770      	bx	lr
 80038c8:	7803      	ldrb	r3, [r0, #0]
 80038ca:	428b      	cmp	r3, r1
 80038cc:	d0fb      	beq.n	80038c6 <memchr+0xa>
 80038ce:	3001      	adds	r0, #1
 80038d0:	e7f6      	b.n	80038c0 <memchr+0x4>
	...

080038d4 <__malloc_lock>:
 80038d4:	b510      	push	{r4, lr}
 80038d6:	4802      	ldr	r0, [pc, #8]	; (80038e0 <__malloc_lock+0xc>)
 80038d8:	f7ff ff81 	bl	80037de <__retarget_lock_acquire_recursive>
 80038dc:	bd10      	pop	{r4, pc}
 80038de:	46c0      	nop			; (mov r8, r8)
 80038e0:	200000f0 	.word	0x200000f0

080038e4 <__malloc_unlock>:
 80038e4:	b510      	push	{r4, lr}
 80038e6:	4802      	ldr	r0, [pc, #8]	; (80038f0 <__malloc_unlock+0xc>)
 80038e8:	f7ff ff7a 	bl	80037e0 <__retarget_lock_release_recursive>
 80038ec:	bd10      	pop	{r4, pc}
 80038ee:	46c0      	nop			; (mov r8, r8)
 80038f0:	200000f0 	.word	0x200000f0

080038f4 <_raise_r>:
 80038f4:	b570      	push	{r4, r5, r6, lr}
 80038f6:	0004      	movs	r4, r0
 80038f8:	000d      	movs	r5, r1
 80038fa:	291f      	cmp	r1, #31
 80038fc:	d904      	bls.n	8003908 <_raise_r+0x14>
 80038fe:	2316      	movs	r3, #22
 8003900:	6003      	str	r3, [r0, #0]
 8003902:	2001      	movs	r0, #1
 8003904:	4240      	negs	r0, r0
 8003906:	bd70      	pop	{r4, r5, r6, pc}
 8003908:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800390a:	2b00      	cmp	r3, #0
 800390c:	d004      	beq.n	8003918 <_raise_r+0x24>
 800390e:	008a      	lsls	r2, r1, #2
 8003910:	189b      	adds	r3, r3, r2
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	2a00      	cmp	r2, #0
 8003916:	d108      	bne.n	800392a <_raise_r+0x36>
 8003918:	0020      	movs	r0, r4
 800391a:	f000 f831 	bl	8003980 <_getpid_r>
 800391e:	002a      	movs	r2, r5
 8003920:	0001      	movs	r1, r0
 8003922:	0020      	movs	r0, r4
 8003924:	f000 f81a 	bl	800395c <_kill_r>
 8003928:	e7ed      	b.n	8003906 <_raise_r+0x12>
 800392a:	2000      	movs	r0, #0
 800392c:	2a01      	cmp	r2, #1
 800392e:	d0ea      	beq.n	8003906 <_raise_r+0x12>
 8003930:	1c51      	adds	r1, r2, #1
 8003932:	d103      	bne.n	800393c <_raise_r+0x48>
 8003934:	2316      	movs	r3, #22
 8003936:	3001      	adds	r0, #1
 8003938:	6023      	str	r3, [r4, #0]
 800393a:	e7e4      	b.n	8003906 <_raise_r+0x12>
 800393c:	2400      	movs	r4, #0
 800393e:	0028      	movs	r0, r5
 8003940:	601c      	str	r4, [r3, #0]
 8003942:	4790      	blx	r2
 8003944:	0020      	movs	r0, r4
 8003946:	e7de      	b.n	8003906 <_raise_r+0x12>

08003948 <raise>:
 8003948:	b510      	push	{r4, lr}
 800394a:	4b03      	ldr	r3, [pc, #12]	; (8003958 <raise+0x10>)
 800394c:	0001      	movs	r1, r0
 800394e:	6818      	ldr	r0, [r3, #0]
 8003950:	f7ff ffd0 	bl	80038f4 <_raise_r>
 8003954:	bd10      	pop	{r4, pc}
 8003956:	46c0      	nop			; (mov r8, r8)
 8003958:	2000000c 	.word	0x2000000c

0800395c <_kill_r>:
 800395c:	2300      	movs	r3, #0
 800395e:	b570      	push	{r4, r5, r6, lr}
 8003960:	4d06      	ldr	r5, [pc, #24]	; (800397c <_kill_r+0x20>)
 8003962:	0004      	movs	r4, r0
 8003964:	0008      	movs	r0, r1
 8003966:	0011      	movs	r1, r2
 8003968:	602b      	str	r3, [r5, #0]
 800396a:	f7fd f8cc 	bl	8000b06 <_kill>
 800396e:	1c43      	adds	r3, r0, #1
 8003970:	d103      	bne.n	800397a <_kill_r+0x1e>
 8003972:	682b      	ldr	r3, [r5, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d000      	beq.n	800397a <_kill_r+0x1e>
 8003978:	6023      	str	r3, [r4, #0]
 800397a:	bd70      	pop	{r4, r5, r6, pc}
 800397c:	200000f4 	.word	0x200000f4

08003980 <_getpid_r>:
 8003980:	b510      	push	{r4, lr}
 8003982:	f7fd f8ba 	bl	8000afa <_getpid>
 8003986:	bd10      	pop	{r4, pc}

08003988 <__sread>:
 8003988:	b570      	push	{r4, r5, r6, lr}
 800398a:	000c      	movs	r4, r1
 800398c:	250e      	movs	r5, #14
 800398e:	5f49      	ldrsh	r1, [r1, r5]
 8003990:	f000 f8a4 	bl	8003adc <_read_r>
 8003994:	2800      	cmp	r0, #0
 8003996:	db03      	blt.n	80039a0 <__sread+0x18>
 8003998:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800399a:	181b      	adds	r3, r3, r0
 800399c:	6563      	str	r3, [r4, #84]	; 0x54
 800399e:	bd70      	pop	{r4, r5, r6, pc}
 80039a0:	89a3      	ldrh	r3, [r4, #12]
 80039a2:	4a02      	ldr	r2, [pc, #8]	; (80039ac <__sread+0x24>)
 80039a4:	4013      	ands	r3, r2
 80039a6:	81a3      	strh	r3, [r4, #12]
 80039a8:	e7f9      	b.n	800399e <__sread+0x16>
 80039aa:	46c0      	nop			; (mov r8, r8)
 80039ac:	ffffefff 	.word	0xffffefff

080039b0 <__swrite>:
 80039b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039b2:	001f      	movs	r7, r3
 80039b4:	898b      	ldrh	r3, [r1, #12]
 80039b6:	0005      	movs	r5, r0
 80039b8:	000c      	movs	r4, r1
 80039ba:	0016      	movs	r6, r2
 80039bc:	05db      	lsls	r3, r3, #23
 80039be:	d505      	bpl.n	80039cc <__swrite+0x1c>
 80039c0:	230e      	movs	r3, #14
 80039c2:	5ec9      	ldrsh	r1, [r1, r3]
 80039c4:	2200      	movs	r2, #0
 80039c6:	2302      	movs	r3, #2
 80039c8:	f000 f874 	bl	8003ab4 <_lseek_r>
 80039cc:	89a3      	ldrh	r3, [r4, #12]
 80039ce:	4a05      	ldr	r2, [pc, #20]	; (80039e4 <__swrite+0x34>)
 80039d0:	0028      	movs	r0, r5
 80039d2:	4013      	ands	r3, r2
 80039d4:	81a3      	strh	r3, [r4, #12]
 80039d6:	0032      	movs	r2, r6
 80039d8:	230e      	movs	r3, #14
 80039da:	5ee1      	ldrsh	r1, [r4, r3]
 80039dc:	003b      	movs	r3, r7
 80039de:	f000 f81f 	bl	8003a20 <_write_r>
 80039e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039e4:	ffffefff 	.word	0xffffefff

080039e8 <__sseek>:
 80039e8:	b570      	push	{r4, r5, r6, lr}
 80039ea:	000c      	movs	r4, r1
 80039ec:	250e      	movs	r5, #14
 80039ee:	5f49      	ldrsh	r1, [r1, r5]
 80039f0:	f000 f860 	bl	8003ab4 <_lseek_r>
 80039f4:	89a3      	ldrh	r3, [r4, #12]
 80039f6:	1c42      	adds	r2, r0, #1
 80039f8:	d103      	bne.n	8003a02 <__sseek+0x1a>
 80039fa:	4a05      	ldr	r2, [pc, #20]	; (8003a10 <__sseek+0x28>)
 80039fc:	4013      	ands	r3, r2
 80039fe:	81a3      	strh	r3, [r4, #12]
 8003a00:	bd70      	pop	{r4, r5, r6, pc}
 8003a02:	2280      	movs	r2, #128	; 0x80
 8003a04:	0152      	lsls	r2, r2, #5
 8003a06:	4313      	orrs	r3, r2
 8003a08:	81a3      	strh	r3, [r4, #12]
 8003a0a:	6560      	str	r0, [r4, #84]	; 0x54
 8003a0c:	e7f8      	b.n	8003a00 <__sseek+0x18>
 8003a0e:	46c0      	nop			; (mov r8, r8)
 8003a10:	ffffefff 	.word	0xffffefff

08003a14 <__sclose>:
 8003a14:	b510      	push	{r4, lr}
 8003a16:	230e      	movs	r3, #14
 8003a18:	5ec9      	ldrsh	r1, [r1, r3]
 8003a1a:	f000 f815 	bl	8003a48 <_close_r>
 8003a1e:	bd10      	pop	{r4, pc}

08003a20 <_write_r>:
 8003a20:	b570      	push	{r4, r5, r6, lr}
 8003a22:	0004      	movs	r4, r0
 8003a24:	0008      	movs	r0, r1
 8003a26:	0011      	movs	r1, r2
 8003a28:	001a      	movs	r2, r3
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	4d05      	ldr	r5, [pc, #20]	; (8003a44 <_write_r+0x24>)
 8003a2e:	602b      	str	r3, [r5, #0]
 8003a30:	f7fd f8a2 	bl	8000b78 <_write>
 8003a34:	1c43      	adds	r3, r0, #1
 8003a36:	d103      	bne.n	8003a40 <_write_r+0x20>
 8003a38:	682b      	ldr	r3, [r5, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d000      	beq.n	8003a40 <_write_r+0x20>
 8003a3e:	6023      	str	r3, [r4, #0]
 8003a40:	bd70      	pop	{r4, r5, r6, pc}
 8003a42:	46c0      	nop			; (mov r8, r8)
 8003a44:	200000f4 	.word	0x200000f4

08003a48 <_close_r>:
 8003a48:	2300      	movs	r3, #0
 8003a4a:	b570      	push	{r4, r5, r6, lr}
 8003a4c:	4d06      	ldr	r5, [pc, #24]	; (8003a68 <_close_r+0x20>)
 8003a4e:	0004      	movs	r4, r0
 8003a50:	0008      	movs	r0, r1
 8003a52:	602b      	str	r3, [r5, #0]
 8003a54:	f7fd f8ac 	bl	8000bb0 <_close>
 8003a58:	1c43      	adds	r3, r0, #1
 8003a5a:	d103      	bne.n	8003a64 <_close_r+0x1c>
 8003a5c:	682b      	ldr	r3, [r5, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d000      	beq.n	8003a64 <_close_r+0x1c>
 8003a62:	6023      	str	r3, [r4, #0]
 8003a64:	bd70      	pop	{r4, r5, r6, pc}
 8003a66:	46c0      	nop			; (mov r8, r8)
 8003a68:	200000f4 	.word	0x200000f4

08003a6c <_fstat_r>:
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	b570      	push	{r4, r5, r6, lr}
 8003a70:	4d06      	ldr	r5, [pc, #24]	; (8003a8c <_fstat_r+0x20>)
 8003a72:	0004      	movs	r4, r0
 8003a74:	0008      	movs	r0, r1
 8003a76:	0011      	movs	r1, r2
 8003a78:	602b      	str	r3, [r5, #0]
 8003a7a:	f7fd f8a3 	bl	8000bc4 <_fstat>
 8003a7e:	1c43      	adds	r3, r0, #1
 8003a80:	d103      	bne.n	8003a8a <_fstat_r+0x1e>
 8003a82:	682b      	ldr	r3, [r5, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d000      	beq.n	8003a8a <_fstat_r+0x1e>
 8003a88:	6023      	str	r3, [r4, #0]
 8003a8a:	bd70      	pop	{r4, r5, r6, pc}
 8003a8c:	200000f4 	.word	0x200000f4

08003a90 <_isatty_r>:
 8003a90:	2300      	movs	r3, #0
 8003a92:	b570      	push	{r4, r5, r6, lr}
 8003a94:	4d06      	ldr	r5, [pc, #24]	; (8003ab0 <_isatty_r+0x20>)
 8003a96:	0004      	movs	r4, r0
 8003a98:	0008      	movs	r0, r1
 8003a9a:	602b      	str	r3, [r5, #0]
 8003a9c:	f7fd f8a0 	bl	8000be0 <_isatty>
 8003aa0:	1c43      	adds	r3, r0, #1
 8003aa2:	d103      	bne.n	8003aac <_isatty_r+0x1c>
 8003aa4:	682b      	ldr	r3, [r5, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d000      	beq.n	8003aac <_isatty_r+0x1c>
 8003aaa:	6023      	str	r3, [r4, #0]
 8003aac:	bd70      	pop	{r4, r5, r6, pc}
 8003aae:	46c0      	nop			; (mov r8, r8)
 8003ab0:	200000f4 	.word	0x200000f4

08003ab4 <_lseek_r>:
 8003ab4:	b570      	push	{r4, r5, r6, lr}
 8003ab6:	0004      	movs	r4, r0
 8003ab8:	0008      	movs	r0, r1
 8003aba:	0011      	movs	r1, r2
 8003abc:	001a      	movs	r2, r3
 8003abe:	2300      	movs	r3, #0
 8003ac0:	4d05      	ldr	r5, [pc, #20]	; (8003ad8 <_lseek_r+0x24>)
 8003ac2:	602b      	str	r3, [r5, #0]
 8003ac4:	f7fd f895 	bl	8000bf2 <_lseek>
 8003ac8:	1c43      	adds	r3, r0, #1
 8003aca:	d103      	bne.n	8003ad4 <_lseek_r+0x20>
 8003acc:	682b      	ldr	r3, [r5, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d000      	beq.n	8003ad4 <_lseek_r+0x20>
 8003ad2:	6023      	str	r3, [r4, #0]
 8003ad4:	bd70      	pop	{r4, r5, r6, pc}
 8003ad6:	46c0      	nop			; (mov r8, r8)
 8003ad8:	200000f4 	.word	0x200000f4

08003adc <_read_r>:
 8003adc:	b570      	push	{r4, r5, r6, lr}
 8003ade:	0004      	movs	r4, r0
 8003ae0:	0008      	movs	r0, r1
 8003ae2:	0011      	movs	r1, r2
 8003ae4:	001a      	movs	r2, r3
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	4d05      	ldr	r5, [pc, #20]	; (8003b00 <_read_r+0x24>)
 8003aea:	602b      	str	r3, [r5, #0]
 8003aec:	f7fd f827 	bl	8000b3e <_read>
 8003af0:	1c43      	adds	r3, r0, #1
 8003af2:	d103      	bne.n	8003afc <_read_r+0x20>
 8003af4:	682b      	ldr	r3, [r5, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d000      	beq.n	8003afc <_read_r+0x20>
 8003afa:	6023      	str	r3, [r4, #0]
 8003afc:	bd70      	pop	{r4, r5, r6, pc}
 8003afe:	46c0      	nop			; (mov r8, r8)
 8003b00:	200000f4 	.word	0x200000f4

08003b04 <_init>:
 8003b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b06:	46c0      	nop			; (mov r8, r8)
 8003b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b0a:	bc08      	pop	{r3}
 8003b0c:	469e      	mov	lr, r3
 8003b0e:	4770      	bx	lr

08003b10 <_fini>:
 8003b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b12:	46c0      	nop			; (mov r8, r8)
 8003b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b16:	bc08      	pop	{r3}
 8003b18:	469e      	mov	lr, r3
 8003b1a:	4770      	bx	lr
